/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// SpanSortDirection the model 'SpanSortDirection'
type SpanSortDirection string

// List of SpanSortDirection
const (
	SPANSORTDIRECTION_ASCENDING  SpanSortDirection = "Ascending"
	SPANSORTDIRECTION_DESCENDING SpanSortDirection = "Descending"
)

// All allowed values of SpanSortDirection enum
var AllowedSpanSortDirectionEnumValues = []SpanSortDirection{
	"Ascending",
	"Descending",
}

func (v *SpanSortDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpanSortDirection(value)
	for _, existing := range AllowedSpanSortDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpanSortDirection", value)
}

// NewSpanSortDirectionFromValue returns a pointer to a valid SpanSortDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpanSortDirectionFromValue(v string) (*SpanSortDirection, error) {
	ev := SpanSortDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpanSortDirection: valid values are %v", v, AllowedSpanSortDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpanSortDirection) IsValid() bool {
	for _, existing := range AllowedSpanSortDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpanSortDirection value
func (v SpanSortDirection) Ptr() *SpanSortDirection {
	return &v
}

type NullableSpanSortDirection struct {
	value *SpanSortDirection
	isSet bool
}

func (v NullableSpanSortDirection) Get() *SpanSortDirection {
	return v.value
}

func (v *NullableSpanSortDirection) Set(val *SpanSortDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanSortDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanSortDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanSortDirection(val *SpanSortDirection) *NullableSpanSortDirection {
	return &NullableSpanSortDirection{value: val, isSet: true}
}

func (v NullableSpanSortDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanSortDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
