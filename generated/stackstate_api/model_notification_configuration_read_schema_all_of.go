/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// NotificationConfigurationReadSchemaAllOf struct for NotificationConfigurationReadSchemaAllOf
type NotificationConfigurationReadSchemaAllOf struct {
	Id                  int64                                       `json:"id"`
	LastUpdateTimestamp int64                                       `json:"lastUpdateTimestamp"`
	RuntimeStatus       NotificationConfigurationRuntimeStatusValue `json:"runtimeStatus"`
}

// NewNotificationConfigurationReadSchemaAllOf instantiates a new NotificationConfigurationReadSchemaAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationConfigurationReadSchemaAllOf(id int64, lastUpdateTimestamp int64, runtimeStatus NotificationConfigurationRuntimeStatusValue) *NotificationConfigurationReadSchemaAllOf {
	this := NotificationConfigurationReadSchemaAllOf{}
	this.Id = id
	this.LastUpdateTimestamp = lastUpdateTimestamp
	this.RuntimeStatus = runtimeStatus
	return &this
}

// NewNotificationConfigurationReadSchemaAllOfWithDefaults instantiates a new NotificationConfigurationReadSchemaAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationConfigurationReadSchemaAllOfWithDefaults() *NotificationConfigurationReadSchemaAllOf {
	this := NotificationConfigurationReadSchemaAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *NotificationConfigurationReadSchemaAllOf) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NotificationConfigurationReadSchemaAllOf) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NotificationConfigurationReadSchemaAllOf) SetId(v int64) {
	o.Id = v
}

// GetLastUpdateTimestamp returns the LastUpdateTimestamp field value
func (o *NotificationConfigurationReadSchemaAllOf) GetLastUpdateTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastUpdateTimestamp
}

// GetLastUpdateTimestampOk returns a tuple with the LastUpdateTimestamp field value
// and a boolean to check if the value has been set.
func (o *NotificationConfigurationReadSchemaAllOf) GetLastUpdateTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdateTimestamp, true
}

// SetLastUpdateTimestamp sets field value
func (o *NotificationConfigurationReadSchemaAllOf) SetLastUpdateTimestamp(v int64) {
	o.LastUpdateTimestamp = v
}

// GetRuntimeStatus returns the RuntimeStatus field value
func (o *NotificationConfigurationReadSchemaAllOf) GetRuntimeStatus() NotificationConfigurationRuntimeStatusValue {
	if o == nil {
		var ret NotificationConfigurationRuntimeStatusValue
		return ret
	}

	return o.RuntimeStatus
}

// GetRuntimeStatusOk returns a tuple with the RuntimeStatus field value
// and a boolean to check if the value has been set.
func (o *NotificationConfigurationReadSchemaAllOf) GetRuntimeStatusOk() (*NotificationConfigurationRuntimeStatusValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuntimeStatus, true
}

// SetRuntimeStatus sets field value
func (o *NotificationConfigurationReadSchemaAllOf) SetRuntimeStatus(v NotificationConfigurationRuntimeStatusValue) {
	o.RuntimeStatus = v
}

func (o NotificationConfigurationReadSchemaAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["lastUpdateTimestamp"] = o.LastUpdateTimestamp
	}
	if true {
		toSerialize["runtimeStatus"] = o.RuntimeStatus
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationConfigurationReadSchemaAllOf struct {
	value *NotificationConfigurationReadSchemaAllOf
	isSet bool
}

func (v NullableNotificationConfigurationReadSchemaAllOf) Get() *NotificationConfigurationReadSchemaAllOf {
	return v.value
}

func (v *NullableNotificationConfigurationReadSchemaAllOf) Set(val *NotificationConfigurationReadSchemaAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationConfigurationReadSchemaAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationConfigurationReadSchemaAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationConfigurationReadSchemaAllOf(val *NotificationConfigurationReadSchemaAllOf) *NullableNotificationConfigurationReadSchemaAllOf {
	return &NullableNotificationConfigurationReadSchemaAllOf{value: val, isSet: true}
}

func (v NullableNotificationConfigurationReadSchemaAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationConfigurationReadSchemaAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
