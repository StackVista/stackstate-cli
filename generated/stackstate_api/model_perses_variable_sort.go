/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// PersesVariableSort the model 'PersesVariableSort'
type PersesVariableSort string

// List of PersesVariableSort
const (
	PERSESVARIABLESORT_NONE                 PersesVariableSort = "none"
	PERSESVARIABLESORT_ALPHABETICAL_ASC     PersesVariableSort = "alphabetical-asc"
	PERSESVARIABLESORT_ALPHABETICAL_DESC    PersesVariableSort = "alphabetical-desc"
	PERSESVARIABLESORT_NUMERICAL_ASC        PersesVariableSort = "numerical-asc"
	PERSESVARIABLESORT_NUMERICAL_DESC       PersesVariableSort = "numerical-desc"
	PERSESVARIABLESORT_ALPHABETICAL_CI_ASC  PersesVariableSort = "alphabetical-ci-asc"
	PERSESVARIABLESORT_ALPHABETICAL_CI_DESC PersesVariableSort = "alphabetical-ci-desc"
)

// All allowed values of PersesVariableSort enum
var AllowedPersesVariableSortEnumValues = []PersesVariableSort{
	"none",
	"alphabetical-asc",
	"alphabetical-desc",
	"numerical-asc",
	"numerical-desc",
	"alphabetical-ci-asc",
	"alphabetical-ci-desc",
}

func (v *PersesVariableSort) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PersesVariableSort(value)
	for _, existing := range AllowedPersesVariableSortEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PersesVariableSort", value)
}

// NewPersesVariableSortFromValue returns a pointer to a valid PersesVariableSort
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPersesVariableSortFromValue(v string) (*PersesVariableSort, error) {
	ev := PersesVariableSort(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PersesVariableSort: valid values are %v", v, AllowedPersesVariableSortEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PersesVariableSort) IsValid() bool {
	for _, existing := range AllowedPersesVariableSortEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PersesVariableSort value
func (v PersesVariableSort) Ptr() *PersesVariableSort {
	return &v
}

type NullablePersesVariableSort struct {
	value *PersesVariableSort
	isSet bool
}

func (v NullablePersesVariableSort) Get() *PersesVariableSort {
	return v.value
}

func (v *NullablePersesVariableSort) Set(val *PersesVariableSort) {
	v.value = val
	v.isSet = true
}

func (v NullablePersesVariableSort) IsSet() bool {
	return v.isSet
}

func (v *NullablePersesVariableSort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersesVariableSort(val *PersesVariableSort) *NullablePersesVariableSort {
	return &NullablePersesVariableSort{value: val, isSet: true}
}

func (v NullablePersesVariableSort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersesVariableSort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
