/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// PersesDatasourceSpec struct for PersesDatasourceSpec
type PersesDatasourceSpec struct {
	Default *bool                       `json:"default,omitempty"`
	Display *PersesDashboardDisplaySpec `json:"display,omitempty"`
	Plugin  *PersesPlugin               `json:"plugin,omitempty"`
}

// NewPersesDatasourceSpec instantiates a new PersesDatasourceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersesDatasourceSpec() *PersesDatasourceSpec {
	this := PersesDatasourceSpec{}
	return &this
}

// NewPersesDatasourceSpecWithDefaults instantiates a new PersesDatasourceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersesDatasourceSpecWithDefaults() *PersesDatasourceSpec {
	this := PersesDatasourceSpec{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *PersesDatasourceSpec) GetDefault() bool {
	if o == nil || o.Default == nil {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersesDatasourceSpec) GetDefaultOk() (*bool, bool) {
	if o == nil || o.Default == nil {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *PersesDatasourceSpec) HasDefault() bool {
	if o != nil && o.Default != nil {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *PersesDatasourceSpec) SetDefault(v bool) {
	o.Default = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *PersesDatasourceSpec) GetDisplay() PersesDashboardDisplaySpec {
	if o == nil || o.Display == nil {
		var ret PersesDashboardDisplaySpec
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersesDatasourceSpec) GetDisplayOk() (*PersesDashboardDisplaySpec, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *PersesDatasourceSpec) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given PersesDashboardDisplaySpec and assigns it to the Display field.
func (o *PersesDatasourceSpec) SetDisplay(v PersesDashboardDisplaySpec) {
	o.Display = &v
}

// GetPlugin returns the Plugin field value if set, zero value otherwise.
func (o *PersesDatasourceSpec) GetPlugin() PersesPlugin {
	if o == nil || o.Plugin == nil {
		var ret PersesPlugin
		return ret
	}
	return *o.Plugin
}

// GetPluginOk returns a tuple with the Plugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersesDatasourceSpec) GetPluginOk() (*PersesPlugin, bool) {
	if o == nil || o.Plugin == nil {
		return nil, false
	}
	return o.Plugin, true
}

// HasPlugin returns a boolean if a field has been set.
func (o *PersesDatasourceSpec) HasPlugin() bool {
	if o != nil && o.Plugin != nil {
		return true
	}

	return false
}

// SetPlugin gets a reference to the given PersesPlugin and assigns it to the Plugin field.
func (o *PersesDatasourceSpec) SetPlugin(v PersesPlugin) {
	o.Plugin = &v
}

func (o PersesDatasourceSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Default != nil {
		toSerialize["default"] = o.Default
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	if o.Plugin != nil {
		toSerialize["plugin"] = o.Plugin
	}
	return json.Marshal(toSerialize)
}

type NullablePersesDatasourceSpec struct {
	value *PersesDatasourceSpec
	isSet bool
}

func (v NullablePersesDatasourceSpec) Get() *PersesDatasourceSpec {
	return v.value
}

func (v *NullablePersesDatasourceSpec) Set(val *PersesDatasourceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePersesDatasourceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePersesDatasourceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersesDatasourceSpec(val *PersesDatasourceSpec) *NullablePersesDatasourceSpec {
	return &NullablePersesDatasourceSpec{value: val, isSet: true}
}

func (v NullablePersesDatasourceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersesDatasourceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
