/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"strings"
)

type StackpackAPI interface {

	/*
		ConfirmManualSteps Confirm manual steps

		Confirm manual steps of the stackpack

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param stackPackName
		@param stackPackInstanceId
		@return ApiConfirmManualStepsRequest
	*/
	ConfirmManualSteps(ctx context.Context, stackPackName string, stackPackInstanceId int64) ApiConfirmManualStepsRequest

	// ConfirmManualStepsExecute executes the request
	//  @return string
	ConfirmManualStepsExecute(r ApiConfirmManualStepsRequest) (string, *http.Response, error)

	/*
		ProvisionDetails Provision API

		Provision details

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param stackPackName
		@return ApiProvisionDetailsRequest
	*/
	ProvisionDetails(ctx context.Context, stackPackName string) ApiProvisionDetailsRequest

	// ProvisionDetailsExecute executes the request
	//  @return ProvisionResponse
	ProvisionDetailsExecute(r ApiProvisionDetailsRequest) (*ProvisionResponse, *http.Response, error)

	/*
		ProvisionUninstall Provision API

		Provision details

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param stackPackName
		@param stackPackInstanceId
		@return ApiProvisionUninstallRequest
	*/
	ProvisionUninstall(ctx context.Context, stackPackName string, stackPackInstanceId int64) ApiProvisionUninstallRequest

	// ProvisionUninstallExecute executes the request
	//  @return string
	ProvisionUninstallExecute(r ApiProvisionUninstallRequest) (string, *http.Response, error)

	/*
		StackPackList StackPack API

		list of stackpack

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiStackPackListRequest
	*/
	StackPackList(ctx context.Context) ApiStackPackListRequest

	// StackPackListExecute executes the request
	//  @return []FullStackPack
	StackPackListExecute(r ApiStackPackListRequest) ([]FullStackPack, *http.Response, error)

	/*
		StackPackUpload StackPack API

		upload a StackPack

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiStackPackUploadRequest
	*/
	StackPackUpload(ctx context.Context) ApiStackPackUploadRequest

	// StackPackUploadExecute executes the request
	//  @return StackPack
	StackPackUploadExecute(r ApiStackPackUploadRequest) (*StackPack, *http.Response, error)

	/*
		UpgradeStackPack Upgrade API

		Upgrade stackpack

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param stackPackName
		@return ApiUpgradeStackPackRequest
	*/
	UpgradeStackPack(ctx context.Context, stackPackName string) ApiUpgradeStackPackRequest

	// UpgradeStackPackExecute executes the request
	//  @return string
	UpgradeStackPackExecute(r ApiUpgradeStackPackRequest) (string, *http.Response, error)
}

// StackpackAPIService StackpackAPI service
type StackpackAPIService service

type ApiConfirmManualStepsRequest struct {
	ctx                 context.Context
	ApiService          StackpackAPI
	stackPackName       string
	stackPackInstanceId int64
}

func (r ApiConfirmManualStepsRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ConfirmManualStepsExecute(r)
}

/*
ConfirmManualSteps Confirm manual steps

Confirm manual steps of the stackpack

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param stackPackName
	@param stackPackInstanceId
	@return ApiConfirmManualStepsRequest
*/
func (a *StackpackAPIService) ConfirmManualSteps(ctx context.Context, stackPackName string, stackPackInstanceId int64) ApiConfirmManualStepsRequest {
	return ApiConfirmManualStepsRequest{
		ApiService:          a,
		ctx:                 ctx,
		stackPackName:       stackPackName,
		stackPackInstanceId: stackPackInstanceId,
	}
}

// Execute executes the request
//
//	@return string
func (a *StackpackAPIService) ConfirmManualStepsExecute(r ApiConfirmManualStepsRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StackpackAPIService.ConfirmManualSteps")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stackpack/{stackPackName}/confirm-manual-steps/{stackPackInstanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"stackPackName"+"}", url.PathEscape(parameterToString(r.stackPackName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"stackPackInstanceId"+"}", url.PathEscape(parameterToString(r.stackPackInstanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisionDetailsRequest struct {
	ctx           context.Context
	ApiService    StackpackAPI
	stackPackName string
	unlocked      *string
	requestBody   *map[string]string
}

func (r ApiProvisionDetailsRequest) Unlocked(unlocked string) ApiProvisionDetailsRequest {
	r.unlocked = &unlocked
	return r
}

func (r ApiProvisionDetailsRequest) RequestBody(requestBody map[string]string) ApiProvisionDetailsRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiProvisionDetailsRequest) Execute() (*ProvisionResponse, *http.Response, error) {
	return r.ApiService.ProvisionDetailsExecute(r)
}

/*
ProvisionDetails Provision API

Provision details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param stackPackName
	@return ApiProvisionDetailsRequest
*/
func (a *StackpackAPIService) ProvisionDetails(ctx context.Context, stackPackName string) ApiProvisionDetailsRequest {
	return ApiProvisionDetailsRequest{
		ApiService:    a,
		ctx:           ctx,
		stackPackName: stackPackName,
	}
}

// Execute executes the request
//
//	@return ProvisionResponse
func (a *StackpackAPIService) ProvisionDetailsExecute(r ApiProvisionDetailsRequest) (*ProvisionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProvisionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StackpackAPIService.ProvisionDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stackpack/{stackPackName}/provision"
	localVarPath = strings.Replace(localVarPath, "{"+"stackPackName"+"}", url.PathEscape(parameterToString(r.stackPackName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unlocked == nil {
		return localVarReturnValue, nil, reportError("unlocked is required and must be specified")
	}

	localVarQueryParams.Add("unlocked", parameterToString(*r.unlocked, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisionUninstallRequest struct {
	ctx                 context.Context
	ApiService          StackpackAPI
	stackPackName       string
	stackPackInstanceId int64
}

func (r ApiProvisionUninstallRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ProvisionUninstallExecute(r)
}

/*
ProvisionUninstall Provision API

Provision details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param stackPackName
	@param stackPackInstanceId
	@return ApiProvisionUninstallRequest
*/
func (a *StackpackAPIService) ProvisionUninstall(ctx context.Context, stackPackName string, stackPackInstanceId int64) ApiProvisionUninstallRequest {
	return ApiProvisionUninstallRequest{
		ApiService:          a,
		ctx:                 ctx,
		stackPackName:       stackPackName,
		stackPackInstanceId: stackPackInstanceId,
	}
}

// Execute executes the request
//
//	@return string
func (a *StackpackAPIService) ProvisionUninstallExecute(r ApiProvisionUninstallRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StackpackAPIService.ProvisionUninstall")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stackpack/{stackPackName}/deprovision/{stackPackInstanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"stackPackName"+"}", url.PathEscape(parameterToString(r.stackPackName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"stackPackInstanceId"+"}", url.PathEscape(parameterToString(r.stackPackInstanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStackPackListRequest struct {
	ctx        context.Context
	ApiService StackpackAPI
}

func (r ApiStackPackListRequest) Execute() ([]FullStackPack, *http.Response, error) {
	return r.ApiService.StackPackListExecute(r)
}

/*
StackPackList StackPack API

list of stackpack

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStackPackListRequest
*/
func (a *StackpackAPIService) StackPackList(ctx context.Context) ApiStackPackListRequest {
	return ApiStackPackListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []FullStackPack
func (a *StackpackAPIService) StackPackListExecute(r ApiStackPackListRequest) ([]FullStackPack, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []FullStackPack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StackpackAPIService.StackPackList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stackpack"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStackPackUploadRequest struct {
	ctx        context.Context
	ApiService StackpackAPI
	stackPack  **os.File
}

func (r ApiStackPackUploadRequest) StackPack(stackPack *os.File) ApiStackPackUploadRequest {
	r.stackPack = &stackPack
	return r
}

func (r ApiStackPackUploadRequest) Execute() (*StackPack, *http.Response, error) {
	return r.ApiService.StackPackUploadExecute(r)
}

/*
StackPackUpload StackPack API

upload a StackPack

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStackPackUploadRequest
*/
func (a *StackpackAPIService) StackPackUpload(ctx context.Context) ApiStackPackUploadRequest {
	return ApiStackPackUploadRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StackPack
func (a *StackpackAPIService) StackPackUploadExecute(r ApiStackPackUploadRequest) (*StackPack, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StackPack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StackpackAPIService.StackPackUpload")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stackpack"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var stackPackLocalVarFormFileName string
	var stackPackLocalVarFileName string
	var stackPackLocalVarFileBytes []byte

	stackPackLocalVarFormFileName = "stackPack"

	var stackPackLocalVarFile *os.File
	if r.stackPack != nil {
		stackPackLocalVarFile = *r.stackPack
	}
	if stackPackLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(stackPackLocalVarFile)
		stackPackLocalVarFileBytes = fbs
		stackPackLocalVarFileName = stackPackLocalVarFile.Name()
		stackPackLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: stackPackLocalVarFileBytes, fileName: stackPackLocalVarFileName, formFileName: stackPackLocalVarFormFileName})
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpgradeStackPackRequest struct {
	ctx           context.Context
	ApiService    StackpackAPI
	stackPackName string
	unlocked      *string
}

func (r ApiUpgradeStackPackRequest) Unlocked(unlocked string) ApiUpgradeStackPackRequest {
	r.unlocked = &unlocked
	return r
}

func (r ApiUpgradeStackPackRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.UpgradeStackPackExecute(r)
}

/*
UpgradeStackPack Upgrade API

Upgrade stackpack

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param stackPackName
	@return ApiUpgradeStackPackRequest
*/
func (a *StackpackAPIService) UpgradeStackPack(ctx context.Context, stackPackName string) ApiUpgradeStackPackRequest {
	return ApiUpgradeStackPackRequest{
		ApiService:    a,
		ctx:           ctx,
		stackPackName: stackPackName,
	}
}

// Execute executes the request
//
//	@return string
func (a *StackpackAPIService) UpgradeStackPackExecute(r ApiUpgradeStackPackRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StackpackAPIService.UpgradeStackPack")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stackpack/{stackPackName}/upgrade"
	localVarPath = strings.Replace(localVarPath, "{"+"stackPackName"+"}", url.PathEscape(parameterToString(r.stackPackName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unlocked == nil {
		return localVarReturnValue, nil, reportError("unlocked is required and must be specified")
	}

	localVarQueryParams.Add("unlocked", parameterToString(*r.unlocked, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------

type StackpackAPIMock struct {
	ConfirmManualStepsCalls    *[]ConfirmManualStepsCall
	ConfirmManualStepsResponse ConfirmManualStepsMockResponse
	ProvisionDetailsCalls      *[]ProvisionDetailsCall
	ProvisionDetailsResponse   ProvisionDetailsMockResponse
	ProvisionUninstallCalls    *[]ProvisionUninstallCall
	ProvisionUninstallResponse ProvisionUninstallMockResponse
	StackPackListCalls         *[]StackPackListCall
	StackPackListResponse      StackPackListMockResponse
	StackPackUploadCalls       *[]StackPackUploadCall
	StackPackUploadResponse    StackPackUploadMockResponse
	UpgradeStackPackCalls      *[]UpgradeStackPackCall
	UpgradeStackPackResponse   UpgradeStackPackMockResponse
}

func NewStackpackAPIMock() StackpackAPIMock {
	xConfirmManualStepsCalls := make([]ConfirmManualStepsCall, 0)
	xProvisionDetailsCalls := make([]ProvisionDetailsCall, 0)
	xProvisionUninstallCalls := make([]ProvisionUninstallCall, 0)
	xStackPackListCalls := make([]StackPackListCall, 0)
	xStackPackUploadCalls := make([]StackPackUploadCall, 0)
	xUpgradeStackPackCalls := make([]UpgradeStackPackCall, 0)
	return StackpackAPIMock{
		ConfirmManualStepsCalls: &xConfirmManualStepsCalls,
		ProvisionDetailsCalls:   &xProvisionDetailsCalls,
		ProvisionUninstallCalls: &xProvisionUninstallCalls,
		StackPackListCalls:      &xStackPackListCalls,
		StackPackUploadCalls:    &xStackPackUploadCalls,
		UpgradeStackPackCalls:   &xUpgradeStackPackCalls,
	}
}

type ConfirmManualStepsMockResponse struct {
	Result   string
	Response *http.Response
	Error    error
}

type ConfirmManualStepsCall struct {
	PstackPackName       string
	PstackPackInstanceId int64
}

func (mock StackpackAPIMock) ConfirmManualSteps(ctx context.Context, stackPackName string, stackPackInstanceId int64) ApiConfirmManualStepsRequest {
	return ApiConfirmManualStepsRequest{
		ApiService:          mock,
		ctx:                 ctx,
		stackPackName:       stackPackName,
		stackPackInstanceId: stackPackInstanceId,
	}
}

func (mock StackpackAPIMock) ConfirmManualStepsExecute(r ApiConfirmManualStepsRequest) (string, *http.Response, error) {
	p := ConfirmManualStepsCall{
		PstackPackName:       r.stackPackName,
		PstackPackInstanceId: r.stackPackInstanceId,
	}
	*mock.ConfirmManualStepsCalls = append(*mock.ConfirmManualStepsCalls, p)
	return mock.ConfirmManualStepsResponse.Result, mock.ConfirmManualStepsResponse.Response, mock.ConfirmManualStepsResponse.Error
}

type ProvisionDetailsMockResponse struct {
	Result   ProvisionResponse
	Response *http.Response
	Error    error
}

type ProvisionDetailsCall struct {
	PstackPackName string
	Punlocked      *string
	PrequestBody   *map[string]string
}

func (mock StackpackAPIMock) ProvisionDetails(ctx context.Context, stackPackName string) ApiProvisionDetailsRequest {
	return ApiProvisionDetailsRequest{
		ApiService:    mock,
		ctx:           ctx,
		stackPackName: stackPackName,
	}
}

func (mock StackpackAPIMock) ProvisionDetailsExecute(r ApiProvisionDetailsRequest) (*ProvisionResponse, *http.Response, error) {
	p := ProvisionDetailsCall{
		PstackPackName: r.stackPackName,
		Punlocked:      r.unlocked,
		PrequestBody:   r.requestBody,
	}
	*mock.ProvisionDetailsCalls = append(*mock.ProvisionDetailsCalls, p)
	return &mock.ProvisionDetailsResponse.Result, mock.ProvisionDetailsResponse.Response, mock.ProvisionDetailsResponse.Error
}

type ProvisionUninstallMockResponse struct {
	Result   string
	Response *http.Response
	Error    error
}

type ProvisionUninstallCall struct {
	PstackPackName       string
	PstackPackInstanceId int64
}

func (mock StackpackAPIMock) ProvisionUninstall(ctx context.Context, stackPackName string, stackPackInstanceId int64) ApiProvisionUninstallRequest {
	return ApiProvisionUninstallRequest{
		ApiService:          mock,
		ctx:                 ctx,
		stackPackName:       stackPackName,
		stackPackInstanceId: stackPackInstanceId,
	}
}

func (mock StackpackAPIMock) ProvisionUninstallExecute(r ApiProvisionUninstallRequest) (string, *http.Response, error) {
	p := ProvisionUninstallCall{
		PstackPackName:       r.stackPackName,
		PstackPackInstanceId: r.stackPackInstanceId,
	}
	*mock.ProvisionUninstallCalls = append(*mock.ProvisionUninstallCalls, p)
	return mock.ProvisionUninstallResponse.Result, mock.ProvisionUninstallResponse.Response, mock.ProvisionUninstallResponse.Error
}

type StackPackListMockResponse struct {
	Result   []FullStackPack
	Response *http.Response
	Error    error
}

type StackPackListCall struct {
}

func (mock StackpackAPIMock) StackPackList(ctx context.Context) ApiStackPackListRequest {
	return ApiStackPackListRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock StackpackAPIMock) StackPackListExecute(r ApiStackPackListRequest) ([]FullStackPack, *http.Response, error) {
	p := StackPackListCall{}
	*mock.StackPackListCalls = append(*mock.StackPackListCalls, p)
	return mock.StackPackListResponse.Result, mock.StackPackListResponse.Response, mock.StackPackListResponse.Error
}

type StackPackUploadMockResponse struct {
	Result   StackPack
	Response *http.Response
	Error    error
}

type StackPackUploadCall struct {
	PstackPack **os.File
}

func (mock StackpackAPIMock) StackPackUpload(ctx context.Context) ApiStackPackUploadRequest {
	return ApiStackPackUploadRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock StackpackAPIMock) StackPackUploadExecute(r ApiStackPackUploadRequest) (*StackPack, *http.Response, error) {
	p := StackPackUploadCall{
		PstackPack: r.stackPack,
	}
	*mock.StackPackUploadCalls = append(*mock.StackPackUploadCalls, p)
	return &mock.StackPackUploadResponse.Result, mock.StackPackUploadResponse.Response, mock.StackPackUploadResponse.Error
}

type UpgradeStackPackMockResponse struct {
	Result   string
	Response *http.Response
	Error    error
}

type UpgradeStackPackCall struct {
	PstackPackName string
	Punlocked      *string
}

func (mock StackpackAPIMock) UpgradeStackPack(ctx context.Context, stackPackName string) ApiUpgradeStackPackRequest {
	return ApiUpgradeStackPackRequest{
		ApiService:    mock,
		ctx:           ctx,
		stackPackName: stackPackName,
	}
}

func (mock StackpackAPIMock) UpgradeStackPackExecute(r ApiUpgradeStackPackRequest) (string, *http.Response, error) {
	p := UpgradeStackPackCall{
		PstackPackName: r.stackPackName,
		Punlocked:      r.unlocked,
	}
	*mock.UpgradeStackPackCalls = append(*mock.UpgradeStackPackCalls, p)
	return mock.UpgradeStackPackResponse.Result, mock.UpgradeStackPackResponse.Response, mock.UpgradeStackPackResponse.Error
}
