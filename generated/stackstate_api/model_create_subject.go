/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// CreateSubject struct for CreateSubject
type CreateSubject struct {
	Query string `json:"query"`
	Version string `json:"version"`
}

// NewCreateSubject instantiates a new CreateSubject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubject(query string, version string) *CreateSubject {
	this := CreateSubject{}
	this.Query = query
	this.Version = version
	return &this
}

// NewCreateSubjectWithDefaults instantiates a new CreateSubject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubjectWithDefaults() *CreateSubject {
	this := CreateSubject{}
	return &this
}

// GetQuery returns the Query field value
func (o *CreateSubject) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *CreateSubject) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *CreateSubject) SetQuery(v string) {
	o.Query = v
}

// GetVersion returns the Version field value
func (o *CreateSubject) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *CreateSubject) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *CreateSubject) SetVersion(v string) {
	o.Version = v
}

func (o CreateSubject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["query"] = o.Query
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableCreateSubject struct {
	value *CreateSubject
	isSet bool
}

func (v NullableCreateSubject) Get() *CreateSubject {
	return v.value
}

func (v *NullableCreateSubject) Set(val *CreateSubject) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubject) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubject(val *CreateSubject) *NullableCreateSubject {
	return &NullableCreateSubject{value: val, isSet: true}
}

func (v NullableCreateSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


