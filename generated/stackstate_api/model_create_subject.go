/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// CreateSubject struct for CreateSubject
type CreateSubject struct {
	Query   *string `json:"query,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewCreateSubject instantiates a new CreateSubject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubject() *CreateSubject {
	this := CreateSubject{}
	return &this
}

// NewCreateSubjectWithDefaults instantiates a new CreateSubject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubjectWithDefaults() *CreateSubject {
	this := CreateSubject{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *CreateSubject) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubject) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *CreateSubject) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *CreateSubject) SetQuery(v string) {
	o.Query = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CreateSubject) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubject) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CreateSubject) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CreateSubject) SetVersion(v string) {
	o.Version = &v
}

func (o CreateSubject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableCreateSubject struct {
	value *CreateSubject
	isSet bool
}

func (v NullableCreateSubject) Get() *CreateSubject {
	return v.value
}

func (v *NullableCreateSubject) Set(val *CreateSubject) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubject) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubject(val *CreateSubject) *NullableCreateSubject {
	return &NullableCreateSubject{value: val, isSet: true}
}

func (v NullableCreateSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
