/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// SubjectConfig struct for SubjectConfig
type SubjectConfig struct {
	Handle string `json:"handle"`
	ScopeQuery *string `json:"scopeQuery,omitempty"`
}

// NewSubjectConfig instantiates a new SubjectConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubjectConfig(handle string) *SubjectConfig {
	this := SubjectConfig{}
	this.Handle = handle
	return &this
}

// NewSubjectConfigWithDefaults instantiates a new SubjectConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubjectConfigWithDefaults() *SubjectConfig {
	this := SubjectConfig{}
	return &this
}

// GetHandle returns the Handle field value
func (o *SubjectConfig) GetHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handle
}

// GetHandleOk returns a tuple with the Handle field value
// and a boolean to check if the value has been set.
func (o *SubjectConfig) GetHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Handle, true
}

// SetHandle sets field value
func (o *SubjectConfig) SetHandle(v string) {
	o.Handle = v
}

// GetScopeQuery returns the ScopeQuery field value if set, zero value otherwise.
func (o *SubjectConfig) GetScopeQuery() string {
	if o == nil || o.ScopeQuery == nil {
		var ret string
		return ret
	}
	return *o.ScopeQuery
}

// GetScopeQueryOk returns a tuple with the ScopeQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectConfig) GetScopeQueryOk() (*string, bool) {
	if o == nil || o.ScopeQuery == nil {
		return nil, false
	}
	return o.ScopeQuery, true
}

// HasScopeQuery returns a boolean if a field has been set.
func (o *SubjectConfig) HasScopeQuery() bool {
	if o != nil && o.ScopeQuery != nil {
		return true
	}

	return false
}

// SetScopeQuery gets a reference to the given string and assigns it to the ScopeQuery field.
func (o *SubjectConfig) SetScopeQuery(v string) {
	o.ScopeQuery = &v
}

func (o SubjectConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["handle"] = o.Handle
	}
	if o.ScopeQuery != nil {
		toSerialize["scopeQuery"] = o.ScopeQuery
	}
	return json.Marshal(toSerialize)
}

type NullableSubjectConfig struct {
	value *SubjectConfig
	isSet bool
}

func (v NullableSubjectConfig) Get() *SubjectConfig {
	return v.value
}

func (v *NullableSubjectConfig) Set(val *SubjectConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectConfig(val *SubjectConfig) *NullableSubjectConfig {
	return &NullableSubjectConfig{value: val, isSet: true}
}

func (v NullableSubjectConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


