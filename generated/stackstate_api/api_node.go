/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type NodeApi interface {

	/*
	NodeListTypes Node API

	list all node types

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiNodeListTypesRequest
	*/
	NodeListTypes(ctx context.Context) ApiNodeListTypesRequest

	// NodeListTypesExecute executes the request
	//  @return NodeTypes
	NodeListTypesExecute(r ApiNodeListTypesRequest) (*NodeTypes, *http.Response, error)

	/*
	TypeList Node type API

	list all nodes of that type

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param nodeType
	@return ApiTypeListRequest
	*/
	TypeList(ctx context.Context, nodeType string) ApiTypeListRequest

	// TypeListExecute executes the request
	//  @return []Node
	TypeListExecute(r ApiTypeListRequest) ([]Node, *http.Response, error)
}

// NodeApiService NodeApi service
type NodeApiService service

type ApiNodeListTypesRequest struct {
	ctx context.Context
	ApiService NodeApi
}

func (r ApiNodeListTypesRequest) Execute() (*NodeTypes, *http.Response, error) {
	return r.ApiService.NodeListTypesExecute(r)
}

/*
NodeListTypes Node API

list all node types

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiNodeListTypesRequest
*/
func (a *NodeApiService) NodeListTypes(ctx context.Context) ApiNodeListTypesRequest {
	return ApiNodeListTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NodeTypes
func (a *NodeApiService) NodeListTypesExecute(r ApiNodeListTypesRequest) (*NodeTypes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeTypes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodeApiService.NodeListTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/node"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTypeListRequest struct {
	ctx context.Context
	ApiService NodeApi
	nodeType string
	namespace *string
	ownedBy *string
}

func (r ApiTypeListRequest) Namespace(namespace string) ApiTypeListRequest {
	r.namespace = &namespace
	return r
}

func (r ApiTypeListRequest) OwnedBy(ownedBy string) ApiTypeListRequest {
	r.ownedBy = &ownedBy
	return r
}

func (r ApiTypeListRequest) Execute() ([]Node, *http.Response, error) {
	return r.ApiService.TypeListExecute(r)
}

/*
TypeList Node type API

list all nodes of that type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeType
 @return ApiTypeListRequest
*/
func (a *NodeApiService) TypeList(ctx context.Context, nodeType string) ApiTypeListRequest {
	return ApiTypeListRequest{
		ApiService: a,
		ctx: ctx,
		nodeType: nodeType,
	}
}

// Execute executes the request
//  @return []Node
func (a *NodeApiService) TypeListExecute(r ApiTypeListRequest) ([]Node, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Node
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodeApiService.TypeList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/node/{nodeType}"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeType"+"}", url.PathEscape(parameterToString(r.nodeType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.ownedBy != nil {
		localVarQueryParams.Add("ownedBy", parameterToString(*r.ownedBy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------


type NodeApiMock struct {
	NodeListTypesCalls *[]NodeListTypesCall
	NodeListTypesResponse NodeListTypesMockResponse
	TypeListCalls *[]TypeListCall
	TypeListResponse TypeListMockResponse
}	

func NewNodeApiMock() NodeApiMock {
	xNodeListTypesCalls := make([]NodeListTypesCall, 0)
	xTypeListCalls := make([]TypeListCall, 0)
	return NodeApiMock {
		NodeListTypesCalls: &xNodeListTypesCalls,
		TypeListCalls: &xTypeListCalls,
	}
}

type NodeListTypesMockResponse struct {
	Result NodeTypes
	Response *http.Response
	Error error
}

type NodeListTypesCall struct {
}


func (mock NodeApiMock) NodeListTypes(ctx context.Context) ApiNodeListTypesRequest {
	return ApiNodeListTypesRequest{
		ApiService: mock,
		ctx: ctx,
	}
}

func (mock NodeApiMock) NodeListTypesExecute(r ApiNodeListTypesRequest) (*NodeTypes, *http.Response, error) {
	p := NodeListTypesCall {
	}
	*mock.NodeListTypesCalls = append(*mock.NodeListTypesCalls, p)
	return &mock.NodeListTypesResponse.Result, mock.NodeListTypesResponse.Response, mock.NodeListTypesResponse.Error
}

type TypeListMockResponse struct {
	Result []Node
	Response *http.Response
	Error error
}

type TypeListCall struct {
	PnodeType string
	Pnamespace *string
	PownedBy *string
}


func (mock NodeApiMock) TypeList(ctx context.Context, nodeType string) ApiTypeListRequest {
	return ApiTypeListRequest{
		ApiService: mock,
		ctx: ctx,
		nodeType: nodeType,
	}
}

func (mock NodeApiMock) TypeListExecute(r ApiTypeListRequest) ([]Node, *http.Response, error) {
	p := TypeListCall {
			PnodeType: r.nodeType,
			Pnamespace: r.namespace,
			PownedBy: r.ownedBy,
	}
	*mock.TypeListCalls = append(*mock.TypeListCalls, p)
	return mock.TypeListResponse.Result, mock.TypeListResponse.Response, mock.TypeListResponse.Error
}


