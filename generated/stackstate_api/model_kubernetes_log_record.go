/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"time"
)

// KubernetesLogRecord struct for KubernetesLogRecord
type KubernetesLogRecord struct {
	Timestamp     time.Time                `json:"timestamp"`
	Message       string                   `json:"message"`
	Highlights    []KubernetesLogHighlight `json:"highlights"`
	PodName       string                   `json:"podName"`
	PodUID        string                   `json:"podUID"`
	ContainerName string                   `json:"containerName"`
	Severity      LogSeverity              `json:"severity"`
	Level         LogLevel                 `json:"level"`
}

// NewKubernetesLogRecord instantiates a new KubernetesLogRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesLogRecord(timestamp time.Time, message string, highlights []KubernetesLogHighlight, podName string, podUID string, containerName string, severity LogSeverity, level LogLevel) *KubernetesLogRecord {
	this := KubernetesLogRecord{}
	this.Timestamp = timestamp
	this.Message = message
	this.Highlights = highlights
	this.PodName = podName
	this.PodUID = podUID
	this.ContainerName = containerName
	this.Severity = severity
	this.Level = level
	return &this
}

// NewKubernetesLogRecordWithDefaults instantiates a new KubernetesLogRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesLogRecordWithDefaults() *KubernetesLogRecord {
	this := KubernetesLogRecord{}
	var severity LogSeverity = LOGSEVERITY_OTHER
	this.Severity = severity
	var level LogLevel = LOGLEVEL_UNKNOWN
	this.Level = level
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *KubernetesLogRecord) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *KubernetesLogRecord) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *KubernetesLogRecord) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetMessage returns the Message field value
func (o *KubernetesLogRecord) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *KubernetesLogRecord) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *KubernetesLogRecord) SetMessage(v string) {
	o.Message = v
}

// GetHighlights returns the Highlights field value
func (o *KubernetesLogRecord) GetHighlights() []KubernetesLogHighlight {
	if o == nil {
		var ret []KubernetesLogHighlight
		return ret
	}

	return o.Highlights
}

// GetHighlightsOk returns a tuple with the Highlights field value
// and a boolean to check if the value has been set.
func (o *KubernetesLogRecord) GetHighlightsOk() ([]KubernetesLogHighlight, bool) {
	if o == nil {
		return nil, false
	}
	return o.Highlights, true
}

// SetHighlights sets field value
func (o *KubernetesLogRecord) SetHighlights(v []KubernetesLogHighlight) {
	o.Highlights = v
}

// GetPodName returns the PodName field value
func (o *KubernetesLogRecord) GetPodName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PodName
}

// GetPodNameOk returns a tuple with the PodName field value
// and a boolean to check if the value has been set.
func (o *KubernetesLogRecord) GetPodNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PodName, true
}

// SetPodName sets field value
func (o *KubernetesLogRecord) SetPodName(v string) {
	o.PodName = v
}

// GetPodUID returns the PodUID field value
func (o *KubernetesLogRecord) GetPodUID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PodUID
}

// GetPodUIDOk returns a tuple with the PodUID field value
// and a boolean to check if the value has been set.
func (o *KubernetesLogRecord) GetPodUIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PodUID, true
}

// SetPodUID sets field value
func (o *KubernetesLogRecord) SetPodUID(v string) {
	o.PodUID = v
}

// GetContainerName returns the ContainerName field value
func (o *KubernetesLogRecord) GetContainerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value
// and a boolean to check if the value has been set.
func (o *KubernetesLogRecord) GetContainerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerName, true
}

// SetContainerName sets field value
func (o *KubernetesLogRecord) SetContainerName(v string) {
	o.ContainerName = v
}

// GetSeverity returns the Severity field value
func (o *KubernetesLogRecord) GetSeverity() LogSeverity {
	if o == nil {
		var ret LogSeverity
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *KubernetesLogRecord) GetSeverityOk() (*LogSeverity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *KubernetesLogRecord) SetSeverity(v LogSeverity) {
	o.Severity = v
}

// GetLevel returns the Level field value
func (o *KubernetesLogRecord) GetLevel() LogLevel {
	if o == nil {
		var ret LogLevel
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *KubernetesLogRecord) GetLevelOk() (*LogLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *KubernetesLogRecord) SetLevel(v LogLevel) {
	o.Level = v
}

func (o KubernetesLogRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["highlights"] = o.Highlights
	}
	if true {
		toSerialize["podName"] = o.PodName
	}
	if true {
		toSerialize["podUID"] = o.PodUID
	}
	if true {
		toSerialize["containerName"] = o.ContainerName
	}
	if true {
		toSerialize["severity"] = o.Severity
	}
	if true {
		toSerialize["level"] = o.Level
	}
	return json.Marshal(toSerialize)
}

type NullableKubernetesLogRecord struct {
	value *KubernetesLogRecord
	isSet bool
}

func (v NullableKubernetesLogRecord) Get() *KubernetesLogRecord {
	return v.value
}

func (v *NullableKubernetesLogRecord) Set(val *KubernetesLogRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesLogRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesLogRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesLogRecord(val *KubernetesLogRecord) *NullableKubernetesLogRecord {
	return &NullableKubernetesLogRecord{value: val, isSet: true}
}

func (v NullableKubernetesLogRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesLogRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
