/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

type AuthorizeIngestionApiKeyAPI interface {

	/*
		AuthorizeIngestionApiKey Check authorization for an Ingestion Api Key

		Checks if an ingestion api key is valid

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiAuthorizeIngestionApiKeyRequest
	*/
	AuthorizeIngestionApiKey(ctx context.Context) ApiAuthorizeIngestionApiKeyRequest

	// AuthorizeIngestionApiKeyExecute executes the request
	AuthorizeIngestionApiKeyExecute(r ApiAuthorizeIngestionApiKeyRequest) (*http.Response, error)
}

// AuthorizeIngestionApiKeyAPIService AuthorizeIngestionApiKeyAPI service
type AuthorizeIngestionApiKeyAPIService service

type ApiAuthorizeIngestionApiKeyRequest struct {
	ctx                             context.Context
	ApiService                      AuthorizeIngestionApiKeyAPI
	authorizeIngestionApiKeyRequest *AuthorizeIngestionApiKeyRequest
	withReceiverKey                 *bool
}

func (r ApiAuthorizeIngestionApiKeyRequest) AuthorizeIngestionApiKeyRequest(authorizeIngestionApiKeyRequest AuthorizeIngestionApiKeyRequest) ApiAuthorizeIngestionApiKeyRequest {
	r.authorizeIngestionApiKeyRequest = &authorizeIngestionApiKeyRequest
	return r
}

// By default, the endpoint uses only Ingestion API Keys, true value - to verify also Receiver API Key
func (r ApiAuthorizeIngestionApiKeyRequest) WithReceiverKey(withReceiverKey bool) ApiAuthorizeIngestionApiKeyRequest {
	r.withReceiverKey = &withReceiverKey
	return r
}

func (r ApiAuthorizeIngestionApiKeyRequest) Execute() (*http.Response, error) {
	return r.ApiService.AuthorizeIngestionApiKeyExecute(r)
}

/*
AuthorizeIngestionApiKey Check authorization for an Ingestion Api Key

Checks if an ingestion api key is valid

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAuthorizeIngestionApiKeyRequest
*/
func (a *AuthorizeIngestionApiKeyAPIService) AuthorizeIngestionApiKey(ctx context.Context) ApiAuthorizeIngestionApiKeyRequest {
	return ApiAuthorizeIngestionApiKeyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AuthorizeIngestionApiKeyAPIService) AuthorizeIngestionApiKeyExecute(r ApiAuthorizeIngestionApiKeyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthorizeIngestionApiKeyAPIService.AuthorizeIngestionApiKey")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/security/ingestion/authorize"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorizeIngestionApiKeyRequest == nil {
		return nil, reportError("authorizeIngestionApiKeyRequest is required and must be specified")
	}

	if r.withReceiverKey != nil {
		localVarQueryParams.Add("withReceiverKey", parameterToString(*r.withReceiverKey, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authorizeIngestionApiKeyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------

type AuthorizeIngestionApiKeyAPIMock struct {
	AuthorizeIngestionApiKeyCalls    *[]AuthorizeIngestionApiKeyCall
	AuthorizeIngestionApiKeyResponse AuthorizeIngestionApiKeyMockResponse
}

func NewAuthorizeIngestionApiKeyAPIMock() AuthorizeIngestionApiKeyAPIMock {
	xAuthorizeIngestionApiKeyCalls := make([]AuthorizeIngestionApiKeyCall, 0)
	return AuthorizeIngestionApiKeyAPIMock{
		AuthorizeIngestionApiKeyCalls: &xAuthorizeIngestionApiKeyCalls,
	}
}

type AuthorizeIngestionApiKeyMockResponse struct {
	Response *http.Response
	Error    error
}

type AuthorizeIngestionApiKeyCall struct {
	PauthorizeIngestionApiKeyRequest *AuthorizeIngestionApiKeyRequest
	PwithReceiverKey                 *bool
}

func (mock AuthorizeIngestionApiKeyAPIMock) AuthorizeIngestionApiKey(ctx context.Context) ApiAuthorizeIngestionApiKeyRequest {
	return ApiAuthorizeIngestionApiKeyRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock AuthorizeIngestionApiKeyAPIMock) AuthorizeIngestionApiKeyExecute(r ApiAuthorizeIngestionApiKeyRequest) (*http.Response, error) {
	p := AuthorizeIngestionApiKeyCall{
		PauthorizeIngestionApiKeyRequest: r.authorizeIngestionApiKeyRequest,
		PwithReceiverKey:                 r.withReceiverKey,
	}
	*mock.AuthorizeIngestionApiKeyCalls = append(*mock.AuthorizeIngestionApiKeyCalls, p)
	return mock.AuthorizeIngestionApiKeyResponse.Response, mock.AuthorizeIngestionApiKeyResponse.Error
}
