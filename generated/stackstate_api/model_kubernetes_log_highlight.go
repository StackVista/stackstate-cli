/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// KubernetesLogHighlight struct for KubernetesLogHighlight
type KubernetesLogHighlight struct {
	// Index of character in the message to start the highlight (0-based)
	StartIndex int32 `json:"startIndex"`
	// Index of character in the message to end the highlight (0-based)
	EndIndex int32 `json:"endIndex"`
}

// NewKubernetesLogHighlight instantiates a new KubernetesLogHighlight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesLogHighlight(startIndex int32, endIndex int32) *KubernetesLogHighlight {
	this := KubernetesLogHighlight{}
	this.StartIndex = startIndex
	this.EndIndex = endIndex
	return &this
}

// NewKubernetesLogHighlightWithDefaults instantiates a new KubernetesLogHighlight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesLogHighlightWithDefaults() *KubernetesLogHighlight {
	this := KubernetesLogHighlight{}
	return &this
}

// GetStartIndex returns the StartIndex field value
func (o *KubernetesLogHighlight) GetStartIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartIndex
}

// GetStartIndexOk returns a tuple with the StartIndex field value
// and a boolean to check if the value has been set.
func (o *KubernetesLogHighlight) GetStartIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartIndex, true
}

// SetStartIndex sets field value
func (o *KubernetesLogHighlight) SetStartIndex(v int32) {
	o.StartIndex = v
}

// GetEndIndex returns the EndIndex field value
func (o *KubernetesLogHighlight) GetEndIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EndIndex
}

// GetEndIndexOk returns a tuple with the EndIndex field value
// and a boolean to check if the value has been set.
func (o *KubernetesLogHighlight) GetEndIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndIndex, true
}

// SetEndIndex sets field value
func (o *KubernetesLogHighlight) SetEndIndex(v int32) {
	o.EndIndex = v
}

func (o KubernetesLogHighlight) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["startIndex"] = o.StartIndex
	}
	if true {
		toSerialize["endIndex"] = o.EndIndex
	}
	return json.Marshal(toSerialize)
}

type NullableKubernetesLogHighlight struct {
	value *KubernetesLogHighlight
	isSet bool
}

func (v NullableKubernetesLogHighlight) Get() *KubernetesLogHighlight {
	return v.value
}

func (v *NullableKubernetesLogHighlight) Set(val *KubernetesLogHighlight) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesLogHighlight) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesLogHighlight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesLogHighlight(val *KubernetesLogHighlight) *NullableKubernetesLogHighlight {
	return &NullableKubernetesLogHighlight{value: val, isSet: true}
}

func (v NullableKubernetesLogHighlight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesLogHighlight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
