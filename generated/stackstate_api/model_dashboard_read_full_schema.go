/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// DashboardReadFullSchema struct for DashboardReadFullSchema
type DashboardReadFullSchema struct {
	Type string `json:"_type"`
	// The identifier of a dashboard. Either the system/graph ID or URN of the resource.
	Identifier string `json:"identifier"`
	Id         int64  `json:"id"`
	// Name of the dashboard
	Name string `json:"name"`
	// Description of the dashboard
	Description string         `json:"description"`
	Scope       DashboardScope `json:"scope"`
	// The user id of the dashboard owner. A dashboard was either created by a user or from a StackPack. For a user, the identifier will be the system/graph ID, and for a StackPack, the field will be empty/omitted.
	OwnerId             *int64          `json:"ownerId,omitempty"`
	LastUpdateTimestamp int64           `json:"lastUpdateTimestamp"`
	Dashboard           PersesDashboard `json:"dashboard"`
}

// NewDashboardReadFullSchema instantiates a new DashboardReadFullSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardReadFullSchema(type_ string, identifier string, id int64, name string, description string, scope DashboardScope, lastUpdateTimestamp int64, dashboard PersesDashboard) *DashboardReadFullSchema {
	this := DashboardReadFullSchema{}
	this.Type = type_
	this.Identifier = identifier
	this.Id = id
	this.Name = name
	this.Description = description
	this.Scope = scope
	this.LastUpdateTimestamp = lastUpdateTimestamp
	this.Dashboard = dashboard
	return &this
}

// NewDashboardReadFullSchemaWithDefaults instantiates a new DashboardReadFullSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardReadFullSchemaWithDefaults() *DashboardReadFullSchema {
	this := DashboardReadFullSchema{}
	return &this
}

// GetType returns the Type field value
func (o *DashboardReadFullSchema) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DashboardReadFullSchema) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DashboardReadFullSchema) SetType(v string) {
	o.Type = v
}

// GetIdentifier returns the Identifier field value
func (o *DashboardReadFullSchema) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *DashboardReadFullSchema) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *DashboardReadFullSchema) SetIdentifier(v string) {
	o.Identifier = v
}

// GetId returns the Id field value
func (o *DashboardReadFullSchema) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DashboardReadFullSchema) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DashboardReadFullSchema) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DashboardReadFullSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DashboardReadFullSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DashboardReadFullSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *DashboardReadFullSchema) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DashboardReadFullSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DashboardReadFullSchema) SetDescription(v string) {
	o.Description = v
}

// GetScope returns the Scope field value
func (o *DashboardReadFullSchema) GetScope() DashboardScope {
	if o == nil {
		var ret DashboardScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *DashboardReadFullSchema) GetScopeOk() (*DashboardScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *DashboardReadFullSchema) SetScope(v DashboardScope) {
	o.Scope = v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *DashboardReadFullSchema) GetOwnerId() int64 {
	if o == nil || o.OwnerId == nil {
		var ret int64
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardReadFullSchema) GetOwnerIdOk() (*int64, bool) {
	if o == nil || o.OwnerId == nil {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *DashboardReadFullSchema) HasOwnerId() bool {
	if o != nil && o.OwnerId != nil {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given int64 and assigns it to the OwnerId field.
func (o *DashboardReadFullSchema) SetOwnerId(v int64) {
	o.OwnerId = &v
}

// GetLastUpdateTimestamp returns the LastUpdateTimestamp field value
func (o *DashboardReadFullSchema) GetLastUpdateTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastUpdateTimestamp
}

// GetLastUpdateTimestampOk returns a tuple with the LastUpdateTimestamp field value
// and a boolean to check if the value has been set.
func (o *DashboardReadFullSchema) GetLastUpdateTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdateTimestamp, true
}

// SetLastUpdateTimestamp sets field value
func (o *DashboardReadFullSchema) SetLastUpdateTimestamp(v int64) {
	o.LastUpdateTimestamp = v
}

// GetDashboard returns the Dashboard field value
func (o *DashboardReadFullSchema) GetDashboard() PersesDashboard {
	if o == nil {
		var ret PersesDashboard
		return ret
	}

	return o.Dashboard
}

// GetDashboardOk returns a tuple with the Dashboard field value
// and a boolean to check if the value has been set.
func (o *DashboardReadFullSchema) GetDashboardOk() (*PersesDashboard, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dashboard, true
}

// SetDashboard sets field value
func (o *DashboardReadFullSchema) SetDashboard(v PersesDashboard) {
	o.Dashboard = v
}

func (o DashboardReadFullSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["scope"] = o.Scope
	}
	if o.OwnerId != nil {
		toSerialize["ownerId"] = o.OwnerId
	}
	if true {
		toSerialize["lastUpdateTimestamp"] = o.LastUpdateTimestamp
	}
	if true {
		toSerialize["dashboard"] = o.Dashboard
	}
	return json.Marshal(toSerialize)
}

type NullableDashboardReadFullSchema struct {
	value *DashboardReadFullSchema
	isSet bool
}

func (v NullableDashboardReadFullSchema) Get() *DashboardReadFullSchema {
	return v.value
}

func (v *NullableDashboardReadFullSchema) Set(val *DashboardReadFullSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardReadFullSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardReadFullSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardReadFullSchema(val *DashboardReadFullSchema) *NullableDashboardReadFullSchema {
	return &NullableDashboardReadFullSchema{value: val, isSet: true}
}

func (v NullableDashboardReadFullSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardReadFullSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
