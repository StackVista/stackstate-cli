/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// SpanEvent Event is a time-stamped annotation of the span, consisting of user-supplied text description and key-value pairs.
type SpanEvent struct {
	Timestamp InstantNanoPrecision `json:"timestamp"`
	Name      string               `json:"name"`
	// Set of key/value pairs providing extra contextual information. Keys are unique.
	Attributes map[string]string `json:"attributes"`
}

// NewSpanEvent instantiates a new SpanEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanEvent(timestamp InstantNanoPrecision, name string, attributes map[string]string) *SpanEvent {
	this := SpanEvent{}
	this.Timestamp = timestamp
	this.Name = name
	this.Attributes = attributes
	return &this
}

// NewSpanEventWithDefaults instantiates a new SpanEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanEventWithDefaults() *SpanEvent {
	this := SpanEvent{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *SpanEvent) GetTimestamp() InstantNanoPrecision {
	if o == nil {
		var ret InstantNanoPrecision
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *SpanEvent) GetTimestampOk() (*InstantNanoPrecision, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *SpanEvent) SetTimestamp(v InstantNanoPrecision) {
	o.Timestamp = v
}

// GetName returns the Name field value
func (o *SpanEvent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SpanEvent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SpanEvent) SetName(v string) {
	o.Name = v
}

// GetAttributes returns the Attributes field value
func (o *SpanEvent) GetAttributes() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *SpanEvent) GetAttributesOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *SpanEvent) SetAttributes(v map[string]string) {
	o.Attributes = v
}

func (o SpanEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableSpanEvent struct {
	value *SpanEvent
	isSet bool
}

func (v NullableSpanEvent) Get() *SpanEvent {
	return v.value
}

func (v *NullableSpanEvent) Set(val *SpanEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanEvent(val *SpanEvent) *NullableSpanEvent {
	return &NullableSpanEvent{value: val, isSet: true}
}

func (v NullableSpanEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
