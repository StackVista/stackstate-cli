/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// FailingHealthStateValue the model 'FailingHealthStateValue'
type FailingHealthStateValue string

// List of FailingHealthStateValue
const (
	FAILINGHEALTHSTATEVALUE_DEVIATING FailingHealthStateValue = "DEVIATING"
	FAILINGHEALTHSTATEVALUE_CRITICAL  FailingHealthStateValue = "CRITICAL"
)

// All allowed values of FailingHealthStateValue enum
var AllowedFailingHealthStateValueEnumValues = []FailingHealthStateValue{
	"DEVIATING",
	"CRITICAL",
}

func (v *FailingHealthStateValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FailingHealthStateValue(value)
	for _, existing := range AllowedFailingHealthStateValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FailingHealthStateValue", value)
}

// NewFailingHealthStateValueFromValue returns a pointer to a valid FailingHealthStateValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFailingHealthStateValueFromValue(v string) (*FailingHealthStateValue, error) {
	ev := FailingHealthStateValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FailingHealthStateValue: valid values are %v", v, AllowedFailingHealthStateValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FailingHealthStateValue) IsValid() bool {
	for _, existing := range AllowedFailingHealthStateValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FailingHealthStateValue value
func (v FailingHealthStateValue) Ptr() *FailingHealthStateValue {
	return &v
}

type NullableFailingHealthStateValue struct {
	value *FailingHealthStateValue
	isSet bool
}

func (v NullableFailingHealthStateValue) Get() *FailingHealthStateValue {
	return v.value
}

func (v *NullableFailingHealthStateValue) Set(val *FailingHealthStateValue) {
	v.value = val
	v.isSet = true
}

func (v NullableFailingHealthStateValue) IsSet() bool {
	return v.isSet
}

func (v *NullableFailingHealthStateValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailingHealthStateValue(val *FailingHealthStateValue) *NullableFailingHealthStateValue {
	return &NullableFailingHealthStateValue{value: val, isSet: true}
}

func (v NullableFailingHealthStateValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailingHealthStateValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
