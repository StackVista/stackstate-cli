/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// EmailChannelWriteSchema struct for EmailChannelWriteSchema
type EmailChannelWriteSchema struct {
	To            []string `json:"to"`
	Cc            []string `json:"cc"`
	SubjectPrefix *string  `json:"subjectPrefix,omitempty"`
}

// NewEmailChannelWriteSchema instantiates a new EmailChannelWriteSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailChannelWriteSchema(to []string, cc []string) *EmailChannelWriteSchema {
	this := EmailChannelWriteSchema{}
	this.To = to
	this.Cc = cc
	return &this
}

// NewEmailChannelWriteSchemaWithDefaults instantiates a new EmailChannelWriteSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailChannelWriteSchemaWithDefaults() *EmailChannelWriteSchema {
	this := EmailChannelWriteSchema{}
	return &this
}

// GetTo returns the To field value
func (o *EmailChannelWriteSchema) GetTo() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *EmailChannelWriteSchema) GetToOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.To, true
}

// SetTo sets field value
func (o *EmailChannelWriteSchema) SetTo(v []string) {
	o.To = v
}

// GetCc returns the Cc field value
func (o *EmailChannelWriteSchema) GetCc() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Cc
}

// GetCcOk returns a tuple with the Cc field value
// and a boolean to check if the value has been set.
func (o *EmailChannelWriteSchema) GetCcOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cc, true
}

// SetCc sets field value
func (o *EmailChannelWriteSchema) SetCc(v []string) {
	o.Cc = v
}

// GetSubjectPrefix returns the SubjectPrefix field value if set, zero value otherwise.
func (o *EmailChannelWriteSchema) GetSubjectPrefix() string {
	if o == nil || o.SubjectPrefix == nil {
		var ret string
		return ret
	}
	return *o.SubjectPrefix
}

// GetSubjectPrefixOk returns a tuple with the SubjectPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailChannelWriteSchema) GetSubjectPrefixOk() (*string, bool) {
	if o == nil || o.SubjectPrefix == nil {
		return nil, false
	}
	return o.SubjectPrefix, true
}

// HasSubjectPrefix returns a boolean if a field has been set.
func (o *EmailChannelWriteSchema) HasSubjectPrefix() bool {
	if o != nil && o.SubjectPrefix != nil {
		return true
	}

	return false
}

// SetSubjectPrefix gets a reference to the given string and assigns it to the SubjectPrefix field.
func (o *EmailChannelWriteSchema) SetSubjectPrefix(v string) {
	o.SubjectPrefix = &v
}

func (o EmailChannelWriteSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["to"] = o.To
	}
	if true {
		toSerialize["cc"] = o.Cc
	}
	if o.SubjectPrefix != nil {
		toSerialize["subjectPrefix"] = o.SubjectPrefix
	}
	return json.Marshal(toSerialize)
}

type NullableEmailChannelWriteSchema struct {
	value *EmailChannelWriteSchema
	isSet bool
}

func (v NullableEmailChannelWriteSchema) Get() *EmailChannelWriteSchema {
	return v.value
}

func (v *NullableEmailChannelWriteSchema) Set(val *EmailChannelWriteSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailChannelWriteSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailChannelWriteSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailChannelWriteSchema(val *EmailChannelWriteSchema) *NullableEmailChannelWriteSchema {
	return &NullableEmailChannelWriteSchema{value: val, isSet: true}
}

func (v NullableEmailChannelWriteSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailChannelWriteSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
