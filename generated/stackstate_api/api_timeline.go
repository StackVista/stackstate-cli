/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

type TimelineApi interface {

	/*
		GetTimelineSummary Timeline summary

		Event summary and aggregated health changes for a topology over a range of time

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetTimelineSummaryRequest
	*/
	GetTimelineSummary(ctx context.Context) ApiGetTimelineSummaryRequest

	// GetTimelineSummaryExecute executes the request
	//  @return TimelineSummary
	GetTimelineSummaryExecute(r ApiGetTimelineSummaryRequest) (*TimelineSummary, *http.Response, error)
}

// TimelineApiService TimelineApi service
type TimelineApiService service

type ApiGetTimelineSummaryRequest struct {
	ctx                    context.Context
	ApiService             TimelineApi
	timelineSummaryRequest *TimelineSummaryRequest
}

// Request for event summary and aggregated health over time
func (r ApiGetTimelineSummaryRequest) TimelineSummaryRequest(timelineSummaryRequest TimelineSummaryRequest) ApiGetTimelineSummaryRequest {
	r.timelineSummaryRequest = &timelineSummaryRequest
	return r
}

func (r ApiGetTimelineSummaryRequest) Execute() (*TimelineSummary, *http.Response, error) {
	return r.ApiService.GetTimelineSummaryExecute(r)
}

/*
GetTimelineSummary Timeline summary

Event summary and aggregated health changes for a topology over a range of time

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimelineSummaryRequest
*/
func (a *TimelineApiService) GetTimelineSummary(ctx context.Context) ApiGetTimelineSummaryRequest {
	return ApiGetTimelineSummaryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return TimelineSummary
func (a *TimelineApiService) GetTimelineSummaryExecute(r ApiGetTimelineSummaryRequest) (*TimelineSummary, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TimelineSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimelineApiService.GetTimelineSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/timeline/summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timelineSummaryRequest == nil {
		return localVarReturnValue, nil, reportError("timelineSummaryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.timelineSummaryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v TimelineSummaryError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------

type TimelineApiMock struct {
	GetTimelineSummaryCalls    *[]GetTimelineSummaryCall
	GetTimelineSummaryResponse GetTimelineSummaryMockResponse
}

func NewTimelineApiMock() TimelineApiMock {
	xGetTimelineSummaryCalls := make([]GetTimelineSummaryCall, 0)
	return TimelineApiMock{
		GetTimelineSummaryCalls: &xGetTimelineSummaryCalls,
	}
}

type GetTimelineSummaryMockResponse struct {
	Result   TimelineSummary
	Response *http.Response
	Error    error
}

type GetTimelineSummaryCall struct {
	PtimelineSummaryRequest *TimelineSummaryRequest
}

func (mock TimelineApiMock) GetTimelineSummary(ctx context.Context) ApiGetTimelineSummaryRequest {
	return ApiGetTimelineSummaryRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock TimelineApiMock) GetTimelineSummaryExecute(r ApiGetTimelineSummaryRequest) (*TimelineSummary, *http.Response, error) {
	p := GetTimelineSummaryCall{
		PtimelineSummaryRequest: r.timelineSummaryRequest,
	}
	*mock.GetTimelineSummaryCalls = append(*mock.GetTimelineSummaryCalls, p)
	return &mock.GetTimelineSummaryResponse.Result, mock.GetTimelineSummaryResponse.Response, mock.GetTimelineSummaryResponse.Error
}
