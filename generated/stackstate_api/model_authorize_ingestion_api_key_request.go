/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// AuthorizeIngestionApiKeyRequest struct for AuthorizeIngestionApiKeyRequest
type AuthorizeIngestionApiKeyRequest struct {
	ApiKey string `json:"apiKey"`
}

// NewAuthorizeIngestionApiKeyRequest instantiates a new AuthorizeIngestionApiKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeIngestionApiKeyRequest(apiKey string) *AuthorizeIngestionApiKeyRequest {
	this := AuthorizeIngestionApiKeyRequest{}
	this.ApiKey = apiKey
	return &this
}

// NewAuthorizeIngestionApiKeyRequestWithDefaults instantiates a new AuthorizeIngestionApiKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeIngestionApiKeyRequestWithDefaults() *AuthorizeIngestionApiKeyRequest {
	this := AuthorizeIngestionApiKeyRequest{}
	return &this
}

// GetApiKey returns the ApiKey field value
func (o *AuthorizeIngestionApiKeyRequest) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *AuthorizeIngestionApiKeyRequest) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *AuthorizeIngestionApiKeyRequest) SetApiKey(v string) {
	o.ApiKey = v
}

func (o AuthorizeIngestionApiKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["apiKey"] = o.ApiKey
	}
	return json.Marshal(toSerialize)
}

type NullableAuthorizeIngestionApiKeyRequest struct {
	value *AuthorizeIngestionApiKeyRequest
	isSet bool
}

func (v NullableAuthorizeIngestionApiKeyRequest) Get() *AuthorizeIngestionApiKeyRequest {
	return v.value
}

func (v *NullableAuthorizeIngestionApiKeyRequest) Set(val *AuthorizeIngestionApiKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeIngestionApiKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeIngestionApiKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeIngestionApiKeyRequest(val *AuthorizeIngestionApiKeyRequest) *NullableAuthorizeIngestionApiKeyRequest {
	return &NullableAuthorizeIngestionApiKeyRequest{value: val, isSet: true}
}

func (v NullableAuthorizeIngestionApiKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeIngestionApiKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
