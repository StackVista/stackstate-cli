/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// DurationHistogramBucket struct for DurationHistogramBucket
type DurationHistogramBucket struct {
	// Number of successful traces with a duration between (lowerNanos, upperNanos].
	OkCount int32 `json:"okCount"`
	// Number of erroneous traces with a duration between (lowerNanos, upperNanos].
	ErrorCount int32 `json:"errorCount"`
	// Number of traces with unset status and a duration between (lowerNanos, upperNanos].
	UnsetCount int32 `json:"unsetCount"`
	// Lower limit on trace duration
	LowerNanos *int64 `json:"lowerNanos,omitempty"`
	// Upper limit on trace duration
	UpperNanos *int64 `json:"upperNanos,omitempty"`
}

// NewDurationHistogramBucket instantiates a new DurationHistogramBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDurationHistogramBucket(okCount int32, errorCount int32, unsetCount int32) *DurationHistogramBucket {
	this := DurationHistogramBucket{}
	this.OkCount = okCount
	this.ErrorCount = errorCount
	this.UnsetCount = unsetCount
	return &this
}

// NewDurationHistogramBucketWithDefaults instantiates a new DurationHistogramBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDurationHistogramBucketWithDefaults() *DurationHistogramBucket {
	this := DurationHistogramBucket{}
	return &this
}

// GetOkCount returns the OkCount field value
func (o *DurationHistogramBucket) GetOkCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OkCount
}

// GetOkCountOk returns a tuple with the OkCount field value
// and a boolean to check if the value has been set.
func (o *DurationHistogramBucket) GetOkCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OkCount, true
}

// SetOkCount sets field value
func (o *DurationHistogramBucket) SetOkCount(v int32) {
	o.OkCount = v
}

// GetErrorCount returns the ErrorCount field value
func (o *DurationHistogramBucket) GetErrorCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ErrorCount
}

// GetErrorCountOk returns a tuple with the ErrorCount field value
// and a boolean to check if the value has been set.
func (o *DurationHistogramBucket) GetErrorCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCount, true
}

// SetErrorCount sets field value
func (o *DurationHistogramBucket) SetErrorCount(v int32) {
	o.ErrorCount = v
}

// GetUnsetCount returns the UnsetCount field value
func (o *DurationHistogramBucket) GetUnsetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UnsetCount
}

// GetUnsetCountOk returns a tuple with the UnsetCount field value
// and a boolean to check if the value has been set.
func (o *DurationHistogramBucket) GetUnsetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnsetCount, true
}

// SetUnsetCount sets field value
func (o *DurationHistogramBucket) SetUnsetCount(v int32) {
	o.UnsetCount = v
}

// GetLowerNanos returns the LowerNanos field value if set, zero value otherwise.
func (o *DurationHistogramBucket) GetLowerNanos() int64 {
	if o == nil || o.LowerNanos == nil {
		var ret int64
		return ret
	}
	return *o.LowerNanos
}

// GetLowerNanosOk returns a tuple with the LowerNanos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DurationHistogramBucket) GetLowerNanosOk() (*int64, bool) {
	if o == nil || o.LowerNanos == nil {
		return nil, false
	}
	return o.LowerNanos, true
}

// HasLowerNanos returns a boolean if a field has been set.
func (o *DurationHistogramBucket) HasLowerNanos() bool {
	if o != nil && o.LowerNanos != nil {
		return true
	}

	return false
}

// SetLowerNanos gets a reference to the given int64 and assigns it to the LowerNanos field.
func (o *DurationHistogramBucket) SetLowerNanos(v int64) {
	o.LowerNanos = &v
}

// GetUpperNanos returns the UpperNanos field value if set, zero value otherwise.
func (o *DurationHistogramBucket) GetUpperNanos() int64 {
	if o == nil || o.UpperNanos == nil {
		var ret int64
		return ret
	}
	return *o.UpperNanos
}

// GetUpperNanosOk returns a tuple with the UpperNanos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DurationHistogramBucket) GetUpperNanosOk() (*int64, bool) {
	if o == nil || o.UpperNanos == nil {
		return nil, false
	}
	return o.UpperNanos, true
}

// HasUpperNanos returns a boolean if a field has been set.
func (o *DurationHistogramBucket) HasUpperNanos() bool {
	if o != nil && o.UpperNanos != nil {
		return true
	}

	return false
}

// SetUpperNanos gets a reference to the given int64 and assigns it to the UpperNanos field.
func (o *DurationHistogramBucket) SetUpperNanos(v int64) {
	o.UpperNanos = &v
}

func (o DurationHistogramBucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["okCount"] = o.OkCount
	}
	if true {
		toSerialize["errorCount"] = o.ErrorCount
	}
	if true {
		toSerialize["unsetCount"] = o.UnsetCount
	}
	if o.LowerNanos != nil {
		toSerialize["lowerNanos"] = o.LowerNanos
	}
	if o.UpperNanos != nil {
		toSerialize["upperNanos"] = o.UpperNanos
	}
	return json.Marshal(toSerialize)
}

type NullableDurationHistogramBucket struct {
	value *DurationHistogramBucket
	isSet bool
}

func (v NullableDurationHistogramBucket) Get() *DurationHistogramBucket {
	return v.value
}

func (v *NullableDurationHistogramBucket) Set(val *DurationHistogramBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableDurationHistogramBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableDurationHistogramBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDurationHistogramBucket(val *DurationHistogramBucket) *NullableDurationHistogramBucket {
	return &NullableDurationHistogramBucket{value: val, isSet: true}
}

func (v NullableDurationHistogramBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDurationHistogramBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
