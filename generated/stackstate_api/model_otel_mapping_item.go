/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// OtelMappingItem struct for OtelMappingItem
type OtelMappingItem struct {
	Name       string  `json:"name"`
	Identifier *string `json:"identifier,omitempty"`
}

// NewOtelMappingItem instantiates a new OtelMappingItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOtelMappingItem(name string) *OtelMappingItem {
	this := OtelMappingItem{}
	this.Name = name
	return &this
}

// NewOtelMappingItemWithDefaults instantiates a new OtelMappingItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOtelMappingItemWithDefaults() *OtelMappingItem {
	this := OtelMappingItem{}
	return &this
}

// GetName returns the Name field value
func (o *OtelMappingItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OtelMappingItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OtelMappingItem) SetName(v string) {
	o.Name = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *OtelMappingItem) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtelMappingItem) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *OtelMappingItem) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *OtelMappingItem) SetIdentifier(v string) {
	o.Identifier = &v
}

func (o OtelMappingItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	return json.Marshal(toSerialize)
}

type NullableOtelMappingItem struct {
	value *OtelMappingItem
	isSet bool
}

func (v NullableOtelMappingItem) Get() *OtelMappingItem {
	return v.value
}

func (v *NullableOtelMappingItem) Set(val *OtelMappingItem) {
	v.value = val
	v.isSet = true
}

func (v NullableOtelMappingItem) IsSet() bool {
	return v.isSet
}

func (v *NullableOtelMappingItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtelMappingItem(val *OtelMappingItem) *NullableOtelMappingItem {
	return &NullableOtelMappingItem{value: val, isSet: true}
}

func (v NullableOtelMappingItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtelMappingItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
