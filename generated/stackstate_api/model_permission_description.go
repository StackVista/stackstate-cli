/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// PermissionDescription struct for PermissionDescription
type PermissionDescription struct {
	SubjectHandle string `json:"subjectHandle"`
	Permissions map[string][]string `json:"permissions"`
}

// NewPermissionDescription instantiates a new PermissionDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionDescription(subjectHandle string, permissions map[string][]string) *PermissionDescription {
	this := PermissionDescription{}
	this.SubjectHandle = subjectHandle
	this.Permissions = permissions
	return &this
}

// NewPermissionDescriptionWithDefaults instantiates a new PermissionDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionDescriptionWithDefaults() *PermissionDescription {
	this := PermissionDescription{}
	return &this
}

// GetSubjectHandle returns the SubjectHandle field value
func (o *PermissionDescription) GetSubjectHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectHandle
}

// GetSubjectHandleOk returns a tuple with the SubjectHandle field value
// and a boolean to check if the value has been set.
func (o *PermissionDescription) GetSubjectHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectHandle, true
}

// SetSubjectHandle sets field value
func (o *PermissionDescription) SetSubjectHandle(v string) {
	o.SubjectHandle = v
}

// GetPermissions returns the Permissions field value
func (o *PermissionDescription) GetPermissions() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *PermissionDescription) GetPermissionsOk() (*map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// SetPermissions sets field value
func (o *PermissionDescription) SetPermissions(v map[string][]string) {
	o.Permissions = v
}

func (o PermissionDescription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["subjectHandle"] = o.SubjectHandle
	}
	if true {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullablePermissionDescription struct {
	value *PermissionDescription
	isSet bool
}

func (v NullablePermissionDescription) Get() *PermissionDescription {
	return v.value
}

func (v *NullablePermissionDescription) Set(val *PermissionDescription) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionDescription) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionDescription(val *PermissionDescription) *NullablePermissionDescription {
	return &NullablePermissionDescription{value: val, isSet: true}
}

func (v NullablePermissionDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


