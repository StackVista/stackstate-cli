/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// MonitorSnapshot struct for MonitorSnapshot
type MonitorSnapshot struct {
	FirstBatch   *bool                `json:"firstBatch,omitempty"`
	LastBatch    *bool                `json:"lastBatch,omitempty"`
	HealthStates []MonitorHealthState `json:"healthStates"`
}

// NewMonitorSnapshot instantiates a new MonitorSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorSnapshot(healthStates []MonitorHealthState) *MonitorSnapshot {
	this := MonitorSnapshot{}
	var firstBatch bool = true
	this.FirstBatch = &firstBatch
	var lastBatch bool = true
	this.LastBatch = &lastBatch
	this.HealthStates = healthStates
	return &this
}

// NewMonitorSnapshotWithDefaults instantiates a new MonitorSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorSnapshotWithDefaults() *MonitorSnapshot {
	this := MonitorSnapshot{}
	var firstBatch bool = true
	this.FirstBatch = &firstBatch
	var lastBatch bool = true
	this.LastBatch = &lastBatch
	return &this
}

// GetFirstBatch returns the FirstBatch field value if set, zero value otherwise.
func (o *MonitorSnapshot) GetFirstBatch() bool {
	if o == nil || o.FirstBatch == nil {
		var ret bool
		return ret
	}
	return *o.FirstBatch
}

// GetFirstBatchOk returns a tuple with the FirstBatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorSnapshot) GetFirstBatchOk() (*bool, bool) {
	if o == nil || o.FirstBatch == nil {
		return nil, false
	}
	return o.FirstBatch, true
}

// HasFirstBatch returns a boolean if a field has been set.
func (o *MonitorSnapshot) HasFirstBatch() bool {
	if o != nil && o.FirstBatch != nil {
		return true
	}

	return false
}

// SetFirstBatch gets a reference to the given bool and assigns it to the FirstBatch field.
func (o *MonitorSnapshot) SetFirstBatch(v bool) {
	o.FirstBatch = &v
}

// GetLastBatch returns the LastBatch field value if set, zero value otherwise.
func (o *MonitorSnapshot) GetLastBatch() bool {
	if o == nil || o.LastBatch == nil {
		var ret bool
		return ret
	}
	return *o.LastBatch
}

// GetLastBatchOk returns a tuple with the LastBatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorSnapshot) GetLastBatchOk() (*bool, bool) {
	if o == nil || o.LastBatch == nil {
		return nil, false
	}
	return o.LastBatch, true
}

// HasLastBatch returns a boolean if a field has been set.
func (o *MonitorSnapshot) HasLastBatch() bool {
	if o != nil && o.LastBatch != nil {
		return true
	}

	return false
}

// SetLastBatch gets a reference to the given bool and assigns it to the LastBatch field.
func (o *MonitorSnapshot) SetLastBatch(v bool) {
	o.LastBatch = &v
}

// GetHealthStates returns the HealthStates field value
func (o *MonitorSnapshot) GetHealthStates() []MonitorHealthState {
	if o == nil {
		var ret []MonitorHealthState
		return ret
	}

	return o.HealthStates
}

// GetHealthStatesOk returns a tuple with the HealthStates field value
// and a boolean to check if the value has been set.
func (o *MonitorSnapshot) GetHealthStatesOk() ([]MonitorHealthState, bool) {
	if o == nil {
		return nil, false
	}
	return o.HealthStates, true
}

// SetHealthStates sets field value
func (o *MonitorSnapshot) SetHealthStates(v []MonitorHealthState) {
	o.HealthStates = v
}

func (o MonitorSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FirstBatch != nil {
		toSerialize["firstBatch"] = o.FirstBatch
	}
	if o.LastBatch != nil {
		toSerialize["lastBatch"] = o.LastBatch
	}
	if true {
		toSerialize["healthStates"] = o.HealthStates
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorSnapshot struct {
	value *MonitorSnapshot
	isSet bool
}

func (v NullableMonitorSnapshot) Get() *MonitorSnapshot {
	return v.value
}

func (v *NullableMonitorSnapshot) Set(val *MonitorSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorSnapshot(val *MonitorSnapshot) *NullableMonitorSnapshot {
	return &NullableMonitorSnapshot{value: val, isSet: true}
}

func (v NullableMonitorSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
