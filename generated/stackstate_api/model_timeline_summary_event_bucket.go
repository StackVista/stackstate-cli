/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// TimelineSummaryEventBucket struct for TimelineSummaryEventBucket
type TimelineSummaryEventBucket struct {
	Type                 string `json:"_type"`
	Count                int64  `json:"count"`
	StartTimeEpochMillis int64  `json:"startTimeEpochMillis"`
	EndTimeEpochMillis   *int64 `json:"endTimeEpochMillis,omitempty"`
}

// NewTimelineSummaryEventBucket instantiates a new TimelineSummaryEventBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelineSummaryEventBucket(type_ string, count int64, startTimeEpochMillis int64) *TimelineSummaryEventBucket {
	this := TimelineSummaryEventBucket{}
	this.Type = type_
	this.Count = count
	this.StartTimeEpochMillis = startTimeEpochMillis
	return &this
}

// NewTimelineSummaryEventBucketWithDefaults instantiates a new TimelineSummaryEventBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineSummaryEventBucketWithDefaults() *TimelineSummaryEventBucket {
	this := TimelineSummaryEventBucket{}
	return &this
}

// GetType returns the Type field value
func (o *TimelineSummaryEventBucket) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TimelineSummaryEventBucket) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TimelineSummaryEventBucket) SetType(v string) {
	o.Type = v
}

// GetCount returns the Count field value
func (o *TimelineSummaryEventBucket) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TimelineSummaryEventBucket) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *TimelineSummaryEventBucket) SetCount(v int64) {
	o.Count = v
}

// GetStartTimeEpochMillis returns the StartTimeEpochMillis field value
func (o *TimelineSummaryEventBucket) GetStartTimeEpochMillis() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartTimeEpochMillis
}

// GetStartTimeEpochMillisOk returns a tuple with the StartTimeEpochMillis field value
// and a boolean to check if the value has been set.
func (o *TimelineSummaryEventBucket) GetStartTimeEpochMillisOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTimeEpochMillis, true
}

// SetStartTimeEpochMillis sets field value
func (o *TimelineSummaryEventBucket) SetStartTimeEpochMillis(v int64) {
	o.StartTimeEpochMillis = v
}

// GetEndTimeEpochMillis returns the EndTimeEpochMillis field value if set, zero value otherwise.
func (o *TimelineSummaryEventBucket) GetEndTimeEpochMillis() int64 {
	if o == nil || o.EndTimeEpochMillis == nil {
		var ret int64
		return ret
	}
	return *o.EndTimeEpochMillis
}

// GetEndTimeEpochMillisOk returns a tuple with the EndTimeEpochMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineSummaryEventBucket) GetEndTimeEpochMillisOk() (*int64, bool) {
	if o == nil || o.EndTimeEpochMillis == nil {
		return nil, false
	}
	return o.EndTimeEpochMillis, true
}

// HasEndTimeEpochMillis returns a boolean if a field has been set.
func (o *TimelineSummaryEventBucket) HasEndTimeEpochMillis() bool {
	if o != nil && o.EndTimeEpochMillis != nil {
		return true
	}

	return false
}

// SetEndTimeEpochMillis gets a reference to the given int64 and assigns it to the EndTimeEpochMillis field.
func (o *TimelineSummaryEventBucket) SetEndTimeEpochMillis(v int64) {
	o.EndTimeEpochMillis = &v
}

func (o TimelineSummaryEventBucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["startTimeEpochMillis"] = o.StartTimeEpochMillis
	}
	if o.EndTimeEpochMillis != nil {
		toSerialize["endTimeEpochMillis"] = o.EndTimeEpochMillis
	}
	return json.Marshal(toSerialize)
}

type NullableTimelineSummaryEventBucket struct {
	value *TimelineSummaryEventBucket
	isSet bool
}

func (v NullableTimelineSummaryEventBucket) Get() *TimelineSummaryEventBucket {
	return v.value
}

func (v *NullableTimelineSummaryEventBucket) Set(val *TimelineSummaryEventBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineSummaryEventBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineSummaryEventBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineSummaryEventBucket(val *TimelineSummaryEventBucket) *NullableTimelineSummaryEventBucket {
	return &NullableTimelineSummaryEventBucket{value: val, isSet: true}
}

func (v NullableTimelineSummaryEventBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineSummaryEventBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
