/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

type SystemNotificationsApi interface {

	/*
		AllSystemNotifications Overview of system notifications

		All active system notifications

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiAllSystemNotificationsRequest
	*/
	AllSystemNotifications(ctx context.Context) ApiAllSystemNotificationsRequest

	// AllSystemNotificationsExecute executes the request
	//  @return SystemNotifications
	AllSystemNotificationsExecute(r ApiAllSystemNotificationsRequest) (*SystemNotifications, *http.Response, error)
}

// SystemNotificationsApiService SystemNotificationsApi service
type SystemNotificationsApiService service

type ApiAllSystemNotificationsRequest struct {
	ctx        context.Context
	ApiService SystemNotificationsApi
}

func (r ApiAllSystemNotificationsRequest) Execute() (*SystemNotifications, *http.Response, error) {
	return r.ApiService.AllSystemNotificationsExecute(r)
}

/*
AllSystemNotifications Overview of system notifications

All active system notifications

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAllSystemNotificationsRequest
*/
func (a *SystemNotificationsApiService) AllSystemNotifications(ctx context.Context) ApiAllSystemNotificationsRequest {
	return ApiAllSystemNotificationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return SystemNotifications
func (a *SystemNotificationsApiService) AllSystemNotificationsExecute(r ApiAllSystemNotificationsRequest) (*SystemNotifications, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SystemNotifications
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemNotificationsApiService.AllSystemNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/notifications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------

type SystemNotificationsApiMock struct {
	AllSystemNotificationsCalls    *[]AllSystemNotificationsCall
	AllSystemNotificationsResponse AllSystemNotificationsMockResponse
}

func NewSystemNotificationsApiMock() SystemNotificationsApiMock {
	xAllSystemNotificationsCalls := make([]AllSystemNotificationsCall, 0)
	return SystemNotificationsApiMock{
		AllSystemNotificationsCalls: &xAllSystemNotificationsCalls,
	}
}

type AllSystemNotificationsMockResponse struct {
	Result   SystemNotifications
	Response *http.Response
	Error    error
}

type AllSystemNotificationsCall struct {
}

func (mock SystemNotificationsApiMock) AllSystemNotifications(ctx context.Context) ApiAllSystemNotificationsRequest {
	return ApiAllSystemNotificationsRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock SystemNotificationsApiMock) AllSystemNotificationsExecute(r ApiAllSystemNotificationsRequest) (*SystemNotifications, *http.Response, error) {
	p := AllSystemNotificationsCall{}
	*mock.AllSystemNotificationsCalls = append(*mock.AllSystemNotificationsCalls, p)
	return &mock.AllSystemNotificationsResponse.Result, mock.AllSystemNotificationsResponse.Response, mock.AllSystemNotificationsResponse.Error
}
