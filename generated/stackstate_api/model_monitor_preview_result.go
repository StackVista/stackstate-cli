/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// MonitorPreviewResult struct for MonitorPreviewResult
type MonitorPreviewResult struct {
	// Representing the total count of the monitor results.
	HealthStatesCount int32 `json:"healthStatesCount"`
	// Representing the count of the monitor results that are UNKNOWN in the result.
	UnknownCount int32 `json:"unknownCount"`
	// Representing the count of the monitor results that are CLEAR in the result.
	ClearCount int32 `json:"clearCount"`
	// Representing the count of the monitor results that are DEVIATING in the result.
	DeviatingCount int32 `json:"deviatingCount"`
	// Representing the count of the monitor results that are CRITICAL in the result.
	CriticalCount   int32                         `json:"criticalCount"`
	ComponentCounts *MonitorPreviewComponentCount `json:"componentCounts,omitempty"`
	Errors          []string                      `json:"errors"`
}

// NewMonitorPreviewResult instantiates a new MonitorPreviewResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorPreviewResult(healthStatesCount int32, unknownCount int32, clearCount int32, deviatingCount int32, criticalCount int32, errors []string) *MonitorPreviewResult {
	this := MonitorPreviewResult{}
	this.HealthStatesCount = healthStatesCount
	this.UnknownCount = unknownCount
	this.ClearCount = clearCount
	this.DeviatingCount = deviatingCount
	this.CriticalCount = criticalCount
	this.Errors = errors
	return &this
}

// NewMonitorPreviewResultWithDefaults instantiates a new MonitorPreviewResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorPreviewResultWithDefaults() *MonitorPreviewResult {
	this := MonitorPreviewResult{}
	return &this
}

// GetHealthStatesCount returns the HealthStatesCount field value
func (o *MonitorPreviewResult) GetHealthStatesCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HealthStatesCount
}

// GetHealthStatesCountOk returns a tuple with the HealthStatesCount field value
// and a boolean to check if the value has been set.
func (o *MonitorPreviewResult) GetHealthStatesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HealthStatesCount, true
}

// SetHealthStatesCount sets field value
func (o *MonitorPreviewResult) SetHealthStatesCount(v int32) {
	o.HealthStatesCount = v
}

// GetUnknownCount returns the UnknownCount field value
func (o *MonitorPreviewResult) GetUnknownCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UnknownCount
}

// GetUnknownCountOk returns a tuple with the UnknownCount field value
// and a boolean to check if the value has been set.
func (o *MonitorPreviewResult) GetUnknownCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnknownCount, true
}

// SetUnknownCount sets field value
func (o *MonitorPreviewResult) SetUnknownCount(v int32) {
	o.UnknownCount = v
}

// GetClearCount returns the ClearCount field value
func (o *MonitorPreviewResult) GetClearCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ClearCount
}

// GetClearCountOk returns a tuple with the ClearCount field value
// and a boolean to check if the value has been set.
func (o *MonitorPreviewResult) GetClearCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClearCount, true
}

// SetClearCount sets field value
func (o *MonitorPreviewResult) SetClearCount(v int32) {
	o.ClearCount = v
}

// GetDeviatingCount returns the DeviatingCount field value
func (o *MonitorPreviewResult) GetDeviatingCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DeviatingCount
}

// GetDeviatingCountOk returns a tuple with the DeviatingCount field value
// and a boolean to check if the value has been set.
func (o *MonitorPreviewResult) GetDeviatingCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviatingCount, true
}

// SetDeviatingCount sets field value
func (o *MonitorPreviewResult) SetDeviatingCount(v int32) {
	o.DeviatingCount = v
}

// GetCriticalCount returns the CriticalCount field value
func (o *MonitorPreviewResult) GetCriticalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CriticalCount
}

// GetCriticalCountOk returns a tuple with the CriticalCount field value
// and a boolean to check if the value has been set.
func (o *MonitorPreviewResult) GetCriticalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CriticalCount, true
}

// SetCriticalCount sets field value
func (o *MonitorPreviewResult) SetCriticalCount(v int32) {
	o.CriticalCount = v
}

// GetComponentCounts returns the ComponentCounts field value if set, zero value otherwise.
func (o *MonitorPreviewResult) GetComponentCounts() MonitorPreviewComponentCount {
	if o == nil || o.ComponentCounts == nil {
		var ret MonitorPreviewComponentCount
		return ret
	}
	return *o.ComponentCounts
}

// GetComponentCountsOk returns a tuple with the ComponentCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorPreviewResult) GetComponentCountsOk() (*MonitorPreviewComponentCount, bool) {
	if o == nil || o.ComponentCounts == nil {
		return nil, false
	}
	return o.ComponentCounts, true
}

// HasComponentCounts returns a boolean if a field has been set.
func (o *MonitorPreviewResult) HasComponentCounts() bool {
	if o != nil && o.ComponentCounts != nil {
		return true
	}

	return false
}

// SetComponentCounts gets a reference to the given MonitorPreviewComponentCount and assigns it to the ComponentCounts field.
func (o *MonitorPreviewResult) SetComponentCounts(v MonitorPreviewComponentCount) {
	o.ComponentCounts = &v
}

// GetErrors returns the Errors field value
func (o *MonitorPreviewResult) GetErrors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *MonitorPreviewResult) GetErrorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *MonitorPreviewResult) SetErrors(v []string) {
	o.Errors = v
}

func (o MonitorPreviewResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["healthStatesCount"] = o.HealthStatesCount
	}
	if true {
		toSerialize["unknownCount"] = o.UnknownCount
	}
	if true {
		toSerialize["clearCount"] = o.ClearCount
	}
	if true {
		toSerialize["deviatingCount"] = o.DeviatingCount
	}
	if true {
		toSerialize["criticalCount"] = o.CriticalCount
	}
	if o.ComponentCounts != nil {
		toSerialize["componentCounts"] = o.ComponentCounts
	}
	if true {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorPreviewResult struct {
	value *MonitorPreviewResult
	isSet bool
}

func (v NullableMonitorPreviewResult) Get() *MonitorPreviewResult {
	return v.value
}

func (v *NullableMonitorPreviewResult) Set(val *MonitorPreviewResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorPreviewResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorPreviewResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorPreviewResult(val *MonitorPreviewResult) *NullableMonitorPreviewResult {
	return &NullableMonitorPreviewResult{value: val, isSet: true}
}

func (v NullableMonitorPreviewResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorPreviewResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
