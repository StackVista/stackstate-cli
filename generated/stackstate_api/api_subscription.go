/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

type SubscriptionAPI interface {

	/*
		GetSubscription Get subscription info

		Get the state of the StackState license

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetSubscriptionRequest
	*/
	GetSubscription(ctx context.Context) ApiGetSubscriptionRequest

	// GetSubscriptionExecute executes the request
	//  @return SubscriptionState
	GetSubscriptionExecute(r ApiGetSubscriptionRequest) (*SubscriptionState, *http.Response, error)

	/*
		PostSubscription Submit a new license to update the subscription

		Update the StackState license

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiPostSubscriptionRequest
	*/
	PostSubscription(ctx context.Context) ApiPostSubscriptionRequest

	// PostSubscriptionExecute executes the request
	//  @return SubscriptionState
	PostSubscriptionExecute(r ApiPostSubscriptionRequest) (*SubscriptionState, *http.Response, error)
}

// SubscriptionAPIService SubscriptionAPI service
type SubscriptionAPIService service

type ApiGetSubscriptionRequest struct {
	ctx        context.Context
	ApiService SubscriptionAPI
}

func (r ApiGetSubscriptionRequest) Execute() (*SubscriptionState, *http.Response, error) {
	return r.ApiService.GetSubscriptionExecute(r)
}

/*
GetSubscription Get subscription info

Get the state of the StackState license

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSubscriptionRequest
*/
func (a *SubscriptionAPIService) GetSubscription(ctx context.Context) ApiGetSubscriptionRequest {
	return ApiGetSubscriptionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SubscriptionState
func (a *SubscriptionAPIService) GetSubscriptionExecute(r ApiGetSubscriptionRequest) (*SubscriptionState, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionAPIService.GetSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSubscriptionRequest struct {
	ctx        context.Context
	ApiService SubscriptionAPI
	newLicense *NewLicense
}

// The new license
func (r ApiPostSubscriptionRequest) NewLicense(newLicense NewLicense) ApiPostSubscriptionRequest {
	r.newLicense = &newLicense
	return r
}

func (r ApiPostSubscriptionRequest) Execute() (*SubscriptionState, *http.Response, error) {
	return r.ApiService.PostSubscriptionExecute(r)
}

/*
PostSubscription Submit a new license to update the subscription

Update the StackState license

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSubscriptionRequest
*/
func (a *SubscriptionAPIService) PostSubscription(ctx context.Context) ApiPostSubscriptionRequest {
	return ApiPostSubscriptionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SubscriptionState
func (a *SubscriptionAPIService) PostSubscriptionExecute(r ApiPostSubscriptionRequest) (*SubscriptionState, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionAPIService.PostSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.newLicense == nil {
		return localVarReturnValue, nil, reportError("newLicense is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.newLicense
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------

type SubscriptionAPIMock struct {
	GetSubscriptionCalls     *[]GetSubscriptionCall
	GetSubscriptionResponse  GetSubscriptionMockResponse
	PostSubscriptionCalls    *[]PostSubscriptionCall
	PostSubscriptionResponse PostSubscriptionMockResponse
}

func NewSubscriptionAPIMock() SubscriptionAPIMock {
	xGetSubscriptionCalls := make([]GetSubscriptionCall, 0)
	xPostSubscriptionCalls := make([]PostSubscriptionCall, 0)
	return SubscriptionAPIMock{
		GetSubscriptionCalls:  &xGetSubscriptionCalls,
		PostSubscriptionCalls: &xPostSubscriptionCalls,
	}
}

type GetSubscriptionMockResponse struct {
	Result   SubscriptionState
	Response *http.Response
	Error    error
}

type GetSubscriptionCall struct {
}

func (mock SubscriptionAPIMock) GetSubscription(ctx context.Context) ApiGetSubscriptionRequest {
	return ApiGetSubscriptionRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock SubscriptionAPIMock) GetSubscriptionExecute(r ApiGetSubscriptionRequest) (*SubscriptionState, *http.Response, error) {
	p := GetSubscriptionCall{}
	*mock.GetSubscriptionCalls = append(*mock.GetSubscriptionCalls, p)
	return &mock.GetSubscriptionResponse.Result, mock.GetSubscriptionResponse.Response, mock.GetSubscriptionResponse.Error
}

type PostSubscriptionMockResponse struct {
	Result   SubscriptionState
	Response *http.Response
	Error    error
}

type PostSubscriptionCall struct {
	PnewLicense *NewLicense
}

func (mock SubscriptionAPIMock) PostSubscription(ctx context.Context) ApiPostSubscriptionRequest {
	return ApiPostSubscriptionRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock SubscriptionAPIMock) PostSubscriptionExecute(r ApiPostSubscriptionRequest) (*SubscriptionState, *http.Response, error) {
	p := PostSubscriptionCall{
		PnewLicense: r.newLicense,
	}
	*mock.PostSubscriptionCalls = append(*mock.PostSubscriptionCalls, p)
	return &mock.PostSubscriptionResponse.Result, mock.PostSubscriptionResponse.Response, mock.PostSubscriptionResponse.Error
}
