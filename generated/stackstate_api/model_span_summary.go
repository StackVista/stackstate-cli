/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// SpanSummary struct for SpanSummary
type SpanSummary struct {
	StartTime InstantNanoPrecision `json:"startTime"`
	EndTime   InstantNanoPrecision `json:"endTime"`
	// Duration of the span in nanoseconds
	DurationNanos int64 `json:"durationNanos"`
	// The unique identifier for the trace, all spans of the same trace share the same trace_id
	TraceId string `json:"traceId"`
	// The unique identifier of the span within the trace
	SpanId string `json:"spanId"`
	// The id of the parent span of this span. Empty if this is the root span
	ParentSpanId *string `json:"parentSpanId,omitempty"`
	// A description of the span's operation. For example, the name can be a qualified method name or a file name and a line number where the operation is called
	SpanName string `json:"spanName"`
	// Logical name of the service for the span
	ServiceName string     `json:"serviceName"`
	StatusCode  StatusCode `json:"statusCode"`
}

// NewSpanSummary instantiates a new SpanSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanSummary(startTime InstantNanoPrecision, endTime InstantNanoPrecision, durationNanos int64, traceId string, spanId string, spanName string, serviceName string, statusCode StatusCode) *SpanSummary {
	this := SpanSummary{}
	this.StartTime = startTime
	this.EndTime = endTime
	this.DurationNanos = durationNanos
	this.TraceId = traceId
	this.SpanId = spanId
	this.SpanName = spanName
	this.ServiceName = serviceName
	this.StatusCode = statusCode
	return &this
}

// NewSpanSummaryWithDefaults instantiates a new SpanSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanSummaryWithDefaults() *SpanSummary {
	this := SpanSummary{}
	return &this
}

// GetStartTime returns the StartTime field value
func (o *SpanSummary) GetStartTime() InstantNanoPrecision {
	if o == nil {
		var ret InstantNanoPrecision
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *SpanSummary) GetStartTimeOk() (*InstantNanoPrecision, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *SpanSummary) SetStartTime(v InstantNanoPrecision) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *SpanSummary) GetEndTime() InstantNanoPrecision {
	if o == nil {
		var ret InstantNanoPrecision
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *SpanSummary) GetEndTimeOk() (*InstantNanoPrecision, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *SpanSummary) SetEndTime(v InstantNanoPrecision) {
	o.EndTime = v
}

// GetDurationNanos returns the DurationNanos field value
func (o *SpanSummary) GetDurationNanos() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DurationNanos
}

// GetDurationNanosOk returns a tuple with the DurationNanos field value
// and a boolean to check if the value has been set.
func (o *SpanSummary) GetDurationNanosOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DurationNanos, true
}

// SetDurationNanos sets field value
func (o *SpanSummary) SetDurationNanos(v int64) {
	o.DurationNanos = v
}

// GetTraceId returns the TraceId field value
func (o *SpanSummary) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *SpanSummary) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *SpanSummary) SetTraceId(v string) {
	o.TraceId = v
}

// GetSpanId returns the SpanId field value
func (o *SpanSummary) GetSpanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value
// and a boolean to check if the value has been set.
func (o *SpanSummary) GetSpanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpanId, true
}

// SetSpanId sets field value
func (o *SpanSummary) SetSpanId(v string) {
	o.SpanId = v
}

// GetParentSpanId returns the ParentSpanId field value if set, zero value otherwise.
func (o *SpanSummary) GetParentSpanId() string {
	if o == nil || o.ParentSpanId == nil {
		var ret string
		return ret
	}
	return *o.ParentSpanId
}

// GetParentSpanIdOk returns a tuple with the ParentSpanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanSummary) GetParentSpanIdOk() (*string, bool) {
	if o == nil || o.ParentSpanId == nil {
		return nil, false
	}
	return o.ParentSpanId, true
}

// HasParentSpanId returns a boolean if a field has been set.
func (o *SpanSummary) HasParentSpanId() bool {
	if o != nil && o.ParentSpanId != nil {
		return true
	}

	return false
}

// SetParentSpanId gets a reference to the given string and assigns it to the ParentSpanId field.
func (o *SpanSummary) SetParentSpanId(v string) {
	o.ParentSpanId = &v
}

// GetSpanName returns the SpanName field value
func (o *SpanSummary) GetSpanName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpanName
}

// GetSpanNameOk returns a tuple with the SpanName field value
// and a boolean to check if the value has been set.
func (o *SpanSummary) GetSpanNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpanName, true
}

// SetSpanName sets field value
func (o *SpanSummary) SetSpanName(v string) {
	o.SpanName = v
}

// GetServiceName returns the ServiceName field value
func (o *SpanSummary) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *SpanSummary) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *SpanSummary) SetServiceName(v string) {
	o.ServiceName = v
}

// GetStatusCode returns the StatusCode field value
func (o *SpanSummary) GetStatusCode() StatusCode {
	if o == nil {
		var ret StatusCode
		return ret
	}

	return o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value
// and a boolean to check if the value has been set.
func (o *SpanSummary) GetStatusCodeOk() (*StatusCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusCode, true
}

// SetStatusCode sets field value
func (o *SpanSummary) SetStatusCode(v StatusCode) {
	o.StatusCode = v
}

func (o SpanSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["startTime"] = o.StartTime
	}
	if true {
		toSerialize["endTime"] = o.EndTime
	}
	if true {
		toSerialize["durationNanos"] = o.DurationNanos
	}
	if true {
		toSerialize["traceId"] = o.TraceId
	}
	if true {
		toSerialize["spanId"] = o.SpanId
	}
	if o.ParentSpanId != nil {
		toSerialize["parentSpanId"] = o.ParentSpanId
	}
	if true {
		toSerialize["spanName"] = o.SpanName
	}
	if true {
		toSerialize["serviceName"] = o.ServiceName
	}
	if true {
		toSerialize["statusCode"] = o.StatusCode
	}
	return json.Marshal(toSerialize)
}

type NullableSpanSummary struct {
	value *SpanSummary
	isSet bool
}

func (v NullableSpanSummary) Get() *SpanSummary {
	return v.value
}

func (v *NullableSpanSummary) Set(val *SpanSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanSummary(val *SpanSummary) *NullableSpanSummary {
	return &NullableSpanSummary{value: val, isSet: true}
}

func (v NullableSpanSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
