/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// DurationQuantiles struct for DurationQuantiles
type DurationQuantiles struct {
	Q50 float64 `json:"q50"`
	Q90 float64 `json:"q90"`
	Q95 float64 `json:"q95"`
	Q99 float64 `json:"q99"`
}

// NewDurationQuantiles instantiates a new DurationQuantiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDurationQuantiles(q50 float64, q90 float64, q95 float64, q99 float64) *DurationQuantiles {
	this := DurationQuantiles{}
	this.Q50 = q50
	this.Q90 = q90
	this.Q95 = q95
	this.Q99 = q99
	return &this
}

// NewDurationQuantilesWithDefaults instantiates a new DurationQuantiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDurationQuantilesWithDefaults() *DurationQuantiles {
	this := DurationQuantiles{}
	return &this
}

// GetQ50 returns the Q50 field value
func (o *DurationQuantiles) GetQ50() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Q50
}

// GetQ50Ok returns a tuple with the Q50 field value
// and a boolean to check if the value has been set.
func (o *DurationQuantiles) GetQ50Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Q50, true
}

// SetQ50 sets field value
func (o *DurationQuantiles) SetQ50(v float64) {
	o.Q50 = v
}

// GetQ90 returns the Q90 field value
func (o *DurationQuantiles) GetQ90() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Q90
}

// GetQ90Ok returns a tuple with the Q90 field value
// and a boolean to check if the value has been set.
func (o *DurationQuantiles) GetQ90Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Q90, true
}

// SetQ90 sets field value
func (o *DurationQuantiles) SetQ90(v float64) {
	o.Q90 = v
}

// GetQ95 returns the Q95 field value
func (o *DurationQuantiles) GetQ95() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Q95
}

// GetQ95Ok returns a tuple with the Q95 field value
// and a boolean to check if the value has been set.
func (o *DurationQuantiles) GetQ95Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Q95, true
}

// SetQ95 sets field value
func (o *DurationQuantiles) SetQ95(v float64) {
	o.Q95 = v
}

// GetQ99 returns the Q99 field value
func (o *DurationQuantiles) GetQ99() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Q99
}

// GetQ99Ok returns a tuple with the Q99 field value
// and a boolean to check if the value has been set.
func (o *DurationQuantiles) GetQ99Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Q99, true
}

// SetQ99 sets field value
func (o *DurationQuantiles) SetQ99(v float64) {
	o.Q99 = v
}

func (o DurationQuantiles) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["q50"] = o.Q50
	}
	if true {
		toSerialize["q90"] = o.Q90
	}
	if true {
		toSerialize["q95"] = o.Q95
	}
	if true {
		toSerialize["q99"] = o.Q99
	}
	return json.Marshal(toSerialize)
}

type NullableDurationQuantiles struct {
	value *DurationQuantiles
	isSet bool
}

func (v NullableDurationQuantiles) Get() *DurationQuantiles {
	return v.value
}

func (v *NullableDurationQuantiles) Set(val *DurationQuantiles) {
	v.value = val
	v.isSet = true
}

func (v NullableDurationQuantiles) IsSet() bool {
	return v.isSet
}

func (v *NullableDurationQuantiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDurationQuantiles(val *DurationQuantiles) *NullableDurationQuantiles {
	return &NullableDurationQuantiles{value: val, isSet: true}
}

func (v NullableDurationQuantiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDurationQuantiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
