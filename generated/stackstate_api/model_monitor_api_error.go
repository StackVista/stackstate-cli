/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// MonitorApiError struct for MonitorApiError
type MonitorApiError struct {
	MonitorId *string `json:"monitorId,omitempty"`
	MonitorIdType *string `json:"monitorIdType,omitempty"`
	StatusCode string `json:"statusCode"`
	Message string `json:"message"`
}

// NewMonitorApiError instantiates a new MonitorApiError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorApiError(statusCode string, message string) *MonitorApiError {
	this := MonitorApiError{}
	this.StatusCode = statusCode
	this.Message = message
	return &this
}

// NewMonitorApiErrorWithDefaults instantiates a new MonitorApiError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorApiErrorWithDefaults() *MonitorApiError {
	this := MonitorApiError{}
	return &this
}

// GetMonitorId returns the MonitorId field value if set, zero value otherwise.
func (o *MonitorApiError) GetMonitorId() string {
	if o == nil || o.MonitorId == nil {
		var ret string
		return ret
	}
	return *o.MonitorId
}

// GetMonitorIdOk returns a tuple with the MonitorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorApiError) GetMonitorIdOk() (*string, bool) {
	if o == nil || o.MonitorId == nil {
		return nil, false
	}
	return o.MonitorId, true
}

// HasMonitorId returns a boolean if a field has been set.
func (o *MonitorApiError) HasMonitorId() bool {
	if o != nil && o.MonitorId != nil {
		return true
	}

	return false
}

// SetMonitorId gets a reference to the given string and assigns it to the MonitorId field.
func (o *MonitorApiError) SetMonitorId(v string) {
	o.MonitorId = &v
}

// GetMonitorIdType returns the MonitorIdType field value if set, zero value otherwise.
func (o *MonitorApiError) GetMonitorIdType() string {
	if o == nil || o.MonitorIdType == nil {
		var ret string
		return ret
	}
	return *o.MonitorIdType
}

// GetMonitorIdTypeOk returns a tuple with the MonitorIdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorApiError) GetMonitorIdTypeOk() (*string, bool) {
	if o == nil || o.MonitorIdType == nil {
		return nil, false
	}
	return o.MonitorIdType, true
}

// HasMonitorIdType returns a boolean if a field has been set.
func (o *MonitorApiError) HasMonitorIdType() bool {
	if o != nil && o.MonitorIdType != nil {
		return true
	}

	return false
}

// SetMonitorIdType gets a reference to the given string and assigns it to the MonitorIdType field.
func (o *MonitorApiError) SetMonitorIdType(v string) {
	o.MonitorIdType = &v
}

// GetStatusCode returns the StatusCode field value
func (o *MonitorApiError) GetStatusCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value
// and a boolean to check if the value has been set.
func (o *MonitorApiError) GetStatusCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusCode, true
}

// SetStatusCode sets field value
func (o *MonitorApiError) SetStatusCode(v string) {
	o.StatusCode = v
}

// GetMessage returns the Message field value
func (o *MonitorApiError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *MonitorApiError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *MonitorApiError) SetMessage(v string) {
	o.Message = v
}

func (o MonitorApiError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MonitorId != nil {
		toSerialize["monitorId"] = o.MonitorId
	}
	if o.MonitorIdType != nil {
		toSerialize["monitorIdType"] = o.MonitorIdType
	}
	if true {
		toSerialize["statusCode"] = o.StatusCode
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorApiError struct {
	value *MonitorApiError
	isSet bool
}

func (v NullableMonitorApiError) Get() *MonitorApiError {
	return v.value
}

func (v *NullableMonitorApiError) Set(val *MonitorApiError) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorApiError) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorApiError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorApiError(val *MonitorApiError) *NullableMonitorApiError {
	return &NullableMonitorApiError{value: val, isSet: true}
}

func (v NullableMonitorApiError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorApiError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


