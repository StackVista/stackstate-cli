/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// ServerInfo struct for ServerInfo
type ServerInfo struct {
	Version        ServerVersion `json:"version"`
	DeploymentMode string        `json:"deploymentMode"`
	// The version value is a semantic version, based on the official Semantic Versioning spec (https://semver.org/).
	PlatformVersion *string `json:"platformVersion,omitempty"`
}

// NewServerInfo instantiates a new ServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInfo(version ServerVersion, deploymentMode string) *ServerInfo {
	this := ServerInfo{}
	this.Version = version
	this.DeploymentMode = deploymentMode
	return &this
}

// NewServerInfoWithDefaults instantiates a new ServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInfoWithDefaults() *ServerInfo {
	this := ServerInfo{}
	return &this
}

// GetVersion returns the Version field value
func (o *ServerInfo) GetVersion() ServerVersion {
	if o == nil {
		var ret ServerVersion
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetVersionOk() (*ServerVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ServerInfo) SetVersion(v ServerVersion) {
	o.Version = v
}

// GetDeploymentMode returns the DeploymentMode field value
func (o *ServerInfo) GetDeploymentMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploymentMode
}

// GetDeploymentModeOk returns a tuple with the DeploymentMode field value
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetDeploymentModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentMode, true
}

// SetDeploymentMode sets field value
func (o *ServerInfo) SetDeploymentMode(v string) {
	o.DeploymentMode = v
}

// GetPlatformVersion returns the PlatformVersion field value if set, zero value otherwise.
func (o *ServerInfo) GetPlatformVersion() string {
	if o == nil || o.PlatformVersion == nil {
		var ret string
		return ret
	}
	return *o.PlatformVersion
}

// GetPlatformVersionOk returns a tuple with the PlatformVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetPlatformVersionOk() (*string, bool) {
	if o == nil || o.PlatformVersion == nil {
		return nil, false
	}
	return o.PlatformVersion, true
}

// HasPlatformVersion returns a boolean if a field has been set.
func (o *ServerInfo) HasPlatformVersion() bool {
	if o != nil && o.PlatformVersion != nil {
		return true
	}

	return false
}

// SetPlatformVersion gets a reference to the given string and assigns it to the PlatformVersion field.
func (o *ServerInfo) SetPlatformVersion(v string) {
	o.PlatformVersion = &v
}

func (o ServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["deploymentMode"] = o.DeploymentMode
	}
	if o.PlatformVersion != nil {
		toSerialize["platformVersion"] = o.PlatformVersion
	}
	return json.Marshal(toSerialize)
}

type NullableServerInfo struct {
	value *ServerInfo
	isSet bool
}

func (v NullableServerInfo) Get() *ServerInfo {
	return v.value
}

func (v *NullableServerInfo) Set(val *ServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInfo(val *ServerInfo) *NullableServerInfo {
	return &NullableServerInfo{value: val, isSet: true}
}

func (v NullableServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
