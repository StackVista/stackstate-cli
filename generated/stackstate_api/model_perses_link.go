/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// PersesLink struct for PersesLink
type PersesLink struct {
	Name            *string `json:"name,omitempty"`
	RenderVariables *bool   `json:"renderVariables,omitempty"`
	TargetBlank     *bool   `json:"targetBlank,omitempty"`
	Tooltip         *string `json:"tooltip,omitempty"`
	Url             *string `json:"url,omitempty"`
}

// NewPersesLink instantiates a new PersesLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersesLink() *PersesLink {
	this := PersesLink{}
	return &this
}

// NewPersesLinkWithDefaults instantiates a new PersesLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersesLinkWithDefaults() *PersesLink {
	this := PersesLink{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PersesLink) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersesLink) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PersesLink) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PersesLink) SetName(v string) {
	o.Name = &v
}

// GetRenderVariables returns the RenderVariables field value if set, zero value otherwise.
func (o *PersesLink) GetRenderVariables() bool {
	if o == nil || o.RenderVariables == nil {
		var ret bool
		return ret
	}
	return *o.RenderVariables
}

// GetRenderVariablesOk returns a tuple with the RenderVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersesLink) GetRenderVariablesOk() (*bool, bool) {
	if o == nil || o.RenderVariables == nil {
		return nil, false
	}
	return o.RenderVariables, true
}

// HasRenderVariables returns a boolean if a field has been set.
func (o *PersesLink) HasRenderVariables() bool {
	if o != nil && o.RenderVariables != nil {
		return true
	}

	return false
}

// SetRenderVariables gets a reference to the given bool and assigns it to the RenderVariables field.
func (o *PersesLink) SetRenderVariables(v bool) {
	o.RenderVariables = &v
}

// GetTargetBlank returns the TargetBlank field value if set, zero value otherwise.
func (o *PersesLink) GetTargetBlank() bool {
	if o == nil || o.TargetBlank == nil {
		var ret bool
		return ret
	}
	return *o.TargetBlank
}

// GetTargetBlankOk returns a tuple with the TargetBlank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersesLink) GetTargetBlankOk() (*bool, bool) {
	if o == nil || o.TargetBlank == nil {
		return nil, false
	}
	return o.TargetBlank, true
}

// HasTargetBlank returns a boolean if a field has been set.
func (o *PersesLink) HasTargetBlank() bool {
	if o != nil && o.TargetBlank != nil {
		return true
	}

	return false
}

// SetTargetBlank gets a reference to the given bool and assigns it to the TargetBlank field.
func (o *PersesLink) SetTargetBlank(v bool) {
	o.TargetBlank = &v
}

// GetTooltip returns the Tooltip field value if set, zero value otherwise.
func (o *PersesLink) GetTooltip() string {
	if o == nil || o.Tooltip == nil {
		var ret string
		return ret
	}
	return *o.Tooltip
}

// GetTooltipOk returns a tuple with the Tooltip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersesLink) GetTooltipOk() (*string, bool) {
	if o == nil || o.Tooltip == nil {
		return nil, false
	}
	return o.Tooltip, true
}

// HasTooltip returns a boolean if a field has been set.
func (o *PersesLink) HasTooltip() bool {
	if o != nil && o.Tooltip != nil {
		return true
	}

	return false
}

// SetTooltip gets a reference to the given string and assigns it to the Tooltip field.
func (o *PersesLink) SetTooltip(v string) {
	o.Tooltip = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PersesLink) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersesLink) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PersesLink) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PersesLink) SetUrl(v string) {
	o.Url = &v
}

func (o PersesLink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.RenderVariables != nil {
		toSerialize["renderVariables"] = o.RenderVariables
	}
	if o.TargetBlank != nil {
		toSerialize["targetBlank"] = o.TargetBlank
	}
	if o.Tooltip != nil {
		toSerialize["tooltip"] = o.Tooltip
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullablePersesLink struct {
	value *PersesLink
	isSet bool
}

func (v NullablePersesLink) Get() *PersesLink {
	return v.value
}

func (v *NullablePersesLink) Set(val *PersesLink) {
	v.value = val
	v.isSet = true
}

func (v NullablePersesLink) IsSet() bool {
	return v.isSet
}

func (v *NullablePersesLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersesLink(val *PersesLink) *NullablePersesLink {
	return &NullablePersesLink{value: val, isSet: true}
}

func (v NullablePersesLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersesLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
