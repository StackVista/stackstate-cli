/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


type ImportApi interface {

	/*
	ImportSettings Import settings

	Import StackState Templated JSON (STJ) setting nodes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiImportSettingsRequest
	*/
	ImportSettings(ctx context.Context) ApiImportSettingsRequest

	// ImportSettingsExecute executes the request
	//  @return []map[string]interface{}
	ImportSettingsExecute(r ApiImportSettingsRequest) ([]map[string]interface{}, *http.Response, error)
}

// ImportApiService ImportApi service
type ImportApiService service

type ApiImportSettingsRequest struct {
	ctx context.Context
	ApiService ImportApi
	body *string
	timeoutSeconds *int64
	namespace *string
	unlocked *string
}

func (r ApiImportSettingsRequest) Body(body string) ApiImportSettingsRequest {
	r.body = &body
	return r
}

func (r ApiImportSettingsRequest) TimeoutSeconds(timeoutSeconds int64) ApiImportSettingsRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiImportSettingsRequest) Namespace(namespace string) ApiImportSettingsRequest {
	r.namespace = &namespace
	return r
}

func (r ApiImportSettingsRequest) Unlocked(unlocked string) ApiImportSettingsRequest {
	r.unlocked = &unlocked
	return r
}

func (r ApiImportSettingsRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.ImportSettingsExecute(r)
}

/*
ImportSettings Import settings

Import StackState Templated JSON (STJ) setting nodes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiImportSettingsRequest
*/
func (a *ImportApiService) ImportSettings(ctx context.Context) ApiImportSettingsRequest {
	return ApiImportSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *ImportApiService) ImportSettingsExecute(r ApiImportSettingsRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImportApiService.ImportSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/import"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.unlocked != nil {
		localVarQueryParams.Add("unlocked", parameterToString(*r.unlocked, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"plain/text"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------


type ImportApiMock struct {
	ImportSettingsCalls *[]ImportSettingsCall
	ImportSettingsResponse ImportSettingsMockResponse
}	

func NewImportApiMock() ImportApiMock {
	xImportSettingsCalls := make([]ImportSettingsCall, 0)
	return ImportApiMock {
		ImportSettingsCalls: &xImportSettingsCalls,
	}
}

type ImportSettingsMockResponse struct {
	Result []map[string]interface{}
	Response *http.Response
	Error error
}

type ImportSettingsCall struct {
	Pbody *string
	PtimeoutSeconds *int64
	Pnamespace *string
	Punlocked *string
}


func (mock ImportApiMock) ImportSettings(ctx context.Context) ApiImportSettingsRequest {
	return ApiImportSettingsRequest{
		ApiService: mock,
		ctx: ctx,
	}
}

func (mock ImportApiMock) ImportSettingsExecute(r ApiImportSettingsRequest) ([]map[string]interface{}, *http.Response, error) {
	p := ImportSettingsCall {
			Pbody: r.body,
			PtimeoutSeconds: r.timeoutSeconds,
			Pnamespace: r.namespace,
			Punlocked: r.unlocked,
	}
	*mock.ImportSettingsCalls = append(*mock.ImportSettingsCalls, p)
	return mock.ImportSettingsResponse.Result, mock.ImportSettingsResponse.Response, mock.ImportSettingsResponse.Error
}


