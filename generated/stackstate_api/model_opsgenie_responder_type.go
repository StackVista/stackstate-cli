/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// OpsgenieResponderType the model 'OpsgenieResponderType'
type OpsgenieResponderType string

// List of OpsgenieResponderType
const (
	OPSGENIERESPONDERTYPE_TEAM       OpsgenieResponderType = "TEAM"
	OPSGENIERESPONDERTYPE_USER       OpsgenieResponderType = "USER"
	OPSGENIERESPONDERTYPE_SCHEDULE   OpsgenieResponderType = "SCHEDULE"
	OPSGENIERESPONDERTYPE_ESCALATION OpsgenieResponderType = "ESCALATION"
)

// All allowed values of OpsgenieResponderType enum
var AllowedOpsgenieResponderTypeEnumValues = []OpsgenieResponderType{
	"TEAM",
	"USER",
	"SCHEDULE",
	"ESCALATION",
}

func (v *OpsgenieResponderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpsgenieResponderType(value)
	for _, existing := range AllowedOpsgenieResponderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OpsgenieResponderType", value)
}

// NewOpsgenieResponderTypeFromValue returns a pointer to a valid OpsgenieResponderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpsgenieResponderTypeFromValue(v string) (*OpsgenieResponderType, error) {
	ev := OpsgenieResponderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OpsgenieResponderType: valid values are %v", v, AllowedOpsgenieResponderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpsgenieResponderType) IsValid() bool {
	for _, existing := range AllowedOpsgenieResponderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpsgenieResponderType value
func (v OpsgenieResponderType) Ptr() *OpsgenieResponderType {
	return &v
}

type NullableOpsgenieResponderType struct {
	value *OpsgenieResponderType
	isSet bool
}

func (v NullableOpsgenieResponderType) Get() *OpsgenieResponderType {
	return v.value
}

func (v *NullableOpsgenieResponderType) Set(val *OpsgenieResponderType) {
	v.value = val
	v.isSet = true
}

func (v NullableOpsgenieResponderType) IsSet() bool {
	return v.isSet
}

func (v *NullableOpsgenieResponderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpsgenieResponderType(val *OpsgenieResponderType) *NullableOpsgenieResponderType {
	return &NullableOpsgenieResponderType{value: val, isSet: true}
}

func (v NullableOpsgenieResponderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpsgenieResponderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
