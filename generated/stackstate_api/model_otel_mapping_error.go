/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// OtelMappingError struct for OtelMappingError
type OtelMappingError struct {
	Level   MessageLevel `json:"level"`
	Message string       `json:"message"`
	IssueId *string      `json:"issueId,omitempty"`
}

// NewOtelMappingError instantiates a new OtelMappingError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOtelMappingError(level MessageLevel, message string) *OtelMappingError {
	this := OtelMappingError{}
	this.Level = level
	this.Message = message
	return &this
}

// NewOtelMappingErrorWithDefaults instantiates a new OtelMappingError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOtelMappingErrorWithDefaults() *OtelMappingError {
	this := OtelMappingError{}
	return &this
}

// GetLevel returns the Level field value
func (o *OtelMappingError) GetLevel() MessageLevel {
	if o == nil {
		var ret MessageLevel
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *OtelMappingError) GetLevelOk() (*MessageLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *OtelMappingError) SetLevel(v MessageLevel) {
	o.Level = v
}

// GetMessage returns the Message field value
func (o *OtelMappingError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *OtelMappingError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *OtelMappingError) SetMessage(v string) {
	o.Message = v
}

// GetIssueId returns the IssueId field value if set, zero value otherwise.
func (o *OtelMappingError) GetIssueId() string {
	if o == nil || o.IssueId == nil {
		var ret string
		return ret
	}
	return *o.IssueId
}

// GetIssueIdOk returns a tuple with the IssueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtelMappingError) GetIssueIdOk() (*string, bool) {
	if o == nil || o.IssueId == nil {
		return nil, false
	}
	return o.IssueId, true
}

// HasIssueId returns a boolean if a field has been set.
func (o *OtelMappingError) HasIssueId() bool {
	if o != nil && o.IssueId != nil {
		return true
	}

	return false
}

// SetIssueId gets a reference to the given string and assigns it to the IssueId field.
func (o *OtelMappingError) SetIssueId(v string) {
	o.IssueId = &v
}

func (o OtelMappingError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["level"] = o.Level
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.IssueId != nil {
		toSerialize["issueId"] = o.IssueId
	}
	return json.Marshal(toSerialize)
}

type NullableOtelMappingError struct {
	value *OtelMappingError
	isSet bool
}

func (v NullableOtelMappingError) Get() *OtelMappingError {
	return v.value
}

func (v *NullableOtelMappingError) Set(val *OtelMappingError) {
	v.value = val
	v.isSet = true
}

func (v NullableOtelMappingError) IsSet() bool {
	return v.isSet
}

func (v *NullableOtelMappingError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtelMappingError(val *OtelMappingError) *NullableOtelMappingError {
	return &NullableOtelMappingError{value: val, isSet: true}
}

func (v NullableOtelMappingError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtelMappingError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
