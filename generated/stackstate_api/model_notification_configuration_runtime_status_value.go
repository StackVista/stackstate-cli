/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// NotificationConfigurationRuntimeStatusValue the model 'NotificationConfigurationRuntimeStatusValue'
type NotificationConfigurationRuntimeStatusValue string

// List of NotificationConfigurationRuntimeStatusValue
const (
	NOTIFICATIONCONFIGURATIONRUNTIMESTATUSVALUE_ERROR   NotificationConfigurationRuntimeStatusValue = "ERROR"
	NOTIFICATIONCONFIGURATIONRUNTIMESTATUSVALUE_WARNING NotificationConfigurationRuntimeStatusValue = "WARNING"
	NOTIFICATIONCONFIGURATIONRUNTIMESTATUSVALUE_OK      NotificationConfigurationRuntimeStatusValue = "OK"
)

// All allowed values of NotificationConfigurationRuntimeStatusValue enum
var AllowedNotificationConfigurationRuntimeStatusValueEnumValues = []NotificationConfigurationRuntimeStatusValue{
	"ERROR",
	"WARNING",
	"OK",
}

func (v *NotificationConfigurationRuntimeStatusValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationConfigurationRuntimeStatusValue(value)
	for _, existing := range AllowedNotificationConfigurationRuntimeStatusValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationConfigurationRuntimeStatusValue", value)
}

// NewNotificationConfigurationRuntimeStatusValueFromValue returns a pointer to a valid NotificationConfigurationRuntimeStatusValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationConfigurationRuntimeStatusValueFromValue(v string) (*NotificationConfigurationRuntimeStatusValue, error) {
	ev := NotificationConfigurationRuntimeStatusValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationConfigurationRuntimeStatusValue: valid values are %v", v, AllowedNotificationConfigurationRuntimeStatusValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationConfigurationRuntimeStatusValue) IsValid() bool {
	for _, existing := range AllowedNotificationConfigurationRuntimeStatusValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotificationConfigurationRuntimeStatusValue value
func (v NotificationConfigurationRuntimeStatusValue) Ptr() *NotificationConfigurationRuntimeStatusValue {
	return &v
}

type NullableNotificationConfigurationRuntimeStatusValue struct {
	value *NotificationConfigurationRuntimeStatusValue
	isSet bool
}

func (v NullableNotificationConfigurationRuntimeStatusValue) Get() *NotificationConfigurationRuntimeStatusValue {
	return v.value
}

func (v *NullableNotificationConfigurationRuntimeStatusValue) Set(val *NotificationConfigurationRuntimeStatusValue) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationConfigurationRuntimeStatusValue) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationConfigurationRuntimeStatusValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationConfigurationRuntimeStatusValue(val *NotificationConfigurationRuntimeStatusValue) *NullableNotificationConfigurationRuntimeStatusValue {
	return &NullableNotificationConfigurationRuntimeStatusValue{value: val, isSet: true}
}

func (v NullableNotificationConfigurationRuntimeStatusValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationConfigurationRuntimeStatusValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
