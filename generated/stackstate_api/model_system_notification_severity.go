/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// SystemNotificationSeverity the model 'SystemNotificationSeverity'
type SystemNotificationSeverity string

// List of SystemNotificationSeverity
const (
	SYSTEMNOTIFICATIONSEVERITY_INFO    SystemNotificationSeverity = "info"
	SYSTEMNOTIFICATIONSEVERITY_OK      SystemNotificationSeverity = "ok"
	SYSTEMNOTIFICATIONSEVERITY_WARNING SystemNotificationSeverity = "warning"
	SYSTEMNOTIFICATIONSEVERITY_PROBLEM SystemNotificationSeverity = "problem"
)

// All allowed values of SystemNotificationSeverity enum
var AllowedSystemNotificationSeverityEnumValues = []SystemNotificationSeverity{
	"info",
	"ok",
	"warning",
	"problem",
}

func (v *SystemNotificationSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemNotificationSeverity(value)
	for _, existing := range AllowedSystemNotificationSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemNotificationSeverity", value)
}

// NewSystemNotificationSeverityFromValue returns a pointer to a valid SystemNotificationSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemNotificationSeverityFromValue(v string) (*SystemNotificationSeverity, error) {
	ev := SystemNotificationSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemNotificationSeverity: valid values are %v", v, AllowedSystemNotificationSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemNotificationSeverity) IsValid() bool {
	for _, existing := range AllowedSystemNotificationSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemNotificationSeverity value
func (v SystemNotificationSeverity) Ptr() *SystemNotificationSeverity {
	return &v
}

type NullableSystemNotificationSeverity struct {
	value *SystemNotificationSeverity
	isSet bool
}

func (v NullableSystemNotificationSeverity) Get() *SystemNotificationSeverity {
	return v.value
}

func (v *NullableSystemNotificationSeverity) Set(val *SystemNotificationSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemNotificationSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemNotificationSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemNotificationSeverity(val *SystemNotificationSeverity) *NullableSystemNotificationSeverity {
	return &NullableSystemNotificationSeverity{value: val, isSet: true}
}

func (v NullableSystemNotificationSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemNotificationSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
