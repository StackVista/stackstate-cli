/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


type QueryApi interface {

	/*
	GetExemplarsQuery Experimental: Exemplars for a specific time range

	Experimental: The returns a list of exemplars for a valid PromQL query for a specific time range

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetExemplarsQueryRequest
	*/
	GetExemplarsQuery(ctx context.Context) ApiGetExemplarsQueryRequest

	// GetExemplarsQueryExecute executes the request
	//  @return Envelope
	GetExemplarsQueryExecute(r ApiGetExemplarsQueryRequest) (*Envelope, *http.Response, error)

	/*
	GetInstantQuery Instant query at a single point in time

	The endpoint evaluates an instant query at a single point in time

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetInstantQueryRequest
	*/
	GetInstantQuery(ctx context.Context) ApiGetInstantQueryRequest

	// GetInstantQueryExecute executes the request
	//  @return Envelope
	GetInstantQueryExecute(r ApiGetInstantQueryRequest) (*Envelope, *http.Response, error)

	/*
	GetRangeQuery Query over a range of time

	The endpoint evaluates an expression query over a range of time

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetRangeQueryRequest
	*/
	GetRangeQuery(ctx context.Context) ApiGetRangeQueryRequest

	// GetRangeQueryExecute executes the request
	//  @return Envelope
	GetRangeQueryExecute(r ApiGetRangeQueryRequest) (*Envelope, *http.Response, error)

	/*
	PostExemplarsQuery Experimental: Exemplars for a specific time range

	Experimental: The returns a list of exemplars for a valid PromQL query for a specific time range

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostExemplarsQueryRequest
	*/
	PostExemplarsQuery(ctx context.Context) ApiPostExemplarsQueryRequest

	// PostExemplarsQueryExecute executes the request
	//  @return Envelope
	PostExemplarsQueryExecute(r ApiPostExemplarsQueryRequest) (*Envelope, *http.Response, error)

	/*
	PostInstantQuery Instant query at a single point in time

	The endpoint evaluates an instant query at a single point in time

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostInstantQueryRequest
	*/
	PostInstantQuery(ctx context.Context) ApiPostInstantQueryRequest

	// PostInstantQueryExecute executes the request
	//  @return Envelope
	PostInstantQueryExecute(r ApiPostInstantQueryRequest) (*Envelope, *http.Response, error)

	/*
	PostRangeQuery Query over a range of time

	The endpoint evaluates an expression query over a range of time

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostRangeQueryRequest
	*/
	PostRangeQuery(ctx context.Context) ApiPostRangeQueryRequest

	// PostRangeQueryExecute executes the request
	//  @return Envelope
	PostRangeQueryExecute(r ApiPostRangeQueryRequest) (*Envelope, *http.Response, error)
}

// QueryApiService QueryApi service
type QueryApiService service

type ApiGetExemplarsQueryRequest struct {
	ctx context.Context
	ApiService QueryApi
	query *string
	start *string
	end *string
}

// Prometheus expression query string
func (r ApiGetExemplarsQueryRequest) Query(query string) ApiGetExemplarsQueryRequest {
	r.query = &query
	return r
}

// Start timestamp in rfc3339 format or unix format
func (r ApiGetExemplarsQueryRequest) Start(start string) ApiGetExemplarsQueryRequest {
	r.start = &start
	return r
}

// End timestamp in rfc3339 format or unix format
func (r ApiGetExemplarsQueryRequest) End(end string) ApiGetExemplarsQueryRequest {
	r.end = &end
	return r
}

func (r ApiGetExemplarsQueryRequest) Execute() (*Envelope, *http.Response, error) {
	return r.ApiService.GetExemplarsQueryExecute(r)
}

/*
GetExemplarsQuery Experimental: Exemplars for a specific time range

Experimental: The returns a list of exemplars for a valid PromQL query for a specific time range

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetExemplarsQueryRequest
*/
func (a *QueryApiService) GetExemplarsQuery(ctx context.Context) ApiGetExemplarsQueryRequest {
	return ApiGetExemplarsQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Envelope
func (a *QueryApiService) GetExemplarsQueryExecute(r ApiGetExemplarsQueryRequest) (*Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueryApiService.GetExemplarsQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1alpha1/query_exemplars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}
	if r.start == nil {
		return localVarReturnValue, nil, reportError("start is required and must be specified")
	}
	if r.end == nil {
		return localVarReturnValue, nil, reportError("end is required and must be specified")
	}

	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Envelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Envelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInstantQueryRequest struct {
	ctx context.Context
	ApiService QueryApi
	query *string
	time *string
	timeout *string
}

// Prometheus expression query string
func (r ApiGetInstantQueryRequest) Query(query string) ApiGetInstantQueryRequest {
	r.query = &query
	return r
}

// Evaluation timestamp in rfc3339 format or unix format
func (r ApiGetInstantQueryRequest) Time(time string) ApiGetInstantQueryRequest {
	r.time = &time
	return r
}

// Evaluation timeout
func (r ApiGetInstantQueryRequest) Timeout(timeout string) ApiGetInstantQueryRequest {
	r.timeout = &timeout
	return r
}

func (r ApiGetInstantQueryRequest) Execute() (*Envelope, *http.Response, error) {
	return r.ApiService.GetInstantQueryExecute(r)
}

/*
GetInstantQuery Instant query at a single point in time

The endpoint evaluates an instant query at a single point in time

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetInstantQueryRequest
*/
func (a *QueryApiService) GetInstantQuery(ctx context.Context) ApiGetInstantQueryRequest {
	return ApiGetInstantQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Envelope
func (a *QueryApiService) GetInstantQueryExecute(r ApiGetInstantQueryRequest) (*Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueryApiService.GetInstantQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1alpha1/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	if r.time != nil {
		localVarQueryParams.Add("time", parameterToString(*r.time, ""))
	}
	if r.timeout != nil {
		localVarQueryParams.Add("timeout", parameterToString(*r.timeout, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Envelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Envelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRangeQueryRequest struct {
	ctx context.Context
	ApiService QueryApi
	query *string
	start *string
	end *string
	step *string
	timeout *string
}

// Prometheus expression query string
func (r ApiGetRangeQueryRequest) Query(query string) ApiGetRangeQueryRequest {
	r.query = &query
	return r
}

// Start timestamp in rfc3339 format or unix format
func (r ApiGetRangeQueryRequest) Start(start string) ApiGetRangeQueryRequest {
	r.start = &start
	return r
}

// End timestamp in rfc3339 format or unix format
func (r ApiGetRangeQueryRequest) End(end string) ApiGetRangeQueryRequest {
	r.end = &end
	return r
}

// Query resolution step width in duration format or float number of seconds.
func (r ApiGetRangeQueryRequest) Step(step string) ApiGetRangeQueryRequest {
	r.step = &step
	return r
}

// Evaluation timeout
func (r ApiGetRangeQueryRequest) Timeout(timeout string) ApiGetRangeQueryRequest {
	r.timeout = &timeout
	return r
}

func (r ApiGetRangeQueryRequest) Execute() (*Envelope, *http.Response, error) {
	return r.ApiService.GetRangeQueryExecute(r)
}

/*
GetRangeQuery Query over a range of time

The endpoint evaluates an expression query over a range of time

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRangeQueryRequest
*/
func (a *QueryApiService) GetRangeQuery(ctx context.Context) ApiGetRangeQueryRequest {
	return ApiGetRangeQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Envelope
func (a *QueryApiService) GetRangeQueryExecute(r ApiGetRangeQueryRequest) (*Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueryApiService.GetRangeQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1alpha1/query_range"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}
	if r.start == nil {
		return localVarReturnValue, nil, reportError("start is required and must be specified")
	}
	if r.end == nil {
		return localVarReturnValue, nil, reportError("end is required and must be specified")
	}
	if r.step == nil {
		return localVarReturnValue, nil, reportError("step is required and must be specified")
	}

	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	localVarQueryParams.Add("step", parameterToString(*r.step, ""))
	if r.timeout != nil {
		localVarQueryParams.Add("timeout", parameterToString(*r.timeout, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Envelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Envelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostExemplarsQueryRequest struct {
	ctx context.Context
	ApiService QueryApi
	query *string
	start *string
	end *string
}

func (r ApiPostExemplarsQueryRequest) Query(query string) ApiPostExemplarsQueryRequest {
	r.query = &query
	return r
}

func (r ApiPostExemplarsQueryRequest) Start(start string) ApiPostExemplarsQueryRequest {
	r.start = &start
	return r
}

func (r ApiPostExemplarsQueryRequest) End(end string) ApiPostExemplarsQueryRequest {
	r.end = &end
	return r
}

func (r ApiPostExemplarsQueryRequest) Execute() (*Envelope, *http.Response, error) {
	return r.ApiService.PostExemplarsQueryExecute(r)
}

/*
PostExemplarsQuery Experimental: Exemplars for a specific time range

Experimental: The returns a list of exemplars for a valid PromQL query for a specific time range

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostExemplarsQueryRequest
*/
func (a *QueryApiService) PostExemplarsQuery(ctx context.Context) ApiPostExemplarsQueryRequest {
	return ApiPostExemplarsQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Envelope
func (a *QueryApiService) PostExemplarsQueryExecute(r ApiPostExemplarsQueryRequest) (*Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueryApiService.PostExemplarsQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1alpha1/query_exemplars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}
	if r.start == nil {
		return localVarReturnValue, nil, reportError("start is required and must be specified")
	}
	if r.end == nil {
		return localVarReturnValue, nil, reportError("end is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("query", parameterToString(*r.query, ""))
	localVarFormParams.Add("start", parameterToString(*r.start, ""))
	localVarFormParams.Add("end", parameterToString(*r.end, ""))
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Envelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Envelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostInstantQueryRequest struct {
	ctx context.Context
	ApiService QueryApi
	query *string
	time *string
	timeout *string
}

func (r ApiPostInstantQueryRequest) Query(query string) ApiPostInstantQueryRequest {
	r.query = &query
	return r
}

func (r ApiPostInstantQueryRequest) Time(time string) ApiPostInstantQueryRequest {
	r.time = &time
	return r
}

func (r ApiPostInstantQueryRequest) Timeout(timeout string) ApiPostInstantQueryRequest {
	r.timeout = &timeout
	return r
}

func (r ApiPostInstantQueryRequest) Execute() (*Envelope, *http.Response, error) {
	return r.ApiService.PostInstantQueryExecute(r)
}

/*
PostInstantQuery Instant query at a single point in time

The endpoint evaluates an instant query at a single point in time

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostInstantQueryRequest
*/
func (a *QueryApiService) PostInstantQuery(ctx context.Context) ApiPostInstantQueryRequest {
	return ApiPostInstantQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Envelope
func (a *QueryApiService) PostInstantQueryExecute(r ApiPostInstantQueryRequest) (*Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueryApiService.PostInstantQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1alpha1/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("query", parameterToString(*r.query, ""))
	if r.time != nil {
		localVarFormParams.Add("time", parameterToString(*r.time, ""))
	}
	if r.timeout != nil {
		localVarFormParams.Add("timeout", parameterToString(*r.timeout, ""))
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Envelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Envelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRangeQueryRequest struct {
	ctx context.Context
	ApiService QueryApi
	query *string
	start *string
	end *string
	step *string
	timeout *string
}

func (r ApiPostRangeQueryRequest) Query(query string) ApiPostRangeQueryRequest {
	r.query = &query
	return r
}

func (r ApiPostRangeQueryRequest) Start(start string) ApiPostRangeQueryRequest {
	r.start = &start
	return r
}

func (r ApiPostRangeQueryRequest) End(end string) ApiPostRangeQueryRequest {
	r.end = &end
	return r
}

func (r ApiPostRangeQueryRequest) Step(step string) ApiPostRangeQueryRequest {
	r.step = &step
	return r
}

func (r ApiPostRangeQueryRequest) Timeout(timeout string) ApiPostRangeQueryRequest {
	r.timeout = &timeout
	return r
}

func (r ApiPostRangeQueryRequest) Execute() (*Envelope, *http.Response, error) {
	return r.ApiService.PostRangeQueryExecute(r)
}

/*
PostRangeQuery Query over a range of time

The endpoint evaluates an expression query over a range of time

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostRangeQueryRequest
*/
func (a *QueryApiService) PostRangeQuery(ctx context.Context) ApiPostRangeQueryRequest {
	return ApiPostRangeQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Envelope
func (a *QueryApiService) PostRangeQueryExecute(r ApiPostRangeQueryRequest) (*Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueryApiService.PostRangeQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1alpha1/query_range"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}
	if r.start == nil {
		return localVarReturnValue, nil, reportError("start is required and must be specified")
	}
	if r.end == nil {
		return localVarReturnValue, nil, reportError("end is required and must be specified")
	}
	if r.step == nil {
		return localVarReturnValue, nil, reportError("step is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("query", parameterToString(*r.query, ""))
	localVarFormParams.Add("start", parameterToString(*r.start, ""))
	localVarFormParams.Add("end", parameterToString(*r.end, ""))
	localVarFormParams.Add("step", parameterToString(*r.step, ""))
	if r.timeout != nil {
		localVarFormParams.Add("timeout", parameterToString(*r.timeout, ""))
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Envelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Envelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------


type QueryApiMock struct {
	GetExemplarsQueryCalls *[]GetExemplarsQueryCall
	GetExemplarsQueryResponse GetExemplarsQueryMockResponse
	GetInstantQueryCalls *[]GetInstantQueryCall
	GetInstantQueryResponse GetInstantQueryMockResponse
	GetRangeQueryCalls *[]GetRangeQueryCall
	GetRangeQueryResponse GetRangeQueryMockResponse
	PostExemplarsQueryCalls *[]PostExemplarsQueryCall
	PostExemplarsQueryResponse PostExemplarsQueryMockResponse
	PostInstantQueryCalls *[]PostInstantQueryCall
	PostInstantQueryResponse PostInstantQueryMockResponse
	PostRangeQueryCalls *[]PostRangeQueryCall
	PostRangeQueryResponse PostRangeQueryMockResponse
}	

func NewQueryApiMock() QueryApiMock {
	xGetExemplarsQueryCalls := make([]GetExemplarsQueryCall, 0)
	xGetInstantQueryCalls := make([]GetInstantQueryCall, 0)
	xGetRangeQueryCalls := make([]GetRangeQueryCall, 0)
	xPostExemplarsQueryCalls := make([]PostExemplarsQueryCall, 0)
	xPostInstantQueryCalls := make([]PostInstantQueryCall, 0)
	xPostRangeQueryCalls := make([]PostRangeQueryCall, 0)
	return QueryApiMock {
		GetExemplarsQueryCalls: &xGetExemplarsQueryCalls,
		GetInstantQueryCalls: &xGetInstantQueryCalls,
		GetRangeQueryCalls: &xGetRangeQueryCalls,
		PostExemplarsQueryCalls: &xPostExemplarsQueryCalls,
		PostInstantQueryCalls: &xPostInstantQueryCalls,
		PostRangeQueryCalls: &xPostRangeQueryCalls,
	}
}

type GetExemplarsQueryMockResponse struct {
	Result Envelope
	Response *http.Response
	Error error
}

type GetExemplarsQueryCall struct {
	Pquery *string
	Pstart *string
	Pend *string
}


func (mock QueryApiMock) GetExemplarsQuery(ctx context.Context) ApiGetExemplarsQueryRequest {
	return ApiGetExemplarsQueryRequest{
		ApiService: mock,
		ctx: ctx,
	}
}

func (mock QueryApiMock) GetExemplarsQueryExecute(r ApiGetExemplarsQueryRequest) (*Envelope, *http.Response, error) {
	p := GetExemplarsQueryCall {
			Pquery: r.query,
			Pstart: r.start,
			Pend: r.end,
	}
	*mock.GetExemplarsQueryCalls = append(*mock.GetExemplarsQueryCalls, p)
	return &mock.GetExemplarsQueryResponse.Result, mock.GetExemplarsQueryResponse.Response, mock.GetExemplarsQueryResponse.Error
}

type GetInstantQueryMockResponse struct {
	Result Envelope
	Response *http.Response
	Error error
}

type GetInstantQueryCall struct {
	Pquery *string
	Ptime *string
	Ptimeout *string
}


func (mock QueryApiMock) GetInstantQuery(ctx context.Context) ApiGetInstantQueryRequest {
	return ApiGetInstantQueryRequest{
		ApiService: mock,
		ctx: ctx,
	}
}

func (mock QueryApiMock) GetInstantQueryExecute(r ApiGetInstantQueryRequest) (*Envelope, *http.Response, error) {
	p := GetInstantQueryCall {
			Pquery: r.query,
			Ptime: r.time,
			Ptimeout: r.timeout,
	}
	*mock.GetInstantQueryCalls = append(*mock.GetInstantQueryCalls, p)
	return &mock.GetInstantQueryResponse.Result, mock.GetInstantQueryResponse.Response, mock.GetInstantQueryResponse.Error
}

type GetRangeQueryMockResponse struct {
	Result Envelope
	Response *http.Response
	Error error
}

type GetRangeQueryCall struct {
	Pquery *string
	Pstart *string
	Pend *string
	Pstep *string
	Ptimeout *string
}


func (mock QueryApiMock) GetRangeQuery(ctx context.Context) ApiGetRangeQueryRequest {
	return ApiGetRangeQueryRequest{
		ApiService: mock,
		ctx: ctx,
	}
}

func (mock QueryApiMock) GetRangeQueryExecute(r ApiGetRangeQueryRequest) (*Envelope, *http.Response, error) {
	p := GetRangeQueryCall {
			Pquery: r.query,
			Pstart: r.start,
			Pend: r.end,
			Pstep: r.step,
			Ptimeout: r.timeout,
	}
	*mock.GetRangeQueryCalls = append(*mock.GetRangeQueryCalls, p)
	return &mock.GetRangeQueryResponse.Result, mock.GetRangeQueryResponse.Response, mock.GetRangeQueryResponse.Error
}

type PostExemplarsQueryMockResponse struct {
	Result Envelope
	Response *http.Response
	Error error
}

type PostExemplarsQueryCall struct {
	Pquery *string
	Pstart *string
	Pend *string
}


func (mock QueryApiMock) PostExemplarsQuery(ctx context.Context) ApiPostExemplarsQueryRequest {
	return ApiPostExemplarsQueryRequest{
		ApiService: mock,
		ctx: ctx,
	}
}

func (mock QueryApiMock) PostExemplarsQueryExecute(r ApiPostExemplarsQueryRequest) (*Envelope, *http.Response, error) {
	p := PostExemplarsQueryCall {
			Pquery: r.query,
			Pstart: r.start,
			Pend: r.end,
	}
	*mock.PostExemplarsQueryCalls = append(*mock.PostExemplarsQueryCalls, p)
	return &mock.PostExemplarsQueryResponse.Result, mock.PostExemplarsQueryResponse.Response, mock.PostExemplarsQueryResponse.Error
}

type PostInstantQueryMockResponse struct {
	Result Envelope
	Response *http.Response
	Error error
}

type PostInstantQueryCall struct {
	Pquery *string
	Ptime *string
	Ptimeout *string
}


func (mock QueryApiMock) PostInstantQuery(ctx context.Context) ApiPostInstantQueryRequest {
	return ApiPostInstantQueryRequest{
		ApiService: mock,
		ctx: ctx,
	}
}

func (mock QueryApiMock) PostInstantQueryExecute(r ApiPostInstantQueryRequest) (*Envelope, *http.Response, error) {
	p := PostInstantQueryCall {
			Pquery: r.query,
			Ptime: r.time,
			Ptimeout: r.timeout,
	}
	*mock.PostInstantQueryCalls = append(*mock.PostInstantQueryCalls, p)
	return &mock.PostInstantQueryResponse.Result, mock.PostInstantQueryResponse.Response, mock.PostInstantQueryResponse.Error
}

type PostRangeQueryMockResponse struct {
	Result Envelope
	Response *http.Response
	Error error
}

type PostRangeQueryCall struct {
	Pquery *string
	Pstart *string
	Pend *string
	Pstep *string
	Ptimeout *string
}


func (mock QueryApiMock) PostRangeQuery(ctx context.Context) ApiPostRangeQueryRequest {
	return ApiPostRangeQueryRequest{
		ApiService: mock,
		ctx: ctx,
	}
}

func (mock QueryApiMock) PostRangeQueryExecute(r ApiPostRangeQueryRequest) (*Envelope, *http.Response, error) {
	p := PostRangeQueryCall {
			Pquery: r.query,
			Pstart: r.start,
			Pend: r.end,
			Pstep: r.step,
			Ptimeout: r.timeout,
	}
	*mock.PostRangeQueryCalls = append(*mock.PostRangeQueryCalls, p)
	return &mock.PostRangeQueryResponse.Result, mock.PostRangeQueryResponse.Response, mock.PostRangeQueryResponse.Error
}


