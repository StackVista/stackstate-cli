/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// TraceQueryMatch A trace that matched the query filters. It structurally matches the Trace schema, with extra fields representing  the result of the trace query.
type TraceQueryMatch struct {
	// The id of the trace
	TraceId string `json:"traceId"`
	// All spans for the trace
	Spans []Span `json:"spans"`
	// Map of resource identifiers to their corresponding resource attributes (key/value pairs). Keys are UUIDs used in the spansâ€™ `resourceId` fields.
	Resources map[string]map[string]string `json:"resources"`
	// Spans matching the primary filter
	PrimaryFilterMatches []string `json:"primaryFilterMatches"`
	// Spans matching the secondary filter
	SecondaryFilterMatches []string `json:"secondaryFilterMatches"`
}

// NewTraceQueryMatch instantiates a new TraceQueryMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceQueryMatch(traceId string, spans []Span, resources map[string]map[string]string, primaryFilterMatches []string, secondaryFilterMatches []string) *TraceQueryMatch {
	this := TraceQueryMatch{}
	this.TraceId = traceId
	this.Spans = spans
	this.Resources = resources
	this.PrimaryFilterMatches = primaryFilterMatches
	this.SecondaryFilterMatches = secondaryFilterMatches
	return &this
}

// NewTraceQueryMatchWithDefaults instantiates a new TraceQueryMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceQueryMatchWithDefaults() *TraceQueryMatch {
	this := TraceQueryMatch{}
	return &this
}

// GetTraceId returns the TraceId field value
func (o *TraceQueryMatch) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *TraceQueryMatch) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *TraceQueryMatch) SetTraceId(v string) {
	o.TraceId = v
}

// GetSpans returns the Spans field value
func (o *TraceQueryMatch) GetSpans() []Span {
	if o == nil {
		var ret []Span
		return ret
	}

	return o.Spans
}

// GetSpansOk returns a tuple with the Spans field value
// and a boolean to check if the value has been set.
func (o *TraceQueryMatch) GetSpansOk() ([]Span, bool) {
	if o == nil {
		return nil, false
	}
	return o.Spans, true
}

// SetSpans sets field value
func (o *TraceQueryMatch) SetSpans(v []Span) {
	o.Spans = v
}

// GetResources returns the Resources field value
func (o *TraceQueryMatch) GetResources() map[string]map[string]string {
	if o == nil {
		var ret map[string]map[string]string
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *TraceQueryMatch) GetResourcesOk() (*map[string]map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resources, true
}

// SetResources sets field value
func (o *TraceQueryMatch) SetResources(v map[string]map[string]string) {
	o.Resources = v
}

// GetPrimaryFilterMatches returns the PrimaryFilterMatches field value
func (o *TraceQueryMatch) GetPrimaryFilterMatches() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PrimaryFilterMatches
}

// GetPrimaryFilterMatchesOk returns a tuple with the PrimaryFilterMatches field value
// and a boolean to check if the value has been set.
func (o *TraceQueryMatch) GetPrimaryFilterMatchesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryFilterMatches, true
}

// SetPrimaryFilterMatches sets field value
func (o *TraceQueryMatch) SetPrimaryFilterMatches(v []string) {
	o.PrimaryFilterMatches = v
}

// GetSecondaryFilterMatches returns the SecondaryFilterMatches field value
func (o *TraceQueryMatch) GetSecondaryFilterMatches() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SecondaryFilterMatches
}

// GetSecondaryFilterMatchesOk returns a tuple with the SecondaryFilterMatches field value
// and a boolean to check if the value has been set.
func (o *TraceQueryMatch) GetSecondaryFilterMatchesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecondaryFilterMatches, true
}

// SetSecondaryFilterMatches sets field value
func (o *TraceQueryMatch) SetSecondaryFilterMatches(v []string) {
	o.SecondaryFilterMatches = v
}

func (o TraceQueryMatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["traceId"] = o.TraceId
	}
	if true {
		toSerialize["spans"] = o.Spans
	}
	if true {
		toSerialize["resources"] = o.Resources
	}
	if true {
		toSerialize["primaryFilterMatches"] = o.PrimaryFilterMatches
	}
	if true {
		toSerialize["secondaryFilterMatches"] = o.SecondaryFilterMatches
	}
	return json.Marshal(toSerialize)
}

type NullableTraceQueryMatch struct {
	value *TraceQueryMatch
	isSet bool
}

func (v NullableTraceQueryMatch) Get() *TraceQueryMatch {
	return v.value
}

func (v *NullableTraceQueryMatch) Set(val *TraceQueryMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceQueryMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceQueryMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceQueryMatch(val *TraceQueryMatch) *NullableTraceQueryMatch {
	return &NullableTraceQueryMatch{value: val, isSet: true}
}

func (v NullableTraceQueryMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceQueryMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
