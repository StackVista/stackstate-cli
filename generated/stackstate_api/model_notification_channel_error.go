/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// NotificationChannelError struct for NotificationChannelError
type NotificationChannelError struct {
	Message   string `json:"message"`
	ChannelId string `json:"channelId"`
	Type      string `json:"_type"`
}

// NewNotificationChannelError instantiates a new NotificationChannelError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationChannelError(message string, channelId string, type_ string) *NotificationChannelError {
	this := NotificationChannelError{}
	this.Message = message
	this.ChannelId = channelId
	this.Type = type_
	return &this
}

// NewNotificationChannelErrorWithDefaults instantiates a new NotificationChannelError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationChannelErrorWithDefaults() *NotificationChannelError {
	this := NotificationChannelError{}
	return &this
}

// GetMessage returns the Message field value
func (o *NotificationChannelError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *NotificationChannelError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *NotificationChannelError) SetMessage(v string) {
	o.Message = v
}

// GetChannelId returns the ChannelId field value
func (o *NotificationChannelError) GetChannelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value
// and a boolean to check if the value has been set.
func (o *NotificationChannelError) GetChannelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChannelId, true
}

// SetChannelId sets field value
func (o *NotificationChannelError) SetChannelId(v string) {
	o.ChannelId = v
}

// GetType returns the Type field value
func (o *NotificationChannelError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NotificationChannelError) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NotificationChannelError) SetType(v string) {
	o.Type = v
}

func (o NotificationChannelError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["channelId"] = o.ChannelId
	}
	if true {
		toSerialize["_type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationChannelError struct {
	value *NotificationChannelError
	isSet bool
}

func (v NullableNotificationChannelError) Get() *NotificationChannelError {
	return v.value
}

func (v *NullableNotificationChannelError) Set(val *NotificationChannelError) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationChannelError) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationChannelError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationChannelError(val *NotificationChannelError) *NullableNotificationChannelError {
	return &NullableNotificationChannelError{value: val, isSet: true}
}

func (v NullableNotificationChannelError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationChannelError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
