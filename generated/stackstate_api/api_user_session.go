/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

type UserSessionAPI interface {

	/*
		GetUserSessionAssumedRole Get the assumed a role for the current session

		Get the assumed a role for the current session.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetUserSessionAssumedRoleRequest
	*/
	GetUserSessionAssumedRole(ctx context.Context) ApiGetUserSessionAssumedRoleRequest

	// GetUserSessionAssumedRoleExecute executes the request
	//  @return Role
	GetUserSessionAssumedRoleExecute(r ApiGetUserSessionAssumedRoleRequest) (*Role, *http.Response, error)

	/*
		GetUserSessionAvailableRoles Get a list of available roles for this session

		Get a list of available roles for this session.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetUserSessionAvailableRolesRequest
	*/
	GetUserSessionAvailableRoles(ctx context.Context) ApiGetUserSessionAvailableRolesRequest

	// GetUserSessionAvailableRolesExecute executes the request
	//  @return Roles
	GetUserSessionAvailableRolesExecute(r ApiGetUserSessionAvailableRolesRequest) (*Roles, *http.Response, error)

	/*
		SaveUserSessionAssumedRole Set the assumed role for the current session

		Set the assumed role for the current session.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiSaveUserSessionAssumedRoleRequest
	*/
	SaveUserSessionAssumedRole(ctx context.Context) ApiSaveUserSessionAssumedRoleRequest

	// SaveUserSessionAssumedRoleExecute executes the request
	//  @return Role
	SaveUserSessionAssumedRoleExecute(r ApiSaveUserSessionAssumedRoleRequest) (*Role, *http.Response, error)
}

// UserSessionAPIService UserSessionAPI service
type UserSessionAPIService service

type ApiGetUserSessionAssumedRoleRequest struct {
	ctx        context.Context
	ApiService UserSessionAPI
}

func (r ApiGetUserSessionAssumedRoleRequest) Execute() (*Role, *http.Response, error) {
	return r.ApiService.GetUserSessionAssumedRoleExecute(r)
}

/*
GetUserSessionAssumedRole Get the assumed a role for the current session

Get the assumed a role for the current session.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetUserSessionAssumedRoleRequest
*/
func (a *UserSessionAPIService) GetUserSessionAssumedRole(ctx context.Context) ApiGetUserSessionAssumedRoleRequest {
	return ApiGetUserSessionAssumedRoleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Role
func (a *UserSessionAPIService) GetUserSessionAssumedRoleExecute(r ApiGetUserSessionAssumedRoleRequest) (*Role, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserSessionAPIService.GetUserSessionAssumedRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/session/assumedRole"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserSessionAvailableRolesRequest struct {
	ctx        context.Context
	ApiService UserSessionAPI
}

func (r ApiGetUserSessionAvailableRolesRequest) Execute() (*Roles, *http.Response, error) {
	return r.ApiService.GetUserSessionAvailableRolesExecute(r)
}

/*
GetUserSessionAvailableRoles Get a list of available roles for this session

Get a list of available roles for this session.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetUserSessionAvailableRolesRequest
*/
func (a *UserSessionAPIService) GetUserSessionAvailableRoles(ctx context.Context) ApiGetUserSessionAvailableRolesRequest {
	return ApiGetUserSessionAvailableRolesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Roles
func (a *UserSessionAPIService) GetUserSessionAvailableRolesExecute(r ApiGetUserSessionAvailableRolesRequest) (*Roles, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Roles
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserSessionAPIService.GetUserSessionAvailableRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/session/availableRoles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSaveUserSessionAssumedRoleRequest struct {
	ctx        context.Context
	ApiService UserSessionAPI
	role       *Role
}

func (r ApiSaveUserSessionAssumedRoleRequest) Role(role Role) ApiSaveUserSessionAssumedRoleRequest {
	r.role = &role
	return r
}

func (r ApiSaveUserSessionAssumedRoleRequest) Execute() (*Role, *http.Response, error) {
	return r.ApiService.SaveUserSessionAssumedRoleExecute(r)
}

/*
SaveUserSessionAssumedRole Set the assumed role for the current session

Set the assumed role for the current session.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSaveUserSessionAssumedRoleRequest
*/
func (a *UserSessionAPIService) SaveUserSessionAssumedRole(ctx context.Context) ApiSaveUserSessionAssumedRoleRequest {
	return ApiSaveUserSessionAssumedRoleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Role
func (a *UserSessionAPIService) SaveUserSessionAssumedRoleExecute(r ApiSaveUserSessionAssumedRoleRequest) (*Role, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserSessionAPIService.SaveUserSessionAssumedRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/session/assumedRole"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.role == nil {
		return localVarReturnValue, nil, reportError("role is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.role
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RoleNotAvailableError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------

type UserSessionAPIMock struct {
	GetUserSessionAssumedRoleCalls       *[]GetUserSessionAssumedRoleCall
	GetUserSessionAssumedRoleResponse    GetUserSessionAssumedRoleMockResponse
	GetUserSessionAvailableRolesCalls    *[]GetUserSessionAvailableRolesCall
	GetUserSessionAvailableRolesResponse GetUserSessionAvailableRolesMockResponse
	SaveUserSessionAssumedRoleCalls      *[]SaveUserSessionAssumedRoleCall
	SaveUserSessionAssumedRoleResponse   SaveUserSessionAssumedRoleMockResponse
}

func NewUserSessionAPIMock() UserSessionAPIMock {
	xGetUserSessionAssumedRoleCalls := make([]GetUserSessionAssumedRoleCall, 0)
	xGetUserSessionAvailableRolesCalls := make([]GetUserSessionAvailableRolesCall, 0)
	xSaveUserSessionAssumedRoleCalls := make([]SaveUserSessionAssumedRoleCall, 0)
	return UserSessionAPIMock{
		GetUserSessionAssumedRoleCalls:    &xGetUserSessionAssumedRoleCalls,
		GetUserSessionAvailableRolesCalls: &xGetUserSessionAvailableRolesCalls,
		SaveUserSessionAssumedRoleCalls:   &xSaveUserSessionAssumedRoleCalls,
	}
}

type GetUserSessionAssumedRoleMockResponse struct {
	Result   Role
	Response *http.Response
	Error    error
}

type GetUserSessionAssumedRoleCall struct {
}

func (mock UserSessionAPIMock) GetUserSessionAssumedRole(ctx context.Context) ApiGetUserSessionAssumedRoleRequest {
	return ApiGetUserSessionAssumedRoleRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock UserSessionAPIMock) GetUserSessionAssumedRoleExecute(r ApiGetUserSessionAssumedRoleRequest) (*Role, *http.Response, error) {
	p := GetUserSessionAssumedRoleCall{}
	*mock.GetUserSessionAssumedRoleCalls = append(*mock.GetUserSessionAssumedRoleCalls, p)
	return &mock.GetUserSessionAssumedRoleResponse.Result, mock.GetUserSessionAssumedRoleResponse.Response, mock.GetUserSessionAssumedRoleResponse.Error
}

type GetUserSessionAvailableRolesMockResponse struct {
	Result   Roles
	Response *http.Response
	Error    error
}

type GetUserSessionAvailableRolesCall struct {
}

func (mock UserSessionAPIMock) GetUserSessionAvailableRoles(ctx context.Context) ApiGetUserSessionAvailableRolesRequest {
	return ApiGetUserSessionAvailableRolesRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock UserSessionAPIMock) GetUserSessionAvailableRolesExecute(r ApiGetUserSessionAvailableRolesRequest) (*Roles, *http.Response, error) {
	p := GetUserSessionAvailableRolesCall{}
	*mock.GetUserSessionAvailableRolesCalls = append(*mock.GetUserSessionAvailableRolesCalls, p)
	return &mock.GetUserSessionAvailableRolesResponse.Result, mock.GetUserSessionAvailableRolesResponse.Response, mock.GetUserSessionAvailableRolesResponse.Error
}

type SaveUserSessionAssumedRoleMockResponse struct {
	Result   Role
	Response *http.Response
	Error    error
}

type SaveUserSessionAssumedRoleCall struct {
	Prole *Role
}

func (mock UserSessionAPIMock) SaveUserSessionAssumedRole(ctx context.Context) ApiSaveUserSessionAssumedRoleRequest {
	return ApiSaveUserSessionAssumedRoleRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock UserSessionAPIMock) SaveUserSessionAssumedRoleExecute(r ApiSaveUserSessionAssumedRoleRequest) (*Role, *http.Response, error) {
	p := SaveUserSessionAssumedRoleCall{
		Prole: r.role,
	}
	*mock.SaveUserSessionAssumedRoleCalls = append(*mock.SaveUserSessionAssumedRoleCalls, p)
	return &mock.SaveUserSessionAssumedRoleResponse.Result, mock.SaveUserSessionAssumedRoleResponse.Response, mock.SaveUserSessionAssumedRoleResponse.Error
}
