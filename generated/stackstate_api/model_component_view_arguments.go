/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// ComponentViewArguments struct for ComponentViewArguments
type ComponentViewArguments struct {
	Type                string `json:"_type"`
	ComponentIdentifier string `json:"componentIdentifier"`
	// Date/time representation in milliseconds since epoch (1970-01-01 00:00:00)
	QueryTime *int32 `json:"queryTime,omitempty"`
}

// NewComponentViewArguments instantiates a new ComponentViewArguments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentViewArguments(type_ string, componentIdentifier string) *ComponentViewArguments {
	this := ComponentViewArguments{}
	this.Type = type_
	this.ComponentIdentifier = componentIdentifier
	return &this
}

// NewComponentViewArgumentsWithDefaults instantiates a new ComponentViewArguments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentViewArgumentsWithDefaults() *ComponentViewArguments {
	this := ComponentViewArguments{}
	return &this
}

// GetType returns the Type field value
func (o *ComponentViewArguments) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ComponentViewArguments) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ComponentViewArguments) SetType(v string) {
	o.Type = v
}

// GetComponentIdentifier returns the ComponentIdentifier field value
func (o *ComponentViewArguments) GetComponentIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentIdentifier
}

// GetComponentIdentifierOk returns a tuple with the ComponentIdentifier field value
// and a boolean to check if the value has been set.
func (o *ComponentViewArguments) GetComponentIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentIdentifier, true
}

// SetComponentIdentifier sets field value
func (o *ComponentViewArguments) SetComponentIdentifier(v string) {
	o.ComponentIdentifier = v
}

// GetQueryTime returns the QueryTime field value if set, zero value otherwise.
func (o *ComponentViewArguments) GetQueryTime() int32 {
	if o == nil || o.QueryTime == nil {
		var ret int32
		return ret
	}
	return *o.QueryTime
}

// GetQueryTimeOk returns a tuple with the QueryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentViewArguments) GetQueryTimeOk() (*int32, bool) {
	if o == nil || o.QueryTime == nil {
		return nil, false
	}
	return o.QueryTime, true
}

// HasQueryTime returns a boolean if a field has been set.
func (o *ComponentViewArguments) HasQueryTime() bool {
	if o != nil && o.QueryTime != nil {
		return true
	}

	return false
}

// SetQueryTime gets a reference to the given int32 and assigns it to the QueryTime field.
func (o *ComponentViewArguments) SetQueryTime(v int32) {
	o.QueryTime = &v
}

func (o ComponentViewArguments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["componentIdentifier"] = o.ComponentIdentifier
	}
	if o.QueryTime != nil {
		toSerialize["queryTime"] = o.QueryTime
	}
	return json.Marshal(toSerialize)
}

type NullableComponentViewArguments struct {
	value *ComponentViewArguments
	isSet bool
}

func (v NullableComponentViewArguments) Get() *ComponentViewArguments {
	return v.value
}

func (v *NullableComponentViewArguments) Set(val *ComponentViewArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentViewArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentViewArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentViewArguments(val *ComponentViewArguments) *NullableComponentViewArguments {
	return &NullableComponentViewArguments{value: val, isSet: true}
}

func (v NullableComponentViewArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentViewArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
