/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// TopologyEvent struct for TopologyEvent
type TopologyEvent struct {
	Identifier         string                 `json:"identifier"`
	SourceIdentifier   *string                `json:"sourceIdentifier,omitempty"`
	ElementIdentifiers []string               `json:"elementIdentifiers"`
	Elements           []EventElement         `json:"elements"`
	Source             string                 `json:"source"`
	Category           EventCategory          `json:"category"`
	Description        *string                `json:"description,omitempty"`
	Name               string                 `json:"name"`
	SourceLinks        []SourceLink           `json:"sourceLinks"`
	Data               map[string]interface{} `json:"data"`
	EventType          string                 `json:"eventType"`
	EventTime          int64                  `json:"eventTime"`
	ProcessedTime      int64                  `json:"processedTime"`
	Tags               []EventTag             `json:"tags"`
}

// NewTopologyEvent instantiates a new TopologyEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopologyEvent(identifier string, elementIdentifiers []string, elements []EventElement, source string, category EventCategory, name string, sourceLinks []SourceLink, data map[string]interface{}, eventType string, eventTime int64, processedTime int64, tags []EventTag) *TopologyEvent {
	this := TopologyEvent{}
	this.Identifier = identifier
	this.ElementIdentifiers = elementIdentifiers
	this.Elements = elements
	this.Source = source
	this.Category = category
	this.Name = name
	this.SourceLinks = sourceLinks
	this.Data = data
	this.EventType = eventType
	this.EventTime = eventTime
	this.ProcessedTime = processedTime
	this.Tags = tags
	return &this
}

// NewTopologyEventWithDefaults instantiates a new TopologyEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopologyEventWithDefaults() *TopologyEvent {
	this := TopologyEvent{}
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *TopologyEvent) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *TopologyEvent) SetIdentifier(v string) {
	o.Identifier = v
}

// GetSourceIdentifier returns the SourceIdentifier field value if set, zero value otherwise.
func (o *TopologyEvent) GetSourceIdentifier() string {
	if o == nil || o.SourceIdentifier == nil {
		var ret string
		return ret
	}
	return *o.SourceIdentifier
}

// GetSourceIdentifierOk returns a tuple with the SourceIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetSourceIdentifierOk() (*string, bool) {
	if o == nil || o.SourceIdentifier == nil {
		return nil, false
	}
	return o.SourceIdentifier, true
}

// HasSourceIdentifier returns a boolean if a field has been set.
func (o *TopologyEvent) HasSourceIdentifier() bool {
	if o != nil && o.SourceIdentifier != nil {
		return true
	}

	return false
}

// SetSourceIdentifier gets a reference to the given string and assigns it to the SourceIdentifier field.
func (o *TopologyEvent) SetSourceIdentifier(v string) {
	o.SourceIdentifier = &v
}

// GetElementIdentifiers returns the ElementIdentifiers field value
func (o *TopologyEvent) GetElementIdentifiers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ElementIdentifiers
}

// GetElementIdentifiersOk returns a tuple with the ElementIdentifiers field value
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetElementIdentifiersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ElementIdentifiers, true
}

// SetElementIdentifiers sets field value
func (o *TopologyEvent) SetElementIdentifiers(v []string) {
	o.ElementIdentifiers = v
}

// GetElements returns the Elements field value
func (o *TopologyEvent) GetElements() []EventElement {
	if o == nil {
		var ret []EventElement
		return ret
	}

	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetElementsOk() ([]EventElement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Elements, true
}

// SetElements sets field value
func (o *TopologyEvent) SetElements(v []EventElement) {
	o.Elements = v
}

// GetSource returns the Source field value
func (o *TopologyEvent) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *TopologyEvent) SetSource(v string) {
	o.Source = v
}

// GetCategory returns the Category field value
func (o *TopologyEvent) GetCategory() EventCategory {
	if o == nil {
		var ret EventCategory
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetCategoryOk() (*EventCategory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *TopologyEvent) SetCategory(v EventCategory) {
	o.Category = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TopologyEvent) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TopologyEvent) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TopologyEvent) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *TopologyEvent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TopologyEvent) SetName(v string) {
	o.Name = v
}

// GetSourceLinks returns the SourceLinks field value
func (o *TopologyEvent) GetSourceLinks() []SourceLink {
	if o == nil {
		var ret []SourceLink
		return ret
	}

	return o.SourceLinks
}

// GetSourceLinksOk returns a tuple with the SourceLinks field value
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetSourceLinksOk() ([]SourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceLinks, true
}

// SetSourceLinks sets field value
func (o *TopologyEvent) SetSourceLinks(v []SourceLink) {
	o.SourceLinks = v
}

// GetData returns the Data field value
func (o *TopologyEvent) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *TopologyEvent) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetEventType returns the EventType field value
func (o *TopologyEvent) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *TopologyEvent) SetEventType(v string) {
	o.EventType = v
}

// GetEventTime returns the EventTime field value
func (o *TopologyEvent) GetEventTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetEventTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTime, true
}

// SetEventTime sets field value
func (o *TopologyEvent) SetEventTime(v int64) {
	o.EventTime = v
}

// GetProcessedTime returns the ProcessedTime field value
func (o *TopologyEvent) GetProcessedTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ProcessedTime
}

// GetProcessedTimeOk returns a tuple with the ProcessedTime field value
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetProcessedTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessedTime, true
}

// SetProcessedTime sets field value
func (o *TopologyEvent) SetProcessedTime(v int64) {
	o.ProcessedTime = v
}

// GetTags returns the Tags field value
func (o *TopologyEvent) GetTags() []EventTag {
	if o == nil {
		var ret []EventTag
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *TopologyEvent) GetTagsOk() ([]EventTag, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *TopologyEvent) SetTags(v []EventTag) {
	o.Tags = v
}

func (o TopologyEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	if o.SourceIdentifier != nil {
		toSerialize["sourceIdentifier"] = o.SourceIdentifier
	}
	if true {
		toSerialize["elementIdentifiers"] = o.ElementIdentifiers
	}
	if true {
		toSerialize["elements"] = o.Elements
	}
	if true {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["category"] = o.Category
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["sourceLinks"] = o.SourceLinks
	}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["eventTime"] = o.EventTime
	}
	if true {
		toSerialize["processedTime"] = o.ProcessedTime
	}
	if true {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableTopologyEvent struct {
	value *TopologyEvent
	isSet bool
}

func (v NullableTopologyEvent) Get() *TopologyEvent {
	return v.value
}

func (v *NullableTopologyEvent) Set(val *TopologyEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTopologyEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTopologyEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopologyEvent(val *TopologyEvent) *NullableTopologyEvent {
	return &NullableTopologyEvent{value: val, isSet: true}
}

func (v NullableTopologyEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopologyEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
