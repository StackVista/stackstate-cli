/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// SpanQuery struct for SpanQuery
type SpanQuery struct {
	Filter *SpanFilter      `json:"filter,omitempty"`
	SortBy []SpanSortOption `json:"sortBy,omitempty"`
}

// NewSpanQuery instantiates a new SpanQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanQuery() *SpanQuery {
	this := SpanQuery{}
	return &this
}

// NewSpanQueryWithDefaults instantiates a new SpanQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanQueryWithDefaults() *SpanQuery {
	this := SpanQuery{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *SpanQuery) GetFilter() SpanFilter {
	if o == nil || o.Filter == nil {
		var ret SpanFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQuery) GetFilterOk() (*SpanFilter, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *SpanQuery) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given SpanFilter and assigns it to the Filter field.
func (o *SpanQuery) SetFilter(v SpanFilter) {
	o.Filter = &v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *SpanQuery) GetSortBy() []SpanSortOption {
	if o == nil || o.SortBy == nil {
		var ret []SpanSortOption
		return ret
	}
	return o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQuery) GetSortByOk() ([]SpanSortOption, bool) {
	if o == nil || o.SortBy == nil {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *SpanQuery) HasSortBy() bool {
	if o != nil && o.SortBy != nil {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given []SpanSortOption and assigns it to the SortBy field.
func (o *SpanQuery) SetSortBy(v []SpanSortOption) {
	o.SortBy = v
}

func (o SpanQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.SortBy != nil {
		toSerialize["sortBy"] = o.SortBy
	}
	return json.Marshal(toSerialize)
}

type NullableSpanQuery struct {
	value *SpanQuery
	isSet bool
}

func (v NullableSpanQuery) Get() *SpanQuery {
	return v.value
}

func (v *NullableSpanQuery) Set(val *SpanQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanQuery(val *SpanQuery) *NullableSpanQuery {
	return &NullableSpanQuery{value: val, isSet: true}
}

func (v NullableSpanQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
