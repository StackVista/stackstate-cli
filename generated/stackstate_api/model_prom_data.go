/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// PromData - struct for PromData
type PromData struct {
	PromDataString *PromDataString
	PromMatrix     *PromMatrix
	PromScalar     *PromScalar
	PromVector     *PromVector
}

// PromDataStringAsPromData is a convenience function that returns PromDataString wrapped in PromData
func PromDataStringAsPromData(v *PromDataString) PromData {
	return PromData{
		PromDataString: v,
	}
}

// PromMatrixAsPromData is a convenience function that returns PromMatrix wrapped in PromData
func PromMatrixAsPromData(v *PromMatrix) PromData {
	return PromData{
		PromMatrix: v,
	}
}

// PromScalarAsPromData is a convenience function that returns PromScalar wrapped in PromData
func PromScalarAsPromData(v *PromScalar) PromData {
	return PromData{
		PromScalar: v,
	}
}

// PromVectorAsPromData is a convenience function that returns PromVector wrapped in PromData
func PromVectorAsPromData(v *PromVector) PromData {
	return PromData{
		PromVector: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PromData) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'matrix'
	if jsonDict["resultType"] == "matrix" {
		// try to unmarshal JSON data into PromMatrix
		err = json.Unmarshal(data, &dst.PromMatrix)
		if err == nil {
			return nil // data stored in dst.PromMatrix, return on the first match
		} else {
			dst.PromMatrix = nil
			return fmt.Errorf("Failed to unmarshal PromData as PromMatrix: %s", err.Error())
		}
	}

	// check if the discriminator value is 'scalar'
	if jsonDict["resultType"] == "scalar" {
		// try to unmarshal JSON data into PromScalar
		err = json.Unmarshal(data, &dst.PromScalar)
		if err == nil {
			return nil // data stored in dst.PromScalar, return on the first match
		} else {
			dst.PromScalar = nil
			return fmt.Errorf("Failed to unmarshal PromData as PromScalar: %s", err.Error())
		}
	}

	// check if the discriminator value is 'string'
	if jsonDict["resultType"] == "string" {
		// try to unmarshal JSON data into PromDataString
		err = json.Unmarshal(data, &dst.PromDataString)
		if err == nil {
			return nil // data stored in dst.PromDataString, return on the first match
		} else {
			dst.PromDataString = nil
			return fmt.Errorf("Failed to unmarshal PromData as PromDataString: %s", err.Error())
		}
	}

	// check if the discriminator value is 'vector'
	if jsonDict["resultType"] == "vector" {
		// try to unmarshal JSON data into PromVector
		err = json.Unmarshal(data, &dst.PromVector)
		if err == nil {
			return nil // data stored in dst.PromVector, return on the first match
		} else {
			dst.PromVector = nil
			return fmt.Errorf("Failed to unmarshal PromData as PromVector: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PromDataString'
	if jsonDict["resultType"] == "PromDataString" {
		// try to unmarshal JSON data into PromDataString
		err = json.Unmarshal(data, &dst.PromDataString)
		if err == nil {
			return nil // data stored in dst.PromDataString, return on the first match
		} else {
			dst.PromDataString = nil
			return fmt.Errorf("Failed to unmarshal PromData as PromDataString: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PromMatrix'
	if jsonDict["resultType"] == "PromMatrix" {
		// try to unmarshal JSON data into PromMatrix
		err = json.Unmarshal(data, &dst.PromMatrix)
		if err == nil {
			return nil // data stored in dst.PromMatrix, return on the first match
		} else {
			dst.PromMatrix = nil
			return fmt.Errorf("Failed to unmarshal PromData as PromMatrix: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PromScalar'
	if jsonDict["resultType"] == "PromScalar" {
		// try to unmarshal JSON data into PromScalar
		err = json.Unmarshal(data, &dst.PromScalar)
		if err == nil {
			return nil // data stored in dst.PromScalar, return on the first match
		} else {
			dst.PromScalar = nil
			return fmt.Errorf("Failed to unmarshal PromData as PromScalar: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PromVector'
	if jsonDict["resultType"] == "PromVector" {
		// try to unmarshal JSON data into PromVector
		err = json.Unmarshal(data, &dst.PromVector)
		if err == nil {
			return nil // data stored in dst.PromVector, return on the first match
		} else {
			dst.PromVector = nil
			return fmt.Errorf("Failed to unmarshal PromData as PromVector: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PromData) MarshalJSON() ([]byte, error) {
	if src.PromDataString != nil {
		return json.Marshal(&src.PromDataString)
	}

	if src.PromMatrix != nil {
		return json.Marshal(&src.PromMatrix)
	}

	if src.PromScalar != nil {
		return json.Marshal(&src.PromScalar)
	}

	if src.PromVector != nil {
		return json.Marshal(&src.PromVector)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PromData) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.PromDataString != nil {
		return obj.PromDataString
	}

	if obj.PromMatrix != nil {
		return obj.PromMatrix
	}

	if obj.PromScalar != nil {
		return obj.PromScalar
	}

	if obj.PromVector != nil {
		return obj.PromVector
	}

	// all schemas are nil
	return nil
}

type NullablePromData struct {
	value *PromData
	isSet bool
}

func (v NullablePromData) Get() *PromData {
	return v.value
}

func (v *NullablePromData) Set(val *PromData) {
	v.value = val
	v.isSet = true
}

func (v NullablePromData) IsSet() bool {
	return v.isSet
}

func (v *NullablePromData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromData(val *PromData) *NullablePromData {
	return &NullablePromData{value: val, isSet: true}
}

func (v NullablePromData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
