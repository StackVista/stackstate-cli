/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// SpanSortOption struct for SpanSortOption
type SpanSortOption struct {
	Field     SpanSortField     `json:"field"`
	Direction SpanSortDirection `json:"direction"`
}

// NewSpanSortOption instantiates a new SpanSortOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanSortOption(field SpanSortField, direction SpanSortDirection) *SpanSortOption {
	this := SpanSortOption{}
	this.Field = field
	this.Direction = direction
	return &this
}

// NewSpanSortOptionWithDefaults instantiates a new SpanSortOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanSortOptionWithDefaults() *SpanSortOption {
	this := SpanSortOption{}
	return &this
}

// GetField returns the Field field value
func (o *SpanSortOption) GetField() SpanSortField {
	if o == nil {
		var ret SpanSortField
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *SpanSortOption) GetFieldOk() (*SpanSortField, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *SpanSortOption) SetField(v SpanSortField) {
	o.Field = v
}

// GetDirection returns the Direction field value
func (o *SpanSortOption) GetDirection() SpanSortDirection {
	if o == nil {
		var ret SpanSortDirection
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *SpanSortOption) GetDirectionOk() (*SpanSortDirection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *SpanSortOption) SetDirection(v SpanSortDirection) {
	o.Direction = v
}

func (o SpanSortOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["field"] = o.Field
	}
	if true {
		toSerialize["direction"] = o.Direction
	}
	return json.Marshal(toSerialize)
}

type NullableSpanSortOption struct {
	value *SpanSortOption
	isSet bool
}

func (v NullableSpanSortOption) Get() *SpanSortOption {
	return v.value
}

func (v *NullableSpanSortOption) Set(val *SpanSortOption) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanSortOption) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanSortOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanSortOption(val *SpanSortOption) *NullableSpanSortOption {
	return &NullableSpanSortOption{value: val, isSet: true}
}

func (v NullableSpanSortOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanSortOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
