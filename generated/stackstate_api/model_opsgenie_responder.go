/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// OpsgenieResponder struct for OpsgenieResponder
type OpsgenieResponder struct {
	ResponderType OpsgenieResponderType `json:"responderType"`
	Responder     string                `json:"responder"`
}

// NewOpsgenieResponder instantiates a new OpsgenieResponder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpsgenieResponder(responderType OpsgenieResponderType, responder string) *OpsgenieResponder {
	this := OpsgenieResponder{}
	this.ResponderType = responderType
	this.Responder = responder
	return &this
}

// NewOpsgenieResponderWithDefaults instantiates a new OpsgenieResponder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpsgenieResponderWithDefaults() *OpsgenieResponder {
	this := OpsgenieResponder{}
	return &this
}

// GetResponderType returns the ResponderType field value
func (o *OpsgenieResponder) GetResponderType() OpsgenieResponderType {
	if o == nil {
		var ret OpsgenieResponderType
		return ret
	}

	return o.ResponderType
}

// GetResponderTypeOk returns a tuple with the ResponderType field value
// and a boolean to check if the value has been set.
func (o *OpsgenieResponder) GetResponderTypeOk() (*OpsgenieResponderType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponderType, true
}

// SetResponderType sets field value
func (o *OpsgenieResponder) SetResponderType(v OpsgenieResponderType) {
	o.ResponderType = v
}

// GetResponder returns the Responder field value
func (o *OpsgenieResponder) GetResponder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Responder
}

// GetResponderOk returns a tuple with the Responder field value
// and a boolean to check if the value has been set.
func (o *OpsgenieResponder) GetResponderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Responder, true
}

// SetResponder sets field value
func (o *OpsgenieResponder) SetResponder(v string) {
	o.Responder = v
}

func (o OpsgenieResponder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["responderType"] = o.ResponderType
	}
	if true {
		toSerialize["responder"] = o.Responder
	}
	return json.Marshal(toSerialize)
}

type NullableOpsgenieResponder struct {
	value *OpsgenieResponder
	isSet bool
}

func (v NullableOpsgenieResponder) Get() *OpsgenieResponder {
	return v.value
}

func (v *NullableOpsgenieResponder) Set(val *OpsgenieResponder) {
	v.value = val
	v.isSet = true
}

func (v NullableOpsgenieResponder) IsSet() bool {
	return v.isSet
}

func (v *NullableOpsgenieResponder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpsgenieResponder(val *OpsgenieResponder) *NullableOpsgenieResponder {
	return &NullableOpsgenieResponder{value: val, isSet: true}
}

func (v NullableOpsgenieResponder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpsgenieResponder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
