/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// QueryViewArguments struct for QueryViewArguments
type QueryViewArguments struct {
	Type  string `json:"_type"`
	Query string `json:"query"`
	// Date/time representation in milliseconds since epoch (1970-01-01 00:00:00)
	QueryTime *int32 `json:"queryTime,omitempty"`
}

// NewQueryViewArguments instantiates a new QueryViewArguments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryViewArguments(type_ string, query string) *QueryViewArguments {
	this := QueryViewArguments{}
	this.Type = type_
	this.Query = query
	return &this
}

// NewQueryViewArgumentsWithDefaults instantiates a new QueryViewArguments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryViewArgumentsWithDefaults() *QueryViewArguments {
	this := QueryViewArguments{}
	return &this
}

// GetType returns the Type field value
func (o *QueryViewArguments) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *QueryViewArguments) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *QueryViewArguments) SetType(v string) {
	o.Type = v
}

// GetQuery returns the Query field value
func (o *QueryViewArguments) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *QueryViewArguments) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *QueryViewArguments) SetQuery(v string) {
	o.Query = v
}

// GetQueryTime returns the QueryTime field value if set, zero value otherwise.
func (o *QueryViewArguments) GetQueryTime() int32 {
	if o == nil || o.QueryTime == nil {
		var ret int32
		return ret
	}
	return *o.QueryTime
}

// GetQueryTimeOk returns a tuple with the QueryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryViewArguments) GetQueryTimeOk() (*int32, bool) {
	if o == nil || o.QueryTime == nil {
		return nil, false
	}
	return o.QueryTime, true
}

// HasQueryTime returns a boolean if a field has been set.
func (o *QueryViewArguments) HasQueryTime() bool {
	if o != nil && o.QueryTime != nil {
		return true
	}

	return false
}

// SetQueryTime gets a reference to the given int32 and assigns it to the QueryTime field.
func (o *QueryViewArguments) SetQueryTime(v int32) {
	o.QueryTime = &v
}

func (o QueryViewArguments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["query"] = o.Query
	}
	if o.QueryTime != nil {
		toSerialize["queryTime"] = o.QueryTime
	}
	return json.Marshal(toSerialize)
}

type NullableQueryViewArguments struct {
	value *QueryViewArguments
	isSet bool
}

func (v NullableQueryViewArguments) Get() *QueryViewArguments {
	return v.value
}

func (v *NullableQueryViewArguments) Set(val *QueryViewArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryViewArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryViewArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryViewArguments(val *QueryViewArguments) *NullableQueryViewArguments {
	return &NullableQueryViewArguments{value: val, isSet: true}
}

func (v NullableQueryViewArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryViewArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
