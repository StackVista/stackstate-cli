/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// Vector struct for Vector
type Vector struct {
	ResultType string `json:"resultType"`
	Result []VectorResult `json:"result"`
}

// NewVector instantiates a new Vector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVector(resultType string, result []VectorResult) *Vector {
	this := Vector{}
	this.ResultType = resultType
	this.Result = result
	return &this
}

// NewVectorWithDefaults instantiates a new Vector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVectorWithDefaults() *Vector {
	this := Vector{}
	return &this
}

// GetResultType returns the ResultType field value
func (o *Vector) GetResultType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResultType
}

// GetResultTypeOk returns a tuple with the ResultType field value
// and a boolean to check if the value has been set.
func (o *Vector) GetResultTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultType, true
}

// SetResultType sets field value
func (o *Vector) SetResultType(v string) {
	o.ResultType = v
}

// GetResult returns the Result field value
func (o *Vector) GetResult() []VectorResult {
	if o == nil {
		var ret []VectorResult
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *Vector) GetResultOk() ([]VectorResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Result, true
}

// SetResult sets field value
func (o *Vector) SetResult(v []VectorResult) {
	o.Result = v
}

func (o Vector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resultType"] = o.ResultType
	}
	if true {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullableVector struct {
	value *Vector
	isSet bool
}

func (v NullableVector) Get() *Vector {
	return v.value
}

func (v *NullableVector) Set(val *Vector) {
	v.value = val
	v.isSet = true
}

func (v NullableVector) IsSet() bool {
	return v.isSet
}

func (v *NullableVector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVector(val *Vector) *NullableVector {
	return &NullableVector{value: val, isSet: true}
}

func (v NullableVector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


