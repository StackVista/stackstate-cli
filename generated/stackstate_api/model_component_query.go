/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// ComponentQuery struct for ComponentQuery
type ComponentQuery struct {
	// Set of key/value pairs providing extra contextual information. Keys are unique.
	ResourceAttributes map[string]string `json:"resourceAttributes"`
	// Date/time representation in milliseconds since epoch (1970-01-01 00:00:00)
	Instant *int32 `json:"instant,omitempty"`
}

// NewComponentQuery instantiates a new ComponentQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentQuery(resourceAttributes map[string]string) *ComponentQuery {
	this := ComponentQuery{}
	this.ResourceAttributes = resourceAttributes
	return &this
}

// NewComponentQueryWithDefaults instantiates a new ComponentQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentQueryWithDefaults() *ComponentQuery {
	this := ComponentQuery{}
	return &this
}

// GetResourceAttributes returns the ResourceAttributes field value
func (o *ComponentQuery) GetResourceAttributes() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.ResourceAttributes
}

// GetResourceAttributesOk returns a tuple with the ResourceAttributes field value
// and a boolean to check if the value has been set.
func (o *ComponentQuery) GetResourceAttributesOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceAttributes, true
}

// SetResourceAttributes sets field value
func (o *ComponentQuery) SetResourceAttributes(v map[string]string) {
	o.ResourceAttributes = v
}

// GetInstant returns the Instant field value if set, zero value otherwise.
func (o *ComponentQuery) GetInstant() int32 {
	if o == nil || o.Instant == nil {
		var ret int32
		return ret
	}
	return *o.Instant
}

// GetInstantOk returns a tuple with the Instant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentQuery) GetInstantOk() (*int32, bool) {
	if o == nil || o.Instant == nil {
		return nil, false
	}
	return o.Instant, true
}

// HasInstant returns a boolean if a field has been set.
func (o *ComponentQuery) HasInstant() bool {
	if o != nil && o.Instant != nil {
		return true
	}

	return false
}

// SetInstant gets a reference to the given int32 and assigns it to the Instant field.
func (o *ComponentQuery) SetInstant(v int32) {
	o.Instant = &v
}

func (o ComponentQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resourceAttributes"] = o.ResourceAttributes
	}
	if o.Instant != nil {
		toSerialize["instant"] = o.Instant
	}
	return json.Marshal(toSerialize)
}

type NullableComponentQuery struct {
	value *ComponentQuery
	isSet bool
}

func (v NullableComponentQuery) Get() *ComponentQuery {
	return v.value
}

func (v *NullableComponentQuery) Set(val *ComponentQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentQuery(val *ComponentQuery) *NullableComponentQuery {
	return &NullableComponentQuery{value: val, isSet: true}
}

func (v NullableComponentQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
