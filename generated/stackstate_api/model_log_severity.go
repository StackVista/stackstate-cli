/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// LogSeverity the model 'LogSeverity'
type LogSeverity string

// List of LogSeverity
const (
	LOGSEVERITY_WARNING LogSeverity = "WARNING"
	LOGSEVERITY_ERROR   LogSeverity = "ERROR"
	LOGSEVERITY_OTHER   LogSeverity = "OTHER"
)

// All allowed values of LogSeverity enum
var AllowedLogSeverityEnumValues = []LogSeverity{
	"WARNING",
	"ERROR",
	"OTHER",
}

func (v *LogSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogSeverity(value)
	for _, existing := range AllowedLogSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogSeverity", value)
}

// NewLogSeverityFromValue returns a pointer to a valid LogSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogSeverityFromValue(v string) (*LogSeverity, error) {
	ev := LogSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogSeverity: valid values are %v", v, AllowedLogSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogSeverity) IsValid() bool {
	for _, existing := range AllowedLogSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogSeverity value
func (v LogSeverity) Ptr() *LogSeverity {
	return &v
}

type NullableLogSeverity struct {
	value *LogSeverity
	isSet bool
}

func (v NullableLogSeverity) Get() *LogSeverity {
	return v.value
}

func (v *NullableLogSeverity) Set(val *LogSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableLogSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableLogSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogSeverity(val *LogSeverity) *NullableLogSeverity {
	return &NullableLogSeverity{value: val, isSet: true}
}

func (v NullableLogSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
