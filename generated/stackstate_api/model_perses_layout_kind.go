/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// PersesLayoutKind Defines the layout type. Currently, only 'Grid' is supported.
type PersesLayoutKind string

// List of PersesLayoutKind
const (
	PERSESLAYOUTKIND_GRID PersesLayoutKind = "Grid"
)

// All allowed values of PersesLayoutKind enum
var AllowedPersesLayoutKindEnumValues = []PersesLayoutKind{
	"Grid",
}

func (v *PersesLayoutKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PersesLayoutKind(value)
	for _, existing := range AllowedPersesLayoutKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PersesLayoutKind", value)
}

// NewPersesLayoutKindFromValue returns a pointer to a valid PersesLayoutKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPersesLayoutKindFromValue(v string) (*PersesLayoutKind, error) {
	ev := PersesLayoutKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PersesLayoutKind: valid values are %v", v, AllowedPersesLayoutKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PersesLayoutKind) IsValid() bool {
	for _, existing := range AllowedPersesLayoutKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PersesLayoutKind value
func (v PersesLayoutKind) Ptr() *PersesLayoutKind {
	return &v
}

type NullablePersesLayoutKind struct {
	value *PersesLayoutKind
	isSet bool
}

func (v NullablePersesLayoutKind) Get() *PersesLayoutKind {
	return v.value
}

func (v *NullablePersesLayoutKind) Set(val *PersesLayoutKind) {
	v.value = val
	v.isSet = true
}

func (v NullablePersesLayoutKind) IsSet() bool {
	return v.isSet
}

func (v *NullablePersesLayoutKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersesLayoutKind(val *PersesLayoutKind) *NullablePersesLayoutKind {
	return &NullablePersesLayoutKind{value: val, isSet: true}
}

func (v NullablePersesLayoutKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersesLayoutKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
