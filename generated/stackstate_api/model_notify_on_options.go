/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// NotifyOnOptions the model 'NotifyOnOptions'
type NotifyOnOptions string

// List of NotifyOnOptions
const (
	NOTIFYONOPTIONS_CRITICAL               NotifyOnOptions = "CRITICAL"
	NOTIFYONOPTIONS_DEVIATING_AND_CRITICAL NotifyOnOptions = "DEVIATING_AND_CRITICAL"
)

// All allowed values of NotifyOnOptions enum
var AllowedNotifyOnOptionsEnumValues = []NotifyOnOptions{
	"CRITICAL",
	"DEVIATING_AND_CRITICAL",
}

func (v *NotifyOnOptions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotifyOnOptions(value)
	for _, existing := range AllowedNotifyOnOptionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotifyOnOptions", value)
}

// NewNotifyOnOptionsFromValue returns a pointer to a valid NotifyOnOptions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotifyOnOptionsFromValue(v string) (*NotifyOnOptions, error) {
	ev := NotifyOnOptions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotifyOnOptions: valid values are %v", v, AllowedNotifyOnOptionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotifyOnOptions) IsValid() bool {
	for _, existing := range AllowedNotifyOnOptionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotifyOnOptions value
func (v NotifyOnOptions) Ptr() *NotifyOnOptions {
	return &v
}

type NullableNotifyOnOptions struct {
	value *NotifyOnOptions
	isSet bool
}

func (v NullableNotifyOnOptions) Get() *NotifyOnOptions {
	return v.value
}

func (v *NullableNotifyOnOptions) Set(val *NotifyOnOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyOnOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyOnOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyOnOptions(val *NotifyOnOptions) *NullableNotifyOnOptions {
	return &NullableNotifyOnOptions{value: val, isSet: true}
}

func (v NullableNotifyOnOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyOnOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
