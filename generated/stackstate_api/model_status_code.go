/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// StatusCode the model 'StatusCode'
type StatusCode string

// List of StatusCode
const (
	STATUSCODE_UNSET StatusCode = "Unset"
	STATUSCODE_ERROR StatusCode = "Error"
	STATUSCODE_OK    StatusCode = "Ok"
)

// All allowed values of StatusCode enum
var AllowedStatusCodeEnumValues = []StatusCode{
	"Unset",
	"Error",
	"Ok",
}

func (v *StatusCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusCode(value)
	for _, existing := range AllowedStatusCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusCode", value)
}

// NewStatusCodeFromValue returns a pointer to a valid StatusCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusCodeFromValue(v string) (*StatusCode, error) {
	ev := StatusCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusCode: valid values are %v", v, AllowedStatusCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusCode) IsValid() bool {
	for _, existing := range AllowedStatusCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusCode value
func (v StatusCode) Ptr() *StatusCode {
	return &v
}

type NullableStatusCode struct {
	value *StatusCode
	isSet bool
}

func (v NullableStatusCode) Get() *StatusCode {
	return v.value
}

func (v *NullableStatusCode) Set(val *StatusCode) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusCode) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusCode(val *StatusCode) *NullableStatusCode {
	return &NullableStatusCode{value: val, isSet: true}
}

func (v NullableStatusCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
