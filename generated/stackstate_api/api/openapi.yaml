openapi: 3.0.3
info:
  contact:
    email: info@stackstate.com
    name: StackState
    url: https://stackstate.com
  description: StackState's API specification
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: StackState API
  version: 0.0.1
  x-logo:
    url: https://raw.githubusercontent.com/StackVista/stackstate-docs/master/resources/logo/StackState-Color-padding.png
    href: '#top'
externalDocs:
  description: Documentation
  url: https://docs.stackstate.com/
servers:
- url: /
security:
- ApiToken: []
- ServiceToken: []
- ServiceBearer: []
paths:
  /import:
    post:
      description: Import StackState Templated JSON (STJ) setting nodes.
      operationId: importSettings
      parameters:
      - in: query
        name: timeoutSeconds
        required: false
        schema:
          format: int64
          type: integer
      - in: query
        name: namespace
        required: false
        schema:
          type: string
      - in: query
        name: unlocked
        required: false
        schema:
          enum:
          - fail
          - skip
          - overwrite
          type: string
      requestBody:
        content:
          plain/text:
            schema:
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: object
                type: array
          description: The full description of all imported nodes.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Failure to parse the STJ.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Import settings
      tags:
      - import
  /export:
    post:
      description: Export StackState Templated JSON (STJ) setting nodes.
      operationId: exportSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/export'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Full description of all nodes.
      summary: Export settings
      tags:
      - export
  /node:
    get:
      description: list all node types
      operationId: nodeListTypes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeTypes'
          description: listing of all node types
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Node API
      tags:
      - node
  /node/{nodeType}:
    get:
      description: list all nodes of that type
      operationId: typeList
      parameters:
      - in: path
        name: nodeType
        required: true
        schema:
          type: string
      - in: query
        name: namespace
        required: false
        schema:
          type: string
      - in: query
        name: ownedBy
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeList'
          description: list of mentioned type nodes
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Node type API
      tags:
      - node
  /node/{nodeType}/{nodeId}:
    delete:
      description: Delete a locked node
      operationId: delete
      parameters:
      - in: path
        name: nodeType
        required: true
        schema:
          type: string
      - in: path
        name: nodeId
        required: true
        schema:
          format: int64
          type: integer
      - in: query
        name: timeoutSeconds
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: Node deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Node deletion API
      tags:
      - node
  /node/{nodeType}/{nodeId}/unlock:
    post:
      description: Unlock a locked node
      operationId: unlock
      parameters:
      - in: path
        name: nodeType
        required: true
        schema:
          type: string
      - in: path
        name: nodeId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: Unlocked node
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Node unlock API
      tags:
      - node
  /stackpack:
    get:
      description: list of stackpack
      operationId: stackpackList
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackpackList'
          description: Get list of stackpack
        "400":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: bad request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: StackPack API
      tags:
      - stackpack
    post:
      description: upload a StackPack
      operationId: stackpackUpload
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StackPackUpload'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackPack'
          description: Upload success. Processing happens asynchronously.
        "400":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: bad request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: StackPack API
      tags:
      - stackpack
  /stackpack/{stackName}/provision:
    post:
      description: Provision details
      operationId: provisionDetails
      parameters:
      - in: path
        name: stackName
        required: true
        schema:
          $ref: '#/components/schemas/stackName'
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionResponse'
          description: Successful provisioning of the stackpack
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Provision API
      tags:
      - stackpack
  /stackpack/{stackName}/deprovision/{stackId}:
    post:
      description: Provision details
      operationId: provisionUninstall
      parameters:
      - in: path
        name: stackName
        required: true
        schema:
          type: string
      - in: path
        name: stackId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successfully uninstalled
        "400":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: bad request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Provision API
      tags:
      - stackpack
  /stackpack/{stackName}/upgrade:
    post:
      description: Upgrade stackpack
      operationId: upgradeStackPack
      parameters:
      - in: path
        name: stackName
        required: true
        schema:
          type: string
      - allowReserved: true
        in: query
        name: unlocked
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Upgrade API
      tags:
      - stackpack
  /stackpack/{stackpackName}/confirm-manual-steps/{stackpackInstanceId}:
    post:
      description: Confirm manual steps of the stackpack
      operationId: confirmManualSteps
      parameters:
      - in: path
        name: stackpackName
        required: true
        schema:
          type: string
      - in: path
        name: stackpackInstanceId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Confirm manual steps
      tags:
      - stackpack
  /monitors:
    get:
      description: List all available monitor in the system
      operationId: getAllMonitors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorList'
          description: List of all available monitors
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: List monitors
      tags:
      - monitor
  /monitors/{monitorIdOrUrn}:
    delete:
      description: Deletes existing monitor
      operationId: deleteMonitor
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      responses:
        "204":
          description: Return ok
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Delete a monitor
      tags:
      - monitor
    get:
      description: Returns a monitor full representation
      operationId: getMonitor
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: Full representation of a monitor
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Get a monitor
      tags:
      - monitor
    patch:
      description: Performs a patch on the monitor base properties.
      operationId: patchMonitor
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      requestBody:
        $ref: '#/components/requestBodies/monitorPatch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: Full representation of a monitor
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorSaveError'
          description: monitor could not be saved in the database
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Update some monitor properties
      tags:
      - monitor
  /monitors/{monitorIdOrUrn}/run:
    post:
      description: "Performs a run of a monitor. If 'dryRun' is set, topology state\
        \ will not be modified."
      operationId: runMonitor
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      - description: "If set, the topology state will not be modified"
        in: query
        name: dryRun
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorRunResult'
          description: Full representation of the result of a monitor run
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Run a monitor
      tags:
      - monitor
  /monitors/{monitorIdOrUrn}/status:
    get:
      description: Returns a monitor full representation with the stream status information
      operationId: getMonitorWithStatus
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorStatus'
          description: Full representation of a monitor with status
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Get a monitor with stream information
      tags:
      - monitor
  /user/profile:
    get:
      description: Get current user profile.
      operationId: getCurrentUserProfile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: User Profile
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
          description: Get User Profile Error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get current user profile
      tags:
      - userProfile
    put:
      description: Save current user profile.
      operationId: saveCurrentUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: User Profile
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileSaveError'
          description: Save User Profile Error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Save current user profile
      tags:
      - userProfile
  /user/profile/tokens:
    get:
      description: Get all API token of the logged-in user.
      operationId: getCurrentUserApiTokens
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiToken'
                type: array
          description: Api Token
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get current user's API tokens
      tags:
      - apiToken
  /events:
    post:
      description: Gets you a list of events that exist for topology and time selections.
      operationId: getEvents
      requestBody:
        $ref: '#/components/requestBodies/EventListBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventItemsWithTotal'
          description: Event API
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: Get Events Topology Overflow Error Validation Error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get events
      tags:
      - event
  /events/{eventId}:
    get:
      description: Retrieves a specific event by its identifier.
      operationId: getEvent
      parameters:
      - description: The Identifier of an event.
        in: path
        name: eventId
        required: true
        schema:
          $ref: '#/components/schemas/EventId'
      - in: query
        name: startTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: endTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: playHeadTimestampMs
        schema:
          format: instant
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyEvent'
          description: Event
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: Get Event Validation Error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventNotFoundError'
          description: Error when retrieving an event
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get single event
      tags:
      - event
  /eventTypes:
    get:
      description: Get a list of event types for a certain STQL query.
      operationId: getEventTypes
      parameters:
      - in: query
        name: startTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: endTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: topologyQuery
        required: true
        schema:
          type: string
      - in: query
        name: rootCauseMode
        schema:
          $ref: '#/components/schemas/RootCauseMode'
      - in: query
        name: playHeadTimestampMs
        schema:
          format: instant
          type: integer
      - explode: false
        in: query
        name: eventTypes
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: The category labels of an event.
        explode: false
        in: query
        name: eventCategories
        required: false
        schema:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
        style: pipeDelimited
      - explode: false
        in: query
        name: eventSources
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - explode: false
        in: query
        name: eventTags
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - in: query
        name: match
        required: false
        schema:
          default: ""
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringItemsWithTotal'
          description: Event field suggestions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: "Get events topology overflow error, validation error"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get event types
      tags:
      - event
  /eventSources:
    get:
      description: Get a list of event sources.
      operationId: getEventSources
      parameters:
      - in: query
        name: startTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: endTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: topologyQuery
        required: true
        schema:
          type: string
      - in: query
        name: rootCauseMode
        schema:
          $ref: '#/components/schemas/RootCauseMode'
      - in: query
        name: playHeadTimestampMs
        schema:
          format: instant
          type: integer
      - explode: false
        in: query
        name: eventTypes
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: The category labels of an event.
        explode: false
        in: query
        name: eventCategories
        required: false
        schema:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
        style: pipeDelimited
      - explode: false
        in: query
        name: eventSources
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - explode: false
        in: query
        name: eventTags
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - in: query
        name: match
        schema:
          default: ""
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringItemsWithTotal'
          description: Event field suggestions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: "Get events topology overflow error, validation error"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get event sources
      tags:
      - event
  /eventTags:
    get:
      description: Gets a list of tags that exist in a list of events.
      operationId: getEventTags
      parameters:
      - in: query
        name: startTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: endTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: topologyQuery
        required: true
        schema:
          type: string
      - in: query
        name: rootCauseMode
        schema:
          $ref: '#/components/schemas/RootCauseMode'
      - in: query
        name: playHeadTimestampMs
        schema:
          format: instant
          type: integer
      - explode: false
        in: query
        name: eventTypes
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: The category labels of an event.
        explode: false
        in: query
        name: eventCategories
        required: false
        schema:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
        style: pipeDelimited
      - explode: false
        in: query
        name: eventSources
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - explode: false
        in: query
        name: eventTags
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - in: query
        name: match
        schema:
          default: ""
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringItemsWithTotal'
          description: Event field suggestions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: "Get events topology overflow error, validation error"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get event tags
      tags:
      - event
  /synchronization/health/streams:
    get:
      description: Status overview of the health synchronization streams.
      operationId: getHealthSynchronizationStreamsOverview
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamList'
          description: List of existing health streams
      summary: List health sync streams
      tags:
      - healthSynchronization
  /synchronization/health/streams/{healthStreamUrn}/status:
    get:
      description: Status overview of a single health synchronization stream
      operationId: getHealthSynchronizationStreamStatus
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamStatus'
          description: Status data
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamNotFound'
          description: Error when retrieving health stream
      summary: Get health sync stream status
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
  /synchronization/health/streams/{healthStreamUrn}/clearErrors:
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
    post:
      description: Clear all errors for a stream and its sub-streams.
      operationId: postHealthSynchronizationStreamClearErrors
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Return ok (but no content)
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamNotFound'
          description: Error when retrieving health stream
      summary: Clear health sync stream errors
      tags:
      - healthSynchronization
  /synchronization/health/streams/{healthStreamUrn}:
    delete:
      description: Delete a health synchronization stream. Deletion will not be immediate.
      operationId: deleteHealthSynchronizationStream
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Return ok (but no content)
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamNotFound'
          description: Error when retrieving health stream
      summary: Delete health sync stream
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
  /synchronization/health/streams/{healthStreamUrn}/substreams:
    get:
      description: Overview of all sub-streams in a certain health stream.
      operationId: getHealthSynchronizationSubStreamOverview
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubStreamList'
          description: List of substreams
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamNotFound'
          description: Error when retrieving health stream
      summary: List health sync sub-streams
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
  /synchronization/health/streams/{healthStreamUrn}/topologyMatches:
    get:
      description: Overview of check-states matched to topology on the main stream.
      operationId: getHealthSynchronizationStreamTopologyMatches
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyMatchResult'
          description: Topology matches
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSubStreamError'
          description: Error when retrieving health sub stream
      summary: List health sync stream check-states
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
  /synchronization/health/streams/{healthStreamUrn}/substreams/{healthSyncSubStreamId}/status:
    get:
      description: Status overview of a single health synchronization sub stream
      operationId: getHealthSynchronizationSubStreamStatus
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      - description: Health synchronization sub stream id.
        in: path
        name: healthSyncSubStreamId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSubStreamStatus'
          description: Sub stream status
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSubStreamError'
          description: Error when retrieving health sub stream
      summary: Get health sync sub-stream status
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
    - description: Health synchronization sub stream id.
      in: path
      name: healthSyncSubStreamId
      required: true
      schema:
        type: string
  /synchronization/health/streams/{healthStreamUrn}/substreams/{healthSyncSubStreamId}/topologyMatches:
    get:
      description: Overview of check-states matched to topology on the main stream.
      operationId: getHealthSynchronizationSubStreamTopologyMatches
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      - description: Health synchronization sub stream id.
        in: path
        name: healthSyncSubStreamId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyMatchResult'
          description: Topology matches for a specified sub stream
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSubStreamError'
          description: Error when retrieving health sub stream
      summary: List health sync sub-stream check-states
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
    - description: Health synchronization sub stream id.
      in: path
      name: healthSyncSubStreamId
      required: true
      schema:
        type: string
  /synchronization/topology/streams:
    get:
      description: Overview of the topology synchronization streams
      operationId: getTopologySynchronizationStreams
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyStreamList'
          description: List of existing topology streams
      summary: Overview of the topology synchronization streams
      tags:
      - topologySynchronization
  /synchronization/topology/streams/sync:
    get:
      description: "Overview of a specific Topology Stream, queried by node id or\
        \ sync identifier"
      operationId: getTopologySynchronizationStreamById
      parameters:
      - allowReserved: true
        in: query
        name: identifier
        required: true
        schema:
          type: string
      - allowReserved: false
        in: query
        name: identifierType
        required: true
        schema:
          $ref: '#/components/schemas/IdentifierType'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyStreamListItemWithErrorDetails'
          description: A specific topology stream
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSyncIdentifier'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologySyncError'
          description: Sync with given identifier not found
      summary: "Overview of a specific Topology Stream, queried by node id or sync\
        \ identifier"
      tags:
      - topologySynchronization
    parameters:
    - allowReserved: true
      in: query
      name: identifier
      required: true
      schema:
        type: string
    - allowReserved: false
      in: query
      name: identifierType
      required: true
      schema:
        $ref: '#/components/schemas/IdentifierType'
  /synchronization/topology/streams/status:
    get:
      description: "Metrics of a specific Topology Stream, queried by node id"
      operationId: getTopologySynchronizationStreamStatusById
      parameters:
      - allowReserved: true
        in: query
        name: identifier
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyStreamMetrics'
          description: A specific topology stream metrics
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSyncIdentifier'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologySyncError'
          description: Sync with given identifier not found
      summary: "Metrics of a specific Topology Stream, queried by node id"
      tags:
      - topologySynchronization
    parameters:
    - allowReserved: true
      in: query
      name: identifier
      required: true
      schema:
        type: string
  /synchronization/topology/streams/clearErrors:
    parameters:
    - allowReserved: true
      in: query
      name: identifier
      required: true
      schema:
        type: string
    - allowReserved: false
      in: query
      name: identifierType
      required: true
      schema:
        $ref: '#/components/schemas/IdentifierType'
    post:
      description: Clear all the errors related to a specific sync
      operationId: postTopologySynchronizationStreamClearErrors
      parameters:
      - allowReserved: true
        in: query
        name: identifier
        required: true
        schema:
          type: string
      - allowReserved: false
        in: query
        name: identifierType
        required: true
        schema:
          $ref: '#/components/schemas/IdentifierType'
      responses:
        "204":
          description: Return ok (but no content)
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSyncIdentifier'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologySyncError'
          description: Sync with given identifier not found
      summary: Clear all the errors related to a specific sync
      tags:
      - topologySynchronization
  /script/execute:
    post:
      description: Execute a StackState Scripting Language or Template Language script
        with arbitrary arguments.
      operationId: scriptExecute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteScriptRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteScriptResponse'
          description: Result of executing the script.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteScriptError'
          description: Error occurred while executing script.
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteScriptTimeoutError'
          description: Script timed out.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Execute script
      tags:
      - scripting
  /server/info:
    get:
      description: "Get information of the StackState information, such as version,\
        \ deployment mode, etc."
      operationId: serverInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfo'
          description: Server information
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get server info
      tags:
      - server
  /security/tokens:
    get:
      description: Get service tokens.
      operationId: getServiceTokens
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ServiceToken'
                type: array
          description: Service Tokens
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get service tokens
      tags:
      - serviceToken
    post:
      description: Create new service token.
      operationId: createNewServiceToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewServiceTokenRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTokenCreatedResponse'
          description: The newly created service token
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTokenCreateError'
          description: Create service token error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Create new service token
      tags:
      - serviceToken
  /security/tokens/{serviceTokenId}:
    delete:
      description: Delete service token.
      operationId: deleteServiceToken
      parameters:
      - description: The identifier of a service token
        in: path
        name: serviceTokenId
        required: true
        schema:
          $ref: '#/components/schemas/ServiceTokenId'
      responses:
        "204":
          description: Return ok (but no content)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Delete service token
      tags:
      - serviceToken
  /security/permissions/list:
    get:
      description: Get a list of available permissions
      operationId: getPermissions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permissions'
          description: A list of permissions
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: List permissions
      tags:
      - permissions
  /security/permissions/{subject}:
    delete:
      description: Revoke permissions of a subject
      operationId: revokePermissions
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          $ref: '#/components/schemas/Subject'
      - in: query
        name: resource
        schema:
          $ref: '#/components/schemas/Resource'
      - in: query
        name: permission
        schema:
          $ref: '#/components/schemas/Permission'
      responses:
        "200":
          description: Permission was revoked.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Revoke permissions
      tags:
      - permissions
    get:
      description: Describe permissions granted to a subject
      operationId: describePermissions
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          $ref: '#/components/schemas/Subject'
      - in: query
        name: resource
        schema:
          $ref: '#/components/schemas/Resource'
      - in: query
        name: permission
        schema:
          $ref: '#/components/schemas/Permission'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDescription'
          description: A permission description for a subject
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Describe permissions
      tags:
      - permissions
    post:
      description: Grant permissions to a subject
      operationId: grantPermissions
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          $ref: '#/components/schemas/Subject'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantPermission'
        required: true
      responses:
        "200":
          description: Permission was granted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Grant permissions
      tags:
      - permissions
  /security/subjects:
    get:
      description: List all subjects and their scopes
      operationId: listSubjects
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectList'
          description: Subject list
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: List subjects
      tags:
      - subject
  /security/subjects/{subject}:
    delete:
      description: Remove a security subject
      operationId: deleteSubject
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          $ref: '#/components/schemas/Subject'
      responses:
        "200":
          description: Subject deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Delete a subject
      tags:
      - subject
    get:
      description: Describe a subject and its scope
      operationId: getSubject
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          $ref: '#/components/schemas/Subject'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectConfig'
          description: Subject config
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get subject
      tags:
      - subject
    put:
      description: Create a new security subject
      operationId: createSubject
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          $ref: '#/components/schemas/Subject'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubject'
        required: true
      responses:
        "200":
          description: Subject created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Create a subject
      tags:
      - subject
  /subscription:
    get:
      description: Get the state of the StackState license
      operationId: getSubscription
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionState'
          description: Subscription information
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get subscription info
      tags:
      - subscription
    post:
      description: Update the StackState license
      operationId: postSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewLicense'
        description: The new license
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionState'
          description: Subscription information
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Submit a new license to update the subscription
      tags:
      - subscription
  /anomalies/export:
    get:
      description: ""
      operationId: exportAnomaly
      parameters:
      - description: Beginning of timerange of to be exported anomalies.  Timestamp
          in unix millis.
        in: query
        name: startTime
        required: true
        schema:
          format: int64
          type: integer
      - description: End of timerange of to be exported anomalies.  Timestamp in unix
          millis.
        in: query
        name: endTime
        required: false
        schema:
          format: int64
          type: integer
      - description: "Amount of historic data, leading up to the anomaly, to be exported.\
          \  Duration in unix millis."
        in: query
        name: history
        required: false
        schema:
          format: int64
          type: integer
      - description: "Type of filtering to do on feedback.  Filtering on feedback\
          \ is currently mandatory, with only the 'present' value being supporeted\
          \ (feedback is available)."
        in: query
        name: feedback
        required: true
        schema:
          enum:
          - present
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AnomalyWithContext'
                type: array
          description: Export feedback on anomalies.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyAnomaliesError'
          description: Too many anomalies.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Export anomalies with metric history and feedback
      tags:
      - exportAnomaly
  /components/{componentId}/streams:
    get:
      description: List all streams from the component
      operationId: getComponentStreams
      parameters:
      - description: The Identifier of a component
        in: path
        name: componentId
        required: true
        schema:
          $ref: '#/components/schemas/ComponentId'
      - description: A Data point for a query either point from timeline or 'now'
          if livemode
        in: query
        name: queryTime
        required: true
        schema:
          $ref: '#/components/schemas/QueryTime'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TelemetryStreamDefinition'
                type: array
          description: Multiple telemetry stream definitions
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: List all streams from the component
      tags:
      - component
    post:
      description: Adds a DataStream/TelemetryStreamDefinition on the component
      operationId: createComponentStreams
      parameters:
      - description: The Identifier of a component
        in: path
        name: componentId
        required: true
        schema:
          $ref: '#/components/schemas/ComponentId'
      requestBody:
        $ref: '#/components/requestBodies/dataStream'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryStreamDefinition'
          description: Single telemetry stream definition
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Create the Stream on the component
      tags:
      - component
  /components/{componentId}/streams/{streamId}:
    delete:
      description: Delete a Specific stream from the component
      operationId: deleteComponentStream
      parameters:
      - description: The Identifier of a component
        in: path
        name: componentId
        required: true
        schema:
          $ref: '#/components/schemas/ComponentId'
      - description: The Identifier of a stream
        in: path
        name: streamId
        required: true
        schema:
          $ref: '#/components/schemas/StreamId'
      responses:
        "204":
          description: Return ok
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Delete the stream from the component
      tags:
      - component
    get:
      description: Get a Specific stream from the component
      operationId: getComponentStream
      parameters:
      - description: The Identifier of a component
        in: path
        name: componentId
        required: true
        schema:
          $ref: '#/components/schemas/ComponentId'
      - description: A Data point for a query either point from timeline or 'now'
          if livemode
        in: query
        name: queryTime
        required: true
        schema:
          $ref: '#/components/schemas/QueryTime'
      - description: The Identifier of a stream
        in: path
        name: streamId
        required: true
        schema:
          $ref: '#/components/schemas/StreamId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryStreamDefinition'
          description: Single telemetry stream definition
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get the stream from the component
      tags:
      - component
    put:
      description: Update a Specific stream from the component
      operationId: updateComponentStream
      parameters:
      - description: The Identifier of a component
        in: path
        name: componentId
        required: true
        schema:
          $ref: '#/components/schemas/ComponentId'
      - description: The Identifier of a stream
        in: path
        name: streamId
        required: true
        schema:
          $ref: '#/components/schemas/StreamId'
      requestBody:
        $ref: '#/components/requestBodies/dataStream'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryStreamDefinition'
          description: Single telemetry stream definition
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Update the stream on the component
      tags:
      - component
  /components/{componentId}/streams/latest:
    get:
      description: "Gets a top 3 metrics for a datapoint, always takes the last 15\
        \ minutes before provided timepoint"
      operationId: getLatestMetrics
      parameters:
      - description: The Identifier of a component
        in: path
        name: componentId
        required: true
        schema:
          $ref: '#/components/schemas/ComponentId'
      - description: A Data point for a query either point from timeline or 'now'
          if livemode
        in: query
        name: queryTime
        required: true
        schema:
          $ref: '#/components/schemas/QueryTime'
      - description: Ids of streams to query for
        in: query
        name: streamIds
        required: true
        schema:
          $ref: '#/components/schemas/StreamIds'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLatestSnapshotsResponse'
          description: the latest metrics for provided stream ids
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentNotFoundError'
          description: Component not found error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get the latests metrics
      tags:
      - component
  /components/{componentId}/checks:
    get:
      description: List all checks from the component
      operationId: getComponentChecks
      parameters:
      - description: The Identifier of a component
        in: path
        name: componentId
        required: true
        schema:
          $ref: '#/components/schemas/ComponentId'
      - description: A Data point for a query either point from timeline or 'now'
          if livemode
        in: query
        name: queryTime
        required: true
        schema:
          $ref: '#/components/schemas/QueryTime'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Check'
                type: array
          description: Multiple Checks
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: List all checks from the component
      tags:
      - component
    post:
      description: Adds a Check on the component
      operationId: createComponentCheck
      parameters:
      - description: The Identifier of a component
        in: path
        name: componentId
        required: true
        schema:
          $ref: '#/components/schemas/ComponentId'
      requestBody:
        $ref: '#/components/requestBodies/elementCheck'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Check'
          description: Single check
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Create the Checks on the component
      tags:
      - component
  /components/{componentId}/checks/{checkId}:
    delete:
      description: Delete a Specific check from the component
      operationId: deleteComponentCheck
      parameters:
      - description: The Identifier of a component
        in: path
        name: componentId
        required: true
        schema:
          $ref: '#/components/schemas/ComponentId'
      - description: The Identifier of a Check
        in: path
        name: checkId
        required: true
        schema:
          $ref: '#/components/schemas/CheckId'
      responses:
        "204":
          description: Return ok
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Delete the check from the component
      tags:
      - component
    get:
      description: Get a Specific check from the component
      operationId: getComponentCheck
      parameters:
      - description: The Identifier of a component
        in: path
        name: componentId
        required: true
        schema:
          $ref: '#/components/schemas/ComponentId'
      - description: A Data point for a query either point from timeline or 'now'
          if livemode
        in: query
        name: queryTime
        required: true
        schema:
          $ref: '#/components/schemas/QueryTime'
      - description: The Identifier of a Check
        in: path
        name: checkId
        required: true
        schema:
          $ref: '#/components/schemas/CheckId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Check'
          description: Single check
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get the check from the component
      tags:
      - component
    put:
      description: Update a Specific check from the component
      operationId: updateComponentCheck
      parameters:
      - description: The Identifier of a component
        in: path
        name: componentId
        required: true
        schema:
          $ref: '#/components/schemas/ComponentId'
      - description: The Identifier of a Check
        in: path
        name: checkId
        required: true
        schema:
          $ref: '#/components/schemas/CheckId'
      requestBody:
        $ref: '#/components/requestBodies/elementCheck'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Check'
          description: Single check
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Update the check on the component
      tags:
      - component
  /relations/{relationId}/streams:
    get:
      description: List all streams from the relation
      operationId: getRelationStreams
      parameters:
      - description: The Identifier of a relation
        in: path
        name: relationId
        required: true
        schema:
          $ref: '#/components/schemas/RelationId'
      - description: A Data point for a query either point from timeline or 'now'
          if livemode
        in: query
        name: queryTime
        required: true
        schema:
          $ref: '#/components/schemas/QueryTime'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TelemetryStreamDefinition'
                type: array
          description: Multiple telemetry stream definitions
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: List all streams from the relation
      tags:
      - relation
    post:
      description: Adds a DataStream/TelemetryStreamDefinition on the relation
      operationId: createRelationStream
      parameters:
      - description: The Identifier of a relation
        in: path
        name: relationId
        required: true
        schema:
          $ref: '#/components/schemas/RelationId'
      requestBody:
        $ref: '#/components/requestBodies/dataStream'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryStreamDefinition'
          description: Single telemetry stream definition
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Create the Stream on the relation
      tags:
      - relation
  /relations/{relationId}/streams/{streamId}:
    delete:
      description: Delete a Specific stream from the relation
      operationId: deleteRelationStream
      parameters:
      - description: The Identifier of a relation
        in: path
        name: relationId
        required: true
        schema:
          $ref: '#/components/schemas/RelationId'
      - description: The Identifier of a stream
        in: path
        name: streamId
        required: true
        schema:
          $ref: '#/components/schemas/StreamId'
      responses:
        "204":
          description: Return ok
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Delete the stream from the relation
      tags:
      - relation
    get:
      description: Get a Specific stream from the relation
      operationId: getRelationStream
      parameters:
      - description: The Identifier of a relation
        in: path
        name: relationId
        required: true
        schema:
          $ref: '#/components/schemas/RelationId'
      - description: A Data point for a query either point from timeline or 'now'
          if livemode
        in: query
        name: queryTime
        required: true
        schema:
          $ref: '#/components/schemas/QueryTime'
      - description: The Identifier of a stream
        in: path
        name: streamId
        required: true
        schema:
          $ref: '#/components/schemas/StreamId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryStreamDefinition'
          description: Single telemetry stream definition
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get the stream from the relation
      tags:
      - relation
    put:
      description: Update a Specific stream from the relation
      operationId: putRelationStream
      parameters:
      - description: The Identifier of a relation
        in: path
        name: relationId
        required: true
        schema:
          $ref: '#/components/schemas/RelationId'
      - description: The Identifier of a stream
        in: path
        name: streamId
        required: true
        schema:
          $ref: '#/components/schemas/StreamId'
      requestBody:
        $ref: '#/components/requestBodies/dataStream'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryStreamDefinition'
          description: Single telemetry stream definition
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Update the stream on the relation
      tags:
      - relation
  /relations/{relationId}/checks:
    get:
      description: List all checks from the relation
      operationId: getRelationChecks
      parameters:
      - description: The Identifier of a relation
        in: path
        name: relationId
        required: true
        schema:
          $ref: '#/components/schemas/RelationId'
      - description: A Data point for a query either point from timeline or 'now'
          if livemode
        in: query
        name: queryTime
        required: true
        schema:
          $ref: '#/components/schemas/QueryTime'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Check'
                type: array
          description: Multiple Checks
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: List all checks from the relation
      tags:
      - relation
    post:
      description: Adds a Check on the relation
      operationId: createRelationCheck
      parameters:
      - description: The Identifier of a relation
        in: path
        name: relationId
        required: true
        schema:
          $ref: '#/components/schemas/RelationId'
      requestBody:
        $ref: '#/components/requestBodies/elementCheck'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Check'
          description: Single check
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Create the Checks on the relation
      tags:
      - relation
  /relations/{relationId}/checks/{checkId}:
    delete:
      description: Delete a Specific check from the relation
      operationId: deleteRelationCheck
      parameters:
      - description: The Identifier of a relation
        in: path
        name: relationId
        required: true
        schema:
          $ref: '#/components/schemas/RelationId'
      - description: The Identifier of a Check
        in: path
        name: checkId
        required: true
        schema:
          $ref: '#/components/schemas/CheckId'
      responses:
        "204":
          description: Return ok
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Delete the check from the relation
      tags:
      - relation
    get:
      description: Get a Specific check from the relation
      operationId: getRelationCheck
      parameters:
      - description: The Identifier of a relation
        in: path
        name: relationId
        required: true
        schema:
          $ref: '#/components/schemas/RelationId'
      - description: A Data point for a query either point from timeline or 'now'
          if livemode
        in: query
        name: queryTime
        required: true
        schema:
          $ref: '#/components/schemas/QueryTime'
      - description: The Identifier of a Check
        in: path
        name: checkId
        required: true
        schema:
          $ref: '#/components/schemas/CheckId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Check'
          description: Single check
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get the check from the relation
      tags:
      - relation
    put:
      description: Update a Specific check from the relation
      operationId: putRelationCheck
      parameters:
      - description: The Identifier of a relation
        in: path
        name: relationId
        required: true
        schema:
          $ref: '#/components/schemas/RelationId'
      - description: The Identifier of a Check
        in: path
        name: checkId
        required: true
        schema:
          $ref: '#/components/schemas/CheckId'
      requestBody:
        $ref: '#/components/requestBodies/elementCheck'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Check'
          description: Single check
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Update the check on the relation
      tags:
      - relation
  /problems/{problemId}/causing-events:
    get:
      description: Resulting events are ordered by likeness to be an actual problem
        cause
      operationId: getProblemCausingEvents
      parameters:
      - description: The problem id number.
        in: path
        name: problemId
        required: true
        schema:
          $ref: '#/components/schemas/ProblemId'
      - description: A timestamp at which resources will be queried. If not given
          the resources are quired for current time.
        in: query
        name: topologyTime
        required: false
        schema:
          $ref: '#/components/schemas/Instant'
      - description: Maximum number of resources to be returned in result.
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/Limit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCausingEventsResult'
          description: Get events causing a problem successfull result
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCausingEventsBadRequest'
          description: Events causing a problem can not be got because of the bad
            request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCausingEventsNotFound'
          description: Events causing a problem can not be got because some elements
            cannot be found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCausingEventsServiceUnaivailable'
          description: Events causing a problem can not be got because of the problems
            with one of the services
      summary: List possible events which led to the problem
      tags:
      - problem
  /metrics/query:
    get:
      description: The endpoint evaluates an instant query at a single point in time
      operationId: getInstantQuery
      parameters:
      - description: Prometheus expression query string
        in: query
        name: query
        required: true
        schema:
          $ref: '#/components/schemas/PromQuery'
      - description: Evaluation timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: time
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: Evaluation timeout
        in: query
        name: timeout
        required: false
        schema:
          $ref: '#/components/schemas/PromTimeout'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: JSON response envelope
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: when queries time out or abort
      summary: Instant query at a single point in time
      tags:
      - metric
    post:
      description: The endpoint evaluates an instant query at a single point in time
      operationId: postInstantQuery
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromQueryRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: JSON response envelope
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: when queries time out or abort
      summary: Instant query at a single point in time
      tags:
      - metric
  /metrics/query_range:
    get:
      description: The endpoint evaluates an expression query over a range of time
      operationId: getRangeQuery
      parameters:
      - description: Prometheus expression query string
        in: query
        name: query
        required: true
        schema:
          $ref: '#/components/schemas/PromQuery'
      - description: Start timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: start
        required: true
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: End timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: end
        required: true
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: Query resolution step width in duration format or float number
          of seconds.
        example: 5m or 300
        in: query
        name: step
        required: true
        schema:
          $ref: '#/components/schemas/PromStep'
      - description: Evaluation timeout
        in: query
        name: timeout
        required: false
        schema:
          $ref: '#/components/schemas/PromTimeout'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: JSON response envelope
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: when queries time out or abort
      summary: Query over a range of time
      tags:
      - metric
    post:
      description: The endpoint evaluates an expression query over a range of time
      operationId: postRangeQuery
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromQueryRangeRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: JSON response envelope
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: when queries time out or abort
      summary: Query over a range of time
      tags:
      - metric
  /metrics/query_exemplars:
    get:
      description: "Experimental: The returns a list of exemplars for a valid PromQL\
        \ query for a specific time range"
      operationId: getExemplarsQuery
      parameters:
      - description: Prometheus expression query string
        in: query
        name: query
        required: true
        schema:
          $ref: '#/components/schemas/PromQuery'
      - description: Start timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: start
        required: true
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: End timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: end
        required: true
        schema:
          $ref: '#/components/schemas/PromTime'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: JSON response envelope
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: when queries time out or abort
      summary: "Experimental: Exemplars for a specific time range"
      tags:
      - metric
    post:
      description: "Experimental: The returns a list of exemplars for a valid PromQL\
        \ query for a specific time range"
      operationId: postExemplarsQuery
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromQueryExemplarRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: JSON response envelope
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: when queries time out or abort
      summary: "Experimental: Exemplars for a specific time range"
      tags:
      - metric
  /metrics/labels:
    get:
      description: The endpoint returns a list of label names
      operationId: getLabels
      parameters:
      - description: Start timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: start
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: End timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: end
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: Repeated series selector argument that selects the series from
          which to read the label names. Optional.
        example: "process_start_time_seconds{job='prometheus'}"
        explode: true
        in: query
        name: "match[]"
        required: false
        schema:
          $ref: '#/components/schemas/PromMatch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: JSON response envelope for labels
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: When requests time out or abort
      summary: List of label names
      tags:
      - metric
    post:
      description: The endpoint returns a list of label names
      operationId: postLabels
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              match[]:
                explode: true
                style: form
            schema:
              $ref: '#/components/schemas/PromLabelsRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: JSON response envelope for labels
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: When requests time out or abort
      summary: List of label names
      tags:
      - metric
  /metrics/label/{label}/values:
    get:
      description: The endpoint returns a list of label values for a provided label
        name
      operationId: getLabelValues
      parameters:
      - description: Prometheus query label
        in: path
        name: label
        required: true
        schema:
          $ref: '#/components/schemas/PromLabel'
      - description: Start timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: start
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: End timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: end
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: Repeated series selector argument that selects the series from
          which to read the label names. Optional.
        example: "process_start_time_seconds{job='prometheus'}"
        explode: true
        in: query
        name: "match[]"
        required: false
        schema:
          $ref: '#/components/schemas/PromMatch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: JSON response envelope for labels
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: When requests time out or abort
      summary: List of label values for a provided label name
      tags:
      - metric
    post:
      description: The endpoint returns a list of label values for a provided label
        name
      operationId: postLabelValues
      parameters:
      - description: Prometheus query label
        in: path
        name: label
        required: true
        schema:
          $ref: '#/components/schemas/PromLabel'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              match[]:
                explode: true
                style: form
            schema:
              $ref: '#/components/schemas/PromLabelValuesRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: JSON response envelope for labels
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: When requests time out or abort
      summary: List of label values for a provided label name
      tags:
      - metric
  /metrics/series:
    get:
      description: The endpoint returns the list of time series that match a certain
        label set
      operationId: getSeries
      parameters:
      - description: "Repeated series selector argument that selects the series to\
          \ return. At least one match[] argument must be provided."
        example: "process_start_time_seconds{job='prometheus'}"
        explode: true
        in: query
        name: "match[]"
        required: true
        schema:
          $ref: '#/components/schemas/PromMatch'
      - description: Start timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: start
        required: true
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: End timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: end
        required: true
        schema:
          $ref: '#/components/schemas/PromTime'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: JSON response envelope for series
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: When requests time out or abort
      summary: List of time series that match a certain label set
      tags:
      - metric
    post:
      description: The endpoint returns the list of time series that match a certain
        label set
      operationId: postSeries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              match[]:
                explode: true
                style: form
            schema:
              $ref: '#/components/schemas/PromSeriesRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: JSON response envelope for series
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: When requests time out or abort
      summary: List of time series that match a certain label set
      tags:
      - metric
  /metrics/metadata:
    get:
      description: "The endpoint returns metadata about metrics currently scraped\
        \ from targets. However, it does not provide any target information. This\
        \ is considered experimental and might change in the future"
      operationId: getMetadata
      parameters:
      - description: Maximum number of metrics to return.
        example: "2"
        in: query
        name: limit
        required: true
        schema:
          $ref: '#/components/schemas/PromLimit'
      - description: A metric name to filter metadata for. All metric metadata is
          retrieved if left empty.
        example: http_requests_total
        in: query
        name: metric
        required: false
        schema:
          $ref: '#/components/schemas/PromMetric'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: JSON response envelope for metadata
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: When requests time out or abort
      summary: Metadata about metrics currently scraped from targets
      tags:
      - metric
    post:
      description: "The endpoint returns metadata about metrics currently scraped\
        \ from targets. However, it does not provide any target information. This\
        \ is considered experimental and might change in the future"
      operationId: postMetadata
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromMetadataRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: JSON response envelope for metadata
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: When requests time out or abort
      summary: Metadata about metrics currently scraped from targets
      tags:
      - metric
  /topic:
    get:
      description: List all Kafka topics available in StackState
      operationId: list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicList'
          description: Topic list
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: List topics
      tags:
      - topic
  /topic/{topic}:
    get:
      description: List Kafka messages on the topic of choice
      operationId: describe
      parameters:
      - in: path
        name: topic
        required: true
        schema:
          $ref: '#/components/schemas/TopicName'
      - in: query
        name: limit
        schema:
          type: integer
      - in: query
        name: offset
        schema:
          type: integer
      - in: query
        name: partition
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
          description: Message list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Describe a topic
      tags:
      - topic
components:
  requestBodies:
    monitorPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorPatch'
      description: Monitor base properties
      required: true
    EventListBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventListRequest'
      required: true
    dataStream:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataStream'
      description: Single telemetry stream definition
      required: true
    elementCheck:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Check'
      description: Single Check
      required: true
  responses:
    genericErrorsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorsResponse'
      description: Error when handling the request on the server side.
    monitors:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorList'
      description: List of all available monitors
    monitorApiError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorApiError'
      description: container for all error response
    monitor:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Monitor'
      description: Full representation of a monitor
    invalidMonitorIdentifierError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidMonitorIdentifierError'
      description: Invalid monitor id or identifier
    monitorNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorNotFoundError'
      description: monitor was not found in the database
    monitorSaveError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorSaveError'
      description: monitor could not be saved in the database
    monitorRunResult:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorRunResult'
      description: Full representation of the result of a monitor run
    monitorStatus:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorStatus'
      description: Full representation of a monitor with status
    userProfile:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserProfile'
      description: User Profile
    apiTokens:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/ApiToken'
            type: array
      description: Api Token
    events:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventItemsWithTotal'
      description: Event API
    event:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopologyEvent'
      description: Event
    eventNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventNotFoundError'
      description: Error when retrieving an event
    eventSuggestions:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StringItemsWithTotal'
      description: Event field suggestions
    urnBadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidUrn'
      description: Bad request when specifying an invalid identifier
    healthStreamError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HealthStreamNotFound'
      description: Error when retrieving health stream
    healthSubStreamError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HealthSubStreamError'
      description: Error when retrieving health sub stream
    TopologySyncBadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidSyncIdentifier'
      description: Bad request when specifying an invalid identifier
    TopologySyncNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopologySyncError'
      description: Sync with given identifier not found
    tokens:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/ServiceToken'
            type: array
      description: Service Tokens
    telemetryStreamDefinitionCollection:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/TelemetryStreamDefinition'
            type: array
      description: Multiple telemetry stream definitions
    stackElementNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StackElementNotFound'
      description: Error when handling an element which cannot be found.
    telemetryStreamDefinition:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TelemetryStreamDefinition'
      description: Single telemetry stream definition
    telemetryLatestSnapshots:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TelemetryLatestSnapshotsResponse'
      description: the latest metrics for provided stream ids
    componentNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ComponentNotFoundError'
      description: Component not found error
    elementCheckCollection:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Check'
            type: array
      description: Multiple Checks
    elementCheck:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Check'
      description: Single check
    GetCausingEventsResult:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCausingEventsResult'
      description: Get events causing a problem successfull result
    GetCausingEventsBadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCausingEventsBadRequest'
      description: Events causing a problem can not be got because of the bad request
    GetCausingEventsNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCausingEventsNotFound'
      description: Events causing a problem can not be got because some elements cannot
        be found
    GetCausingEventsServiceUnaivailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCausingEventsServiceUnaivailable'
      description: Events causing a problem can not be got because of the problems
        with one of the services
    successEnvelope:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromEnvelope'
      description: JSON response envelope
    invalidParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromEnvelope'
      description: Parameters are missing or incorrect
    unprocessableEntity:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromEnvelope'
      description: Expression can't be executed (RFC4918)
    serviceUnavailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromEnvelope'
      description: when queries time out or abort
    successExemplarEnvelope:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromExemplarEnvelope'
      description: JSON response envelope
    invalidParametersExemplar:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromExemplarEnvelope'
      description: Parameters are missing or incorrect
    unprocessableEntityExemplar:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromExemplarEnvelope'
      description: Expression can't be executed (RFC4918)
    serviceUnavailableExemplar:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromExemplarEnvelope'
      description: when queries time out or abort
    successLabelEnvelope:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromLabelsEnvelope'
      description: JSON response envelope for labels
    invalidParametersLabel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromLabelsEnvelope'
      description: Parameters are missing or incorrect
    unprocessableEntityLabel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromLabelsEnvelope'
      description: Expression can't be executed (RFC4918)
    serviceUnavailableLabel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromLabelsEnvelope'
      description: When requests time out or abort
    successSeriesEnvelope:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromSeriesEnvelope'
      description: JSON response envelope for series
    invalidParametersSeries:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromSeriesEnvelope'
      description: Parameters are missing or incorrect
    unprocessableEntitySeries:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromSeriesEnvelope'
      description: Expression can't be executed (RFC4918)
    serviceUnavailableSeries:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromSeriesEnvelope'
      description: When requests time out or abort
    successMetadataEnvelope:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromMetadataEnvelope'
      description: JSON response envelope for metadata
    invalidParametersMetadata:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromMetadataEnvelope'
      description: Parameters are missing or incorrect
    unprocessableEntityMetadata:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromMetadataEnvelope'
      description: Expression can't be executed (RFC4918)
    serviceUnavailableMetadata:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromMetadataEnvelope'
      description: When requests time out or abort
  schemas:
    GenericErrorsResponse:
      properties:
        _type:
          enum:
          - ErrorsResponse
          type: string
        trackingKey:
          type: string
        serverTimestamp:
          format: int64
          type: integer
        errors:
          items:
            $ref: '#/components/schemas/GenericApiError'
          type: array
      required:
      - errors
      - serverTimestamp
      - trackingKey
      type: object
    GenericApiError:
      properties:
        _type:
          enum:
          - InternalError
          type: string
        message:
          type: string
        errorCode:
          format: int64
          type: integer
      required:
      - _type
      - message
      type: object
    export:
      properties:
        nodesWithIds:
          items:
            format: int64
            type: integer
          type: array
        allNodesOfTypes:
          items:
            type: string
          type: array
        namespace:
          type: string
        allowReferences:
          items:
            type: string
          type: array
      type: object
    NodeTypes:
      example:
        nodeTypes:
        - typeName: typeName
          description: description
        - typeName: typeName
          description: description
      properties:
        nodeTypes:
          items:
            $ref: '#/components/schemas/NodeTypes_nodeTypes_inner'
          type: array
      required:
      - nodeTypes
      type: object
    NodeList:
      items:
        $ref: '#/components/schemas/Node'
      type: array
    Node:
      example:
        identifier: identifier
        lastUpdateTimestamp: 6
        typeName: typeName
        name: name
        description: description
        isSettingsNode: true
        id: 0
        manual: true
        ownedBy: ownedBy
      properties:
        typeName:
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        identifier:
          type: string
        name:
          type: string
        description:
          type: string
        ownedBy:
          type: string
        manual:
          type: boolean
        isSettingsNode:
          type: boolean
      required:
      - id
      - lastUpdateTimestamp
      - typeName
      type: object
    StackpackList:
      items:
        $ref: '#/components/schemas/Sstackpack'
      type: array
    Sstackpack:
      example:
        latestVersion:
          version: version
        displayName: displayName
        configurations:
        - lastUpdateTimestamp: 6
          stackPackVersion: stackPackVersion
          id: 0
          status: status
        - lastUpdateTimestamp: 6
          stackPackVersion: stackPackVersion
          id: 0
          status: status
        name: name
        version: version
        nextVersion:
          version: version
        steps:
        - display: display
          name: name
          value:
            _type: _type
        - display: display
          name: name
          value:
            _type: _type
      properties:
        name:
          type: string
        displayName:
          type: string
        version:
          type: string
        configurations:
          items:
            $ref: '#/components/schemas/Sstackpack_configurations_inner'
          type: array
        latestVersion:
          $ref: '#/components/schemas/Sstackpack_latestVersion'
        nextVersion:
          $ref: '#/components/schemas/Sstackpack_latestVersion'
        steps:
          items:
            $ref: '#/components/schemas/StackPackStep'
          type: array
      type: object
    StackPackStep:
      example:
        display: display
        name: name
        value:
          _type: _type
      properties:
        display:
          type: string
        name:
          type: string
        value:
          $ref: '#/components/schemas/StackPackStep_value'
      type: object
    StackPack:
      example:
        detailedOverviewUrl: detailedOverviewUrl
        displayName: displayName
        overviewUrl: overviewUrl
        isNew: true
        version: version
        resourcesUrl: resourcesUrl
        isCompatible: true
        faqs:
        - question: question
          answer: answer
        - question: question
          answer: answer
        configurationUrls:
        - - configurationUrls
          - configurationUrls
        - - configurationUrls
          - configurationUrls
        name: name
        releaseStatus: AVAILABLE
        logo: logo
        categories:
        - categories
        - categories
      properties:
        name:
          type: string
        displayName:
          type: string
        version:
          type: string
        logo:
          type: string
        categories:
          items:
            type: string
          type: array
        isNew:
          type: boolean
        overviewUrl:
          type: string
        detailedOverviewUrl:
          type: string
        resourcesUrl:
          type: string
        faqs:
          items:
            $ref: '#/components/schemas/StackPack_faqs_inner'
          type: array
        configurationUrls:
          items:
            items:
              type: string
            type: array
          type: array
        releaseStatus:
          enum:
          - AVAILABLE
          - ENABLED
          - COMING_SOON
          - HIDDEN
          - BROKEN
          type: string
        isCompatible:
          type: boolean
      required:
      - categories
      - displayName
      - isCompatible
      - isNew
      - name
      - releaseStatus
      - version
      type: object
    StackPackUpload:
      properties:
        stackPack:
          format: binary
          type: string
      type: object
    ProvisionResponse:
      example:
        stackPackVersion: stackPackVersion
        lastUpdateTimestamp: 6
        name: name
        id: 0
        status: status
      properties:
        id:
          format: int64
          type: integer
        status:
          type: string
        name:
          type: string
        stackPackVersion:
          type: string
        lastUpdateTimestamp:
          format: int64
          type: integer
      type: object
    stackName:
      type: string
    MonitorList:
      example:
        monitors:
        - identifier: identifier
          functionId: 6
          remediationHint: remediationHint
          name: name
          description: description
          arguments:
          - "{}"
          - "{}"
          id: 0
          intervalSeconds: 1
          tags:
          - tags
          - tags
          status: null
        - identifier: identifier
          functionId: 6
          remediationHint: remediationHint
          name: name
          description: description
          arguments:
          - "{}"
          - "{}"
          id: 0
          intervalSeconds: 1
          tags:
          - tags
          - tags
          status: null
      properties:
        monitors:
          items:
            $ref: '#/components/schemas/Monitor'
          type: array
      required:
      - monitors
      type: object
    Monitor:
      example:
        identifier: identifier
        functionId: 6
        remediationHint: remediationHint
        name: name
        description: description
        arguments:
        - "{}"
        - "{}"
        id: 0
        intervalSeconds: 1
        tags:
        - tags
        - tags
        status: null
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        identifier:
          type: string
        description:
          type: string
        functionId:
          format: int64
          type: integer
        arguments:
          items:
            type: object
          type: array
        remediationHint:
          type: string
        intervalSeconds:
          type: integer
        tags:
          items:
            type: string
          type: array
        status:
          $ref: '#/components/schemas/MonitorStatusValue'
      required:
      - arguments
      - functionId
      - id
      - intervalSeconds
      - name
      - status
      - tags
      type: object
    MonitorId:
      format: int64
      type: integer
    MonitorUrn:
      type: string
    MonitorStatusValue:
      description: If a monitor status is set to DISABLED it won't produce any health
        states but it can still be run manually to inspect it's output
      enum:
      - ENABLED
      - DISABLED
      type: string
    MonitorApiError:
      allOf:
      - $ref: '#/components/schemas/BaseMonitorError'
      - $ref: '#/components/schemas/MonitorApiError_allOf'
    BaseMonitorError:
      properties:
        monitorId:
          type: string
        monitorIdType:
          enum:
          - id
          - urn
          type: string
      type: object
    MonitorIdOrUrn:
      pattern: "^urn:.+|[0-9]+$"
      type: string
    InvalidMonitorIdentifierError:
      properties:
        monitorIdOrUrn:
          type: string
        _type:
          enum:
          - InvalidMonitorIdentifierError
          type: string
      required:
      - _type
      - monitorIdOrUrn
      type: object
    MonitorNotFoundError:
      allOf:
      - $ref: '#/components/schemas/BaseMonitorError'
      - $ref: '#/components/schemas/MonitorNotFoundError_allOf'
      required:
      - _type
      - monitorId
      - monitorIdType
    MonitorPatch:
      example:
        identifier: identifier
        remediationHint: remediationHint
        name: name
        description: description
        intervalSeconds: 0
        tags:
        - tags
        - tags
        status: null
      properties:
        name:
          type: string
        identifier:
          type: string
        description:
          type: string
        remediationHint:
          type: string
        intervalSeconds:
          type: integer
        tags:
          items:
            type: string
          type: array
        status:
          $ref: '#/components/schemas/MonitorStatusValue'
      type: object
    MonitorSaveError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/MonitorInvalidIntervalError'
      - $ref: '#/components/schemas/InvalidMonitorIdentifierError'
      required:
      - _type
    MonitorInvalidIntervalError:
      properties:
        intervalSeconds:
          type: integer
        _type:
          enum:
          - MonitorInvalidIntervalError
          type: string
      required:
      - _type
      - intervalSeconds
      type: object
    MonitorRunResult:
      example:
        result: "{}"
      properties:
        result:
          type: object
      required:
      - result
      type: object
    MonitorStatus:
      example:
        monitor:
          identifier: identifier
          functionId: 6
          remediationHint: remediationHint
          name: name
          description: description
          arguments:
          - "{}"
          - "{}"
          id: 0
          intervalSeconds: 1
          tags:
          - tags
          - tags
          status: null
        metrics:
          healthSyncServiceMetrics:
            createsPerSecond:
            - value: 1.4658129805029452
            - value: 1.4658129805029452
            latencySeconds:
            - value: 1.4658129805029452
            - value: 1.4658129805029452
            bucketSizeSeconds: 6
            deletesPerSecond:
            - value: 1.4658129805029452
            - value: 1.4658129805029452
            messagePerSecond:
            - value: 1.4658129805029452
            - value: 1.4658129805029452
            updatesPerSecond:
            - value: 1.4658129805029452
            - value: 1.4658129805029452
          runtimeMetrics:
            lastRunTimestamp: 9
            unknownCount: 5
            clearCount: 5
            lastSuccessfulRunTimestamp: 3
            lastFailedRunTimestamp: 2
            criticalCount: 7
            deviatingCount: 2
        monitorHealthStateStateCount: 4
        topologyMatchResult:
          unmatchedCheckStates:
          - topologyElementIdentifier: topologyElementIdentifier
            checkStateId: checkStateId
          - topologyElementIdentifier: topologyElementIdentifier
            checkStateId: checkStateId
          matchedCheckStates: 7
          multipleMatchesCheckStates:
          - topologyElementIdentifier: topologyElementIdentifier
            checkStateId: checkStateId
            matchCount: 1
          - topologyElementIdentifier: topologyElementIdentifier
            checkStateId: checkStateId
            matchCount: 1
        errors:
        - count: 0
          error: error
        - count: 0
          error: error
      properties:
        monitor:
          $ref: '#/components/schemas/Monitor'
        errors:
          items:
            $ref: '#/components/schemas/MonitorError'
          type: array
        metrics:
          $ref: '#/components/schemas/MonitorMetrics'
        monitorHealthStateStateCount:
          type: integer
        topologyMatchResult:
          $ref: '#/components/schemas/TopologyMatchResult'
      required:
      - metrics
      - monitor
      type: object
    MonitorErrors:
      items:
        $ref: '#/components/schemas/MonitorError'
      type: array
    MonitorError:
      example:
        count: 0
        error: error
      properties:
        error:
          type: string
        count:
          type: integer
      required:
      - count
      - error
      type: object
    MonitorMetrics:
      example:
        healthSyncServiceMetrics:
          createsPerSecond:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
          latencySeconds:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
          bucketSizeSeconds: 6
          deletesPerSecond:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
          messagePerSecond:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
          updatesPerSecond:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
        runtimeMetrics:
          lastRunTimestamp: 9
          unknownCount: 5
          clearCount: 5
          lastSuccessfulRunTimestamp: 3
          lastFailedRunTimestamp: 2
          criticalCount: 7
          deviatingCount: 2
      properties:
        healthSyncServiceMetrics:
          $ref: '#/components/schemas/HealthStreamMetrics'
        runtimeMetrics:
          $ref: '#/components/schemas/MonitorRuntimeMetrics'
      required:
      - runtimeMetrics
      type: object
    MonitorRuntimeMetrics:
      example:
        lastRunTimestamp: 9
        unknownCount: 5
        clearCount: 5
        lastSuccessfulRunTimestamp: 3
        lastFailedRunTimestamp: 2
        criticalCount: 7
        deviatingCount: 2
      properties:
        unknownCount:
          description: Representing the count of the monitors results that are UNKNOWN
            and are mapped to topology.
          type: integer
        clearCount:
          description: Representing the count of the monitors results that are CLEAR
            and are mapped to topology.
          type: integer
        deviatingCount:
          description: Representing the count of the monitors results that are DEVIATING
            and are mapped to topology.
          type: integer
        criticalCount:
          description: Representing the count of the monitors results that are CRITICAL
            and are mapped to topology.
          type: integer
        lastRunTimestamp:
          description: Representing the epoch millis of the last monitor run.
          format: int64
          type: integer
        lastSuccessfulRunTimestamp:
          description: Representing the epoch millis of the last monitor successful
            run.
          format: int64
          type: integer
        lastFailedRunTimestamp:
          description: Representing the epoch millis of the last monitor failed run.
          format: int64
          type: integer
      type: object
    UserNotFoundError:
      properties:
        _type:
          enum:
          - UserNotFoundError
          type: string
        name:
          type: string
      required:
      - _type
      - name
      type: object
    UserProfileSaveError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/UserNameMismatchError'
      - $ref: '#/components/schemas/UserNotFoundError'
      - $ref: '#/components/schemas/UserNotLoggedInError'
      required:
      - _type
    UserNameMismatchError:
      properties:
        _type:
          enum:
          - UserNameMismatchError
          type: string
        name:
          type: string
      required:
      - _type
      - name
      type: object
    UserNotLoggedInError:
      properties:
        _type:
          enum:
          - UserNotLoggedInError
          type: string
      required:
      - _type
      type: object
    UserProfile:
      example:
        identifier: identifier
        lastUpdateTimestamp: 6
        starredViews:
        - 1
        - 1
        name: name
        description: description
        id: 0
        ownedBy: ownedBy
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        lastUpdateTimestamp:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        description:
          type: string
        identifier:
          type: string
        starredViews:
          items:
            format: int64
            type: integer
          type: array
        ownedBy:
          type: string
      required:
      - name
      type: object
    ApiToken:
      example:
        lastUpdateTimestamp: 6
        name: name
        description: description
        id: 0
        token: token
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        lastUpdateTimestamp:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        description:
          type: string
        token:
          type: string
      required:
      - name
      - token
      type: object
    RequestError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/TopologyOverflowError'
      - $ref: '#/components/schemas/RequestValidationError'
      required:
      - _type
    TopologyOverflowError:
      properties:
        _type:
          enum:
          - TopologyOverflowError
          type: string
        maxSize:
          type: integer
      required:
      - _type
      - maxSize
      type: object
    RequestValidationError:
      properties:
        _type:
          enum:
          - RequestValidationError
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    EventListRequest:
      example:
        cursor:
          lastEventTimestampMs: 5
          lastEventId: lastEventId
        eventSources:
        - eventSources
        - eventSources
        limit: 1
        startTimestampMs: 0
        playHeadTimestampMs: 5
        eventCategories:
        - null
        - null
        topologyQuery: topologyQuery
        eventTypes:
        - eventTypes
        - eventTypes
        eventTags:
        - eventTags
        - eventTags
        endTimestampMs: 6
        rootCauseMode: null
      properties:
        startTimestampMs:
          format: instant
          type: integer
        endTimestampMs:
          format: instant
          type: integer
        topologyQuery:
          type: string
        limit:
          type: integer
        playHeadTimestampMs:
          format: instant
          type: integer
        rootCauseMode:
          $ref: '#/components/schemas/RootCauseMode'
        eventTypes:
          items:
            type: string
          type: array
        eventTags:
          items:
            type: string
          type: array
        eventCategories:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
        eventSources:
          items:
            type: string
          type: array
        cursor:
          $ref: '#/components/schemas/EventCursor'
      required:
      - endTimestampMs
      - limit
      - startTimestampMs
      - topologyQuery
      type: object
    RootCauseMode:
      enum:
      - no-cause
      - cause-only
      - full-cause-tree
      type: string
    EventCategory:
      enum:
      - Changes
      - Alerts
      - Anomalies
      - Activities
      - Others
      type: string
    EventCursor:
      example:
        lastEventTimestampMs: 5
        lastEventId: lastEventId
      properties:
        lastEventTimestampMs:
          format: int64
          type: integer
        lastEventId:
          type: string
      required:
      - lastEventId
      - lastEventTimestampMs
      type: object
    EventItemsWithTotal:
      example:
        total: 5
        items:
        - identifier: identifier
          sourceIdentifier: sourceIdentifier
          data: "{}"
          description: description
          source: source
          eventType: eventType
          processedTime: 6
          tags:
          - value: value
            key: key
          - value: value
            key: key
          elements:
          - null
          - null
          name: name
          eventTime: 0
          category: null
          elementIdentifiers:
          - elementIdentifiers
          - elementIdentifiers
          sourceLinks:
          - title: title
            url: url
          - title: title
            url: url
          causingEvents:
          - eventId: eventId
            eventType: eventType
            title: title
            eventTimestamp: 1
          - eventId: eventId
            eventType: eventType
            title: title
            eventTimestamp: 1
        - identifier: identifier
          sourceIdentifier: sourceIdentifier
          data: "{}"
          description: description
          source: source
          eventType: eventType
          processedTime: 6
          tags:
          - value: value
            key: key
          - value: value
            key: key
          elements:
          - null
          - null
          name: name
          eventTime: 0
          category: null
          elementIdentifiers:
          - elementIdentifiers
          - elementIdentifiers
          sourceLinks:
          - title: title
            url: url
          - title: title
            url: url
          causingEvents:
          - eventId: eventId
            eventType: eventType
            title: title
            eventTimestamp: 1
          - eventId: eventId
            eventType: eventType
            title: title
            eventTimestamp: 1
      properties:
        items:
          items:
            $ref: '#/components/schemas/TopologyEvent'
          type: array
        total:
          format: int64
          type: integer
      required:
      - items
      - total
      type: object
    TopologyEvent:
      example:
        identifier: identifier
        sourceIdentifier: sourceIdentifier
        data: "{}"
        description: description
        source: source
        eventType: eventType
        processedTime: 6
        tags:
        - value: value
          key: key
        - value: value
          key: key
        elements:
        - null
        - null
        name: name
        eventTime: 0
        category: null
        elementIdentifiers:
        - elementIdentifiers
        - elementIdentifiers
        sourceLinks:
        - title: title
          url: url
        - title: title
          url: url
        causingEvents:
        - eventId: eventId
          eventType: eventType
          title: title
          eventTimestamp: 1
        - eventId: eventId
          eventType: eventType
          title: title
          eventTimestamp: 1
      properties:
        identifier:
          type: string
        sourceIdentifier:
          type: string
        elementIdentifiers:
          items:
            type: string
          type: array
        elements:
          items:
            $ref: '#/components/schemas/EventElement'
          type: array
        source:
          type: string
        category:
          $ref: '#/components/schemas/EventCategory'
        description:
          type: string
        name:
          type: string
        sourceLinks:
          items:
            $ref: '#/components/schemas/SourceLink'
          type: array
        data:
          type: object
        eventType:
          type: string
        eventTime:
          format: int64
          type: integer
        processedTime:
          format: int64
          type: integer
        tags:
          items:
            $ref: '#/components/schemas/EventTag'
          type: array
        causingEvents:
          items:
            $ref: '#/components/schemas/EventRef'
          type: array
      required:
      - category
      - causingEvents
      - data
      - elementIdentifiers
      - elements
      - eventTime
      - eventType
      - identifier
      - name
      - processedTime
      - source
      - sourceLinks
      - tags
      type: object
    EventElement:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/EventComponent'
      - $ref: '#/components/schemas/EventRelation'
    EventComponent:
      properties:
        _type:
          enum:
          - EventComponent
          type: string
        id:
          format: int64
          type: integer
        componentTypeId:
          format: int64
          type: integer
        name:
          type: string
      required:
      - _type
      - componentTypeId
      - id
      - name
      type: object
    EventRelation:
      properties:
        _type:
          enum:
          - EventRelation
          type: string
        id:
          format: int64
          type: integer
        relationTypeId:
          format: int64
          type: integer
        name:
          type: string
        source:
          $ref: '#/components/schemas/EventComponent'
        target:
          $ref: '#/components/schemas/EventComponent'
        dependencyDirection:
          $ref: '#/components/schemas/DependencyDirection'
      required:
      - _type
      - dependencyDirection
      - id
      - relationTypeId
      - source
      - target
      type: object
    DependencyDirection:
      enum:
      - one-way
      - none
      - both
      type: string
    SourceLink:
      example:
        title: title
        url: url
      properties:
        title:
          type: string
        url:
          type: string
      required:
      - title
      - url
      type: object
    EventTag:
      example:
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
      required:
      - key
      - value
      type: object
    EventRef:
      example:
        eventId: eventId
        eventType: eventType
        title: title
        eventTimestamp: 1
      properties:
        title:
          type: string
        eventId:
          type: string
        eventTimestamp:
          format: int64
          type: integer
        eventType:
          type: string
      required:
      - eventId
      - eventTimestamp
      - eventType
      - title
      type: object
    EventId:
      type: string
    EventNotFoundError:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - EventNotFoundError
          type: string
        eventId:
          type: string
      required:
      - _type
      - eventId
      type: object
    StringItemsWithTotal:
      example:
        total: 0
        items:
        - items
        - items
      properties:
        items:
          items:
            type: string
          type: array
        total:
          format: int64
          type: integer
      required:
      - items
      - total
      type: object
    StreamList:
      example:
        items:
        - urn: urn
          subStreams: 0
          consistencyModel: consistencyModel
        - urn: urn
          subStreams: 0
          consistencyModel: consistencyModel
      properties:
        items:
          items:
            $ref: '#/components/schemas/StreamListItem'
          type: array
      required:
      - items
      type: object
    StreamListItem:
      example:
        urn: urn
        subStreams: 0
        consistencyModel: consistencyModel
      properties:
        urn:
          type: string
        consistencyModel:
          type: string
        subStreams:
          type: integer
      required:
      - consistencyModel
      - subStreams
      - urn
      type: object
    HealthStreamStatus:
      example:
        globalErrors:
        - level: level
          count: 6
          errorCode: errorCode
          error: error
        - level: level
          count: 6
          errorCode: errorCode
          error: error
        partition: 0
        recoverMessage: recoverMessage
        mainStreamStatus:
          checkStateCount: 1
          subStreamState: null
          metrics:
            createsPerSecond:
            - value: 1.4658129805029452
            - value: 1.4658129805029452
            latencySeconds:
            - value: 1.4658129805029452
            - value: 1.4658129805029452
            bucketSizeSeconds: 6
            deletesPerSecond:
            - value: 1.4658129805029452
            - value: 1.4658129805029452
            messagePerSecond:
            - value: 1.4658129805029452
            - value: 1.4658129805029452
            updatesPerSecond:
            - value: 1.4658129805029452
            - value: 1.4658129805029452
          errors:
          - level: level
            count: 6
            errorCode: errorCode
            error: error
          - level: level
            count: 6
            errorCode: errorCode
            error: error
        consistencyModel: consistencyModel
        aggregateMetrics:
          createsPerSecond:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
          latencySeconds:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
          bucketSizeSeconds: 6
          deletesPerSecond:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
          messagePerSecond:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
          updatesPerSecond:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
      properties:
        partition:
          type: integer
        consistencyModel:
          type: string
        recoverMessage:
          type: string
        globalErrors:
          items:
            $ref: '#/components/schemas/HealthStreamError'
          type: array
        aggregateMetrics:
          $ref: '#/components/schemas/HealthStreamMetrics'
        mainStreamStatus:
          $ref: '#/components/schemas/HealthSubStreamStatus'
      required:
      - aggregateMetrics
      - consistencyModel
      - partition
      type: object
    HealthStreamErrors:
      items:
        $ref: '#/components/schemas/HealthStreamError'
      type: array
    HealthStreamError:
      example:
        level: level
        count: 6
        errorCode: errorCode
        error: error
      properties:
        errorCode:
          type: string
        level:
          type: string
        error:
          type: string
        count:
          type: integer
      required:
      - count
      - error
      - errorCode
      - level
      type: object
    HealthStreamMetrics:
      example:
        createsPerSecond:
        - value: 1.4658129805029452
        - value: 1.4658129805029452
        latencySeconds:
        - value: 1.4658129805029452
        - value: 1.4658129805029452
        bucketSizeSeconds: 6
        deletesPerSecond:
        - value: 1.4658129805029452
        - value: 1.4658129805029452
        messagePerSecond:
        - value: 1.4658129805029452
        - value: 1.4658129805029452
        updatesPerSecond:
        - value: 1.4658129805029452
        - value: 1.4658129805029452
      properties:
        bucketSizeSeconds:
          type: integer
        latencySeconds:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
        messagePerSecond:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
        createsPerSecond:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
        updatesPerSecond:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
        deletesPerSecond:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
      required:
      - bucketSizeSeconds
      type: object
    MetricBucketValues:
      items:
        $ref: '#/components/schemas/MetricBucketValue'
      type: array
    MetricBucketValue:
      example:
        value: 1.4658129805029452
      properties:
        value:
          format: double
          type: number
      type: object
    HealthSubStreamStatus:
      example:
        checkStateCount: 1
        subStreamState: null
        metrics:
          createsPerSecond:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
          latencySeconds:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
          bucketSizeSeconds: 6
          deletesPerSecond:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
          messagePerSecond:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
          updatesPerSecond:
          - value: 1.4658129805029452
          - value: 1.4658129805029452
        errors:
        - level: level
          count: 6
          errorCode: errorCode
          error: error
        - level: level
          count: 6
          errorCode: errorCode
          error: error
      properties:
        errors:
          items:
            $ref: '#/components/schemas/HealthStreamError'
          type: array
        metrics:
          $ref: '#/components/schemas/HealthStreamMetrics'
        subStreamState:
          $ref: '#/components/schemas/HealthSubStreamConsistencyState'
        checkStateCount:
          type: integer
      required:
      - checkStateCount
      - metrics
      - subStreamState
      type: object
    HealthSubStreamConsistencyState:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/HealthSubStreamSnapshot'
      - $ref: '#/components/schemas/HealthSubStreamExpiry'
      - $ref: '#/components/schemas/HealthSubStreamTransactionalIncrements'
      required:
      - _type
    HealthSubStreamSnapshot:
      properties:
        _type:
          enum:
          - HealthSubStreamSnapshot
          type: string
        expiryIntervalMs:
          type: integer
        repeatIntervalMs:
          type: integer
      required:
      - _type
      - repeatIntervalMs
      type: object
    HealthSubStreamExpiry:
      properties:
        _type:
          enum:
          - HealthSubStreamExpiry
          type: string
        expiryIntervalMs:
          type: integer
        repeatIntervalMs:
          type: integer
      required:
      - _type
      - expiryIntervalMs
      - repeatIntervalMs
      type: object
    HealthSubStreamTransactionalIncrements:
      properties:
        _type:
          enum:
          - HealthSubStreamTransactionalIncrements
          type: string
        offset:
          format: int64
          type: integer
        batchIndex:
          format: int64
          type: integer
      required:
      - _type
      - offset
      type: object
    InvalidUrn:
      properties:
        urn:
          type: string
        message:
          type: string
      required:
      - message
      - urn
      type: object
    HealthStreamNotFound:
      properties:
        _type:
          enum:
          - HealthStreamNotFound
          type: string
        urn:
          type: string
      required:
      - _type
      - urn
      type: object
    SubStreamList:
      example:
        subStreams:
        - subStreamId: subStreamId
          checkStateCount: 0
          subStreamState: null
        - subStreamId: subStreamId
          checkStateCount: 0
          subStreamState: null
      properties:
        subStreams:
          items:
            $ref: '#/components/schemas/SubStreamListItem'
          type: array
      required:
      - subStreams
      type: object
    SubStreamListItem:
      example:
        subStreamId: subStreamId
        checkStateCount: 0
        subStreamState: null
      properties:
        subStreamId:
          type: string
        subStreamState:
          $ref: '#/components/schemas/HealthSubStreamConsistencyState'
        checkStateCount:
          type: integer
      required:
      - checkStateCount
      - subStreamId
      - subStreamState
      type: object
    TopologyMatchResult:
      example:
        unmatchedCheckStates:
        - topologyElementIdentifier: topologyElementIdentifier
          checkStateId: checkStateId
        - topologyElementIdentifier: topologyElementIdentifier
          checkStateId: checkStateId
        matchedCheckStates: 7
        multipleMatchesCheckStates:
        - topologyElementIdentifier: topologyElementIdentifier
          checkStateId: checkStateId
          matchCount: 1
        - topologyElementIdentifier: topologyElementIdentifier
          checkStateId: checkStateId
          matchCount: 1
      properties:
        matchedCheckStates:
          type: integer
        unmatchedCheckStates:
          items:
            $ref: '#/components/schemas/UnmatchedCheckState'
          type: array
        multipleMatchesCheckStates:
          items:
            $ref: '#/components/schemas/MultipleMatchesCheckState'
          type: array
      required:
      - matchedCheckStates
      - multipleMatchesCheckStates
      - unmatchedCheckStates
      type: object
    UnmatchedCheckState:
      example:
        topologyElementIdentifier: topologyElementIdentifier
        checkStateId: checkStateId
      properties:
        checkStateId:
          type: string
        topologyElementIdentifier:
          type: string
      required:
      - checkStateId
      - topologyElementIdentifier
      type: object
    MultipleMatchesCheckState:
      example:
        topologyElementIdentifier: topologyElementIdentifier
        checkStateId: checkStateId
        matchCount: 1
      properties:
        checkStateId:
          type: string
        topologyElementIdentifier:
          type: string
        matchCount:
          type: integer
      required:
      - checkStateId
      - matchCount
      - topologyElementIdentifier
      type: object
    HealthSubStreamError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/HealthStreamNotFound'
      - $ref: '#/components/schemas/HealthSubStreamNotFound'
      required:
      - _type
    HealthSubStreamNotFound:
      properties:
        _type:
          enum:
          - HealthSubStreamNotFound
          type: string
        urn:
          type: string
        subStreamId:
          type: string
      required:
      - _type
      - urn
      type: object
    TopologyStreamList:
      example:
        streams:
        - syncIdentifier: syncIdentifier
          createdRelations: 6
          deletedComponents: 5
          name: name
          deletedRelations: 1
          nodeId: 0
          errors: 2
          createdComponents: 5
          status: null
        - syncIdentifier: syncIdentifier
          createdRelations: 6
          deletedComponents: 5
          name: name
          deletedRelations: 1
          nodeId: 0
          errors: 2
          createdComponents: 5
          status: null
      properties:
        streams:
          items:
            $ref: '#/components/schemas/TopologyStreamListItem'
          type: array
      required:
      - streams
      type: object
    TopologyStreamListItem:
      example:
        syncIdentifier: syncIdentifier
        createdRelations: 6
        deletedComponents: 5
        name: name
        deletedRelations: 1
        nodeId: 0
        errors: 2
        createdComponents: 5
        status: null
      properties:
        syncIdentifier:
          nullable: true
          type: string
        nodeId:
          format: int64
          type: integer
        name:
          type: string
        createdRelations:
          format: int64
          type: integer
        deletedRelations:
          format: int64
          type: integer
        createdComponents:
          format: int64
          type: integer
        deletedComponents:
          format: int64
          type: integer
        errors:
          format: int64
          type: integer
        status:
          $ref: '#/components/schemas/TopologySyncStatus'
      required:
      - createdComponents
      - createdRelations
      - deletedComponents
      - deletedRelations
      - errors
      - name
      - nodeId
      - status
      type: object
    TopologySyncStatus:
      enum:
      - Running
      - Resetting
      - Deleting
      - DeleteFailed
      type: string
    TopologyStreamListItemWithErrorDetails:
      example:
        item:
          syncIdentifier: syncIdentifier
          createdRelations: 6
          deletedComponents: 5
          name: name
          deletedRelations: 1
          nodeId: 0
          errors: 2
          createdComponents: 5
          status: null
        errorDetails:
        - level: null
          externalId: externalId
          message: message
        - level: null
          externalId: externalId
          message: message
      properties:
        item:
          $ref: '#/components/schemas/TopologyStreamListItem'
        errorDetails:
          items:
            $ref: '#/components/schemas/TopologyStreamError'
          type: array
      required:
      - errorDetails
      - item
      type: object
    TopologyStreamErrors:
      items:
        $ref: '#/components/schemas/TopologyStreamError'
      type: array
    TopologyStreamError:
      example:
        level: null
        externalId: externalId
        message: message
      properties:
        level:
          $ref: '#/components/schemas/MessageLevel'
        message:
          type: string
        externalId:
          type: string
      required:
      - level
      - message
      type: object
    MessageLevel:
      enum:
      - Warn
      - Error
      - Info
      type: string
    IdentifierType:
      enum:
      - NodeId
      - Identifier
      type: string
    InvalidSyncIdentifier:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    TopologySyncError:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    TopologyStreamMetrics:
      example:
        latencySeconds:
        - value: 1.4658129805029452
        - value: 1.4658129805029452
        bucketSizeSeconds: 0
      properties:
        bucketSizeSeconds:
          type: integer
        latencySeconds:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
      required:
      - bucketSizeSeconds
      type: object
    ExecuteScriptResponse:
      example:
        result: "{}"
      properties:
        result:
          description: "Contains a `value` and `_type` property. This is described\
            \ this way, because `value` can hold any\nJSON type and most open api\
            \ generators (but not all) have problems with such types or are inconsistent\
            \ with the OpenAPI spec.\nThe `_type` property describes the original\
            \ type of the result value during script execution.\nThe `value` property\
            \ holds the resulting value serialized to JSON.\nThe `value` property\
            \ can be of any JSON type, i.e. null, undefined, boolean, number, string,\
            \ array or object.\n"
          nullable: true
          type: object
      required:
      - result
      type: object
    ExecuteScriptError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/ExecuteScriptSyntaxErrors'
      - $ref: '#/components/schemas/ExecuteScriptGroovyRuntimeError'
      - $ref: '#/components/schemas/ExecuteScriptExecutionError'
      - $ref: '#/components/schemas/ExecuteScriptSecurityError'
      - $ref: '#/components/schemas/ExecuteScriptExceptionError'
      - $ref: '#/components/schemas/ExecuteScriptWrongReturnTypeError'
      - $ref: '#/components/schemas/ExecuteScriptTimeoutError'
      - $ref: '#/components/schemas/ExecuteScriptArgumentsScriptError'
      type: object
    ExecuteScriptSyntaxErrors:
      properties:
        _type:
          enum:
          - ExecuteScriptSyntaxErrors
          type: string
        message:
          type: string
        errors:
          items:
            $ref: '#/components/schemas/ExecuteScriptSyntaxErrors_errors_inner'
          type: array
      required:
      - _type
      - errors
      - message
      type: object
    ScriptLocation:
      properties:
        line:
          type: integer
        column:
          type: integer
      required:
      - column
      - line
      type: object
    ExecuteScriptGroovyRuntimeError:
      properties:
        _type:
          enum:
          - ExecuteScriptGroovyRuntimeError
          type: string
        message:
          type: string
        location:
          $ref: '#/components/schemas/ScriptLocation'
      required:
      - _type
      - message
      type: object
    ExecuteScriptExecutionError:
      properties:
        _type:
          enum:
          - ExecuteScriptExecutionError
          type: string
        reason:
          type: string
        message:
          type: string
      required:
      - _type
      - message
      - reason
      type: object
    ExecuteScriptSecurityError:
      properties:
        _type:
          enum:
          - ExecuteScriptSecurityError
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    ExecuteScriptExceptionError:
      properties:
        _type:
          enum:
          - ExecuteScriptExceptionError
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    ExecuteScriptWrongReturnTypeError:
      properties:
        _type:
          enum:
          - ExecuteScriptWrongReturnTypeError
          type: string
        message:
          type: string
        actualReturnType:
          type: string
        expectedReturnType:
          type: string
      required:
      - _type
      - actualReturnType
      - expectedReturnType
      - message
      type: object
    ExecuteScriptTimeoutError:
      properties:
        _type:
          enum:
          - ExecuteScriptTimeoutError
          type: string
        message:
          type: string
        timeoutMs:
          type: integer
      required:
      - _type
      - message
      - timeoutMs
      type: object
    ExecuteScriptArgumentsScriptError:
      properties:
        _type:
          enum:
          - ExecuteScriptArgumentsScriptError
          type: string
        message:
          type: string
        error:
          $ref: '#/components/schemas/ExecuteScriptError'
      required:
      - _type
      - error
      - message
      type: object
    ExecuteScriptRequest:
      example:
        argumentsScript: argumentsScript
        timeoutMs: 0
        script: script
      properties:
        timeoutMs:
          type: integer
        script:
          type: string
        argumentsScript:
          type: string
      required:
      - script
      type: object
    ServerInfo:
      example:
        deploymentMode: Saas
        version:
          patch: 1
          major: 0
          minor: 6
          isDev: true
          commit: commit
          diff: diff
      properties:
        version:
          $ref: '#/components/schemas/ServerVersion'
        deploymentMode:
          enum:
          - Saas
          - SelfHosted
          type: string
      required:
      - deploymentMode
      - version
      type: object
    ServerVersion:
      example:
        patch: 1
        major: 0
        minor: 6
        isDev: true
        commit: commit
        diff: diff
      properties:
        major:
          type: integer
        minor:
          type: integer
        patch:
          type: integer
        diff:
          type: string
        commit:
          type: string
        isDev:
          type: boolean
      required:
      - commit
      - diff
      - isDev
      - major
      - minor
      - patch
      type: object
    ServiceTokenCreatedResponse:
      example:
        name: name
        expiration: 0
        token: token
      properties:
        name:
          readOnly: true
          type: string
        token:
          readOnly: true
          type: string
        expiration:
          format: int64
          readOnly: true
          type: integer
      required:
      - name
      - token
      type: object
    ServiceTokenCreateError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/ServiceTokenInvalidExpiryError'
      required:
      - _type
    ServiceTokenInvalidExpiryError:
      properties:
        _type:
          enum:
          - ServiceTokenInvalidExpiryError
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    NewServiceTokenRequest:
      example:
        expiryDate: 0
        roles:
        - roles
        - roles
        name: name
      properties:
        name:
          type: string
        expiryDate:
          format: int64
          type: integer
        roles:
          items:
            type: string
          type: array
      required:
      - name
      - roles
      type: object
    ServiceToken:
      example:
        lastUpdateTimestamp: 6
        roles:
        - roles
        - roles
        name: name
        description: description
        expiration: 1
        id: 0
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        lastUpdateTimestamp:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        description:
          type: string
        expiration:
          format: int64
          type: integer
        roles:
          items:
            type: string
          type: array
      required:
      - name
      - roles
      type: object
    ServiceTokenId:
      format: int64
      type: integer
    Permissions:
      example:
        permissions:
        - null
        - null
      properties:
        permissions:
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      required:
      - permissions
      type: object
    PermissionList:
      items:
        $ref: '#/components/schemas/Permission'
      type: array
    Permission:
      type: string
    PermissionDescription:
      example:
        subjectHandle: subjectHandle
        permissions:
          key: null
      properties:
        subjectHandle:
          type: string
        permissions:
          additionalProperties:
            $ref: '#/components/schemas/PermissionList'
          type: object
      required:
      - permissions
      - subjectHandle
      type: object
    Subject:
      type: string
    GrantPermission:
      example:
        permission: permission
        resourceName: resourceName
      properties:
        permission:
          type: string
        resourceName:
          type: string
      required:
      - permission
      - resourceName
      type: object
    Resource:
      type: string
    SubjectList:
      items:
        $ref: '#/components/schemas/SubjectConfig'
      type: array
    SubjectConfig:
      example:
        scopeQuery: scopeQuery
        handle: handle
      properties:
        handle:
          type: string
        scopeQuery:
          type: string
      required:
      - handle
      type: object
    Query:
      type: string
    CreateSubject:
      example:
        query: query
        version: version
      properties:
        query:
          type: string
        version:
          type: string
      required:
      - query
      - version
      type: object
    Version:
      type: string
    SubscriptionState:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/ExpiredSubscription'
      - $ref: '#/components/schemas/UnlicensedSubscription'
      - $ref: '#/components/schemas/LicensedSubscription'
      required:
      - _type
      type: object
    ExpiredSubscription:
      properties:
        _type:
          enum:
          - ExpiredSubscription
          type: string
        subscription:
          $ref: '#/components/schemas/Subscription'
      required:
      - _type
      - subscription
      type: object
    Subscription:
      properties:
        tenant:
          type: string
        expiryTimestampMs:
          format: int64
          type: integer
        plan:
          type: string
      required:
      - plan
      - tenant
    UnlicensedSubscription:
      properties:
        _type:
          enum:
          - UnlicensedSubscription
          type: string
        reason:
          enum:
          - Missin
          - Invalid
          type: string
      required:
      - _type
      - reason
      type: object
    LicensedSubscription:
      properties:
        _type:
          enum:
          - LicensedSubscription
          type: string
        subscription:
          $ref: '#/components/schemas/Subscription'
      required:
      - _type
      - subscription
      type: object
    NewLicense:
      example:
        key: key
      properties:
        key:
          type: string
      required:
      - key
      type: object
    AnomalyWithContext:
      example:
        feedback:
          comments:
          - author: author
            text: text
            timestamp: 7
          - author: author
            text: text
            timestamp: 7
          subject: subject
          query:
            metricField: metricField
            queryHash: queryHash
            dataSourceId: 9
            conditions:
            - value: value
              key: key
            - value: value
              key: key
            aggregationMethod: null
            bucketSize: 3
          _type: FeedbackData
          thumbsdown:
          - thumbsdown
          - thumbsdown
          thumbsup:
          - thumbsup
          - thumbsup
        anomaly:
          reference: null
          data: null
          identifiers:
          - identifiers
          - identifiers
          name: name
          eventTimeInterval:
            start: 0
            end: 6
          description: description
          annotationType: null
          createdTime: 5
          id: id
          processedTime: 1
          tags:
          - tags
          - tags
        data:
        - v: 2.3021358869347655
          ts: 5
        - v: 2.3021358869347655
          ts: 5
      properties:
        anomaly:
          $ref: '#/components/schemas/Annotation'
        data:
          items:
            $ref: '#/components/schemas/Point'
          type: array
        feedback:
          $ref: '#/components/schemas/FeedbackData'
      required:
      - anomaly
      - data
      type: object
    Annotation:
      example:
        reference: null
        data: null
        identifiers:
        - identifiers
        - identifiers
        name: name
        eventTimeInterval:
          start: 0
          end: 6
        description: description
        annotationType: null
        createdTime: 5
        id: id
        processedTime: 1
        tags:
        - tags
        - tags
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          $ref: '#/components/schemas/Reference'
        identifiers:
          items:
            type: string
          type: array
        description:
          type: string
        annotationType:
          $ref: '#/components/schemas/AnnotationType'
        eventTimeInterval:
          $ref: '#/components/schemas/TimeRange'
        processedTime:
          format: int64
          type: integer
        createdTime:
          format: int64
          type: integer
        tags:
          items:
            type: string
          type: array
        data:
          $ref: '#/components/schemas/AnnotationData'
      required:
      - annotationType
      - createdTime
      - description
      - eventTimeInterval
      - id
      - identifiers
      - name
      - processedTime
      - reference
      - tags
      type: object
    Reference:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/MetricStreamReference'
      required:
      - _type
      type: object
    MetricStreamReference:
      properties:
        _type:
          enum:
          - MetricStreamReference
          type: string
        streamNodeId:
          format: int64
          type: integer
        elementIdentifiers:
          items:
            type: string
          type: array
      required:
      - _type
      - elementIdentifiers
      - streamNodeId
      type: object
    AnnotationType:
      enum:
      - MetricStreamAnomaly
      - MetricStreamNoAnomaly
      - AnomalyFeedback
      type: string
    TimeRange:
      example:
        start: 0
        end: 6
      properties:
        start:
          format: int64
          type: integer
        end:
          format: int64
          type: integer
      required:
      - end
      - start
      type: object
    AnnotationData:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/MetricStreamAnomalyData'
      - $ref: '#/components/schemas/MetricStreamNoAnomalyData'
      - $ref: '#/components/schemas/GenericAnnotationData'
      - $ref: '#/components/schemas/FeedbackData'
      required:
      - _type
      type: object
    MetricStreamAnomalyData:
      properties:
        _type:
          enum:
          - MetricStreamAnomalyData
          type: string
        severity:
          $ref: '#/components/schemas/AnomalySeverity'
        severityScore:
          format: double
          type: number
        checkedInterval:
          $ref: '#/components/schemas/TimeRange'
        explanation:
          type: string
        modelInfo:
          type: object
        elementName:
          type: string
        streamName:
          type: string
        query:
          $ref: '#/components/schemas/AnnotationMetricQuery'
      required:
      - _type
      - checkedInterval
      - elementName
      - explanation
      - modelInfo
      - severity
      - severityScore
      - streamName
      type: object
    AnomalySeverity:
      enum:
      - LOW
      - MEDIUM
      - HIGH
      type: string
    AnnotationMetricQuery:
      example:
        metricField: metricField
        queryHash: queryHash
        dataSourceId: 9
        conditions:
        - value: value
          key: key
        - value: value
          key: key
        aggregationMethod: null
        bucketSize: 3
      properties:
        dataSourceId:
          format: int64
          type: integer
        conditions:
          items:
            $ref: '#/components/schemas/TelemetryQueryCondition'
          type: array
        aggregationMethod:
          $ref: '#/components/schemas/DownsamplingMethod'
        bucketSize:
          format: int64
          type: integer
        metricField:
          type: string
        queryHash:
          type: string
      required:
      - aggregationMethod
      - bucketSize
      - conditions
      - dataSourceId
      - queryHash
      type: object
    MetricStreamNoAnomalyData:
      properties:
        _type:
          enum:
          - MetricStreamNoAnomalyData
          type: string
        checkedInterval:
          $ref: '#/components/schemas/TimeRange'
        explanation:
          type: string
        modelInfo:
          type: object
        query:
          $ref: '#/components/schemas/AnnotationMetricQuery'
      required:
      - _type
      - checkedInterval
      - explanation
      - modelInfo
      type: object
    GenericAnnotationData:
      properties:
        _type:
          enum:
          - GenericAnnotationData
          type: string
        annotation:
          type: object
      required:
      - _type
      - annotation
      type: object
    FeedbackData:
      example:
        comments:
        - author: author
          text: text
          timestamp: 7
        - author: author
          text: text
          timestamp: 7
        subject: subject
        query:
          metricField: metricField
          queryHash: queryHash
          dataSourceId: 9
          conditions:
          - value: value
            key: key
          - value: value
            key: key
          aggregationMethod: null
          bucketSize: 3
        _type: FeedbackData
        thumbsdown:
        - thumbsdown
        - thumbsdown
        thumbsup:
        - thumbsup
        - thumbsup
      properties:
        _type:
          enum:
          - FeedbackData
          type: string
        subject:
          type: string
        thumbsup:
          items:
            type: string
          type: array
        thumbsdown:
          items:
            type: string
          type: array
        comments:
          items:
            $ref: '#/components/schemas/FeedbackComment'
          type: array
        query:
          $ref: '#/components/schemas/AnnotationMetricQuery'
      required:
      - _type
      - comments
      - subject
      - thumbsdown
      - thumbsup
      type: object
    FeedbackComment:
      example:
        author: author
        text: text
        timestamp: 7
      properties:
        author:
          type: string
        text:
          type: string
        timestamp:
          format: int64
          type: integer
      required:
      - author
      - text
      - timestamp
      type: object
    Point:
      example:
        v: 2.3021358869347655
        ts: 5
      properties:
        ts:
          format: int64
          type: integer
        v:
          format: double
          type: number
      required:
      - ts
      - v
      type: object
    TooManyAnomaliesError:
      properties:
        message:
          type: string
        numberOfMatches:
          format: int64
          type: integer
        maxAllowed:
          format: int64
          type: integer
      required:
      - message
      type: object
    ComponentId:
      format: int64
      type: integer
    QueryTime:
      format: instant
      type: integer
    TelemetryStreamDefinition:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/MetricTelemetryStreamDefinition'
      - $ref: '#/components/schemas/EventTelemetryStreamDefinition'
      required:
      - _type
      type: object
    MetricTelemetryStreamDefinition:
      properties:
        _type:
          enum:
          - MetricTelemetryStreamDefinition
          type: string
        bindQuery:
          type: string
        dataSourceId:
          format: int64
          type: integer
        description:
          type: string
        id:
          format: int64
          type: integer
        identifier:
          type: string
        labels:
          items:
            type: string
          type: array
        lastUpdateTimestamp:
          format: int64
          type: integer
        metricValuation:
          $ref: '#/components/schemas/MetricValuation'
        name:
          type: string
        ownedBy:
          type: string
        priority:
          $ref: '#/components/schemas/TelemetryStreamPriority'
        telemetryQuery:
          $ref: '#/components/schemas/MetricTelemetryQuery'
        topologyMapping:
          items:
            $ref: '#/components/schemas/TopologyMapping'
          type: array
      required:
      - _type
      - bindQuery
      - dataSourceId
      - labels
      - metricValuation
      - name
      - priority
      - telemetryQuery
      - topologyMapping
      type: object
    MetricValuation:
      enum:
      - higher-is-better
      - lower-is-better
      type: string
    TelemetryStreamPriority:
      enum:
      - None
      - High
      - Medium
      - Low
      type: string
    MetricTelemetryQuery:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - MetricTelemetryQuery
          type: string
        aggregation:
          $ref: '#/components/schemas/DownsamplingMethod'
        baseline:
          $ref: '#/components/schemas/Baseline'
        conditions:
          items:
            $ref: '#/components/schemas/TelemetryQueryCondition'
          type: array
        groupBy:
          items:
            type: string
          type: array
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        metricField:
          type: string
      required:
      - _type
      - aggregation
      - conditions
      type: object
    DownsamplingMethod:
      enum:
      - MEAN
      - PERCENTILE_25
      - PERCENTILE_50
      - PERCENTILE_75
      - PERCENTILE_90
      - PERCENTILE_95
      - PERCENTILE_98
      - PERCENTILE_99
      - MAX
      - MIN
      - SUM
      - EVENT_COUNT
      - SUM_NO_ZEROS
      - EVENT_COUNT_NO_ZEROS
      type: string
    Baseline:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - Baseline
          type: string
        arguments:
          items:
            $ref: '#/components/schemas/Argument'
          type: array
        description:
          type: string
        function:
          format: int64
          type: integer
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        name:
          type: string
      required:
      - _type
      - arguments
      - function
      - name
      type: object
    TelemetryQueryCondition:
      example:
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
      required:
      - key
      - value
      type: object
    TopologyMapping:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/FieldMapping'
      required:
      - _type
      type: object
    FieldMapping:
      properties:
        _type:
          enum:
          - FieldMapping
          type: string
        eventField:
          type: string
        tagKey:
          type: string
      required:
      - _type
      - eventField
      - tagKey
      type: object
    EventTelemetryStreamDefinition:
      properties:
        _type:
          enum:
          - EventTelemetryStreamDefinition
          type: string
        bindQuery:
          type: string
        dataSourceId:
          format: int64
          type: integer
        description:
          type: string
        id:
          format: int64
          type: integer
        identifier:
          type: string
        labels:
          items:
            type: string
          type: array
        lastUpdateTimestamp:
          format: int64
          type: integer
        name:
          type: string
        ownedBy:
          type: string
        priority:
          $ref: '#/components/schemas/TelemetryStreamPriority'
        telemetryQuery:
          $ref: '#/components/schemas/EventTelemetryQuery'
        topologyMapping:
          items:
            $ref: '#/components/schemas/TopologyMapping'
          type: array
      required:
      - _type
      - bindQuery
      - dataSourceId
      - labels
      - name
      - priority
      - telemetryQuery
      - topologyMapping
      type: object
    EventTelemetryQuery:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - EventTelemetryQuery
          type: string
        conditions:
          items:
            $ref: '#/components/schemas/TelemetryQueryCondition'
          type: array
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
      required:
      - _type
      - conditions
      type: object
    StackElementNotFound:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - StackElementNotFound
          type: string
        objectType:
          type: string
        objectId:
          type: string
        message:
          type: string
      required:
      - _type
      - message
      - objectId
      - objectType
      type: object
    DataStream:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/EventStream'
      - $ref: '#/components/schemas/MetricStream'
      type: object
    EventStream:
      properties:
        _type:
          enum:
          - EventStream
          type: string
        dataSource:
          format: int64
          type: integer
        dataType:
          $ref: '#/components/schemas/DataType'
        description:
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        name:
          type: string
        priority:
          $ref: '#/components/schemas/StreamPriority'
        query:
          $ref: '#/components/schemas/EventTelemetryQuery'
        syncCreated:
          type: boolean
      required:
      - _type
      - dataSource
      - dataType
      - name
      - query
      - syncCreated
      type: object
    MetricStream:
      properties:
        _type:
          enum:
          - MetricStream
          type: string
        dataSource:
          format: int64
          type: integer
        dataType:
          $ref: '#/components/schemas/DataType'
        description:
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        name:
          type: string
        priority:
          $ref: '#/components/schemas/StreamPriority'
        query:
          $ref: '#/components/schemas/MetricTelemetryQuery'
        staleAfter:
          format: int64
          type: integer
        syncCreated:
          type: boolean
      required:
      - _type
      - dataSource
      - dataType
      - name
      - query
      - syncCreated
      type: object
    StreamId:
      format: int64
      type: integer
    StreamIds:
      items:
        format: int64
        type: integer
      type: array
    TelemetryLatestSnapshotsResponse:
      discriminator:
        propertyName: _type
      example:
        streamSnapshots:
        - streamId: 0
          metric:
            value: 1.4658129805029452
            timestamp: 6
          _type: LatestTelemetryStreamMetrics
        - streamId: 0
          metric:
            value: 1.4658129805029452
            timestamp: 6
          _type: LatestTelemetryStreamMetrics
        _type: TelemetryLatestSnapshotsResponse
      properties:
        _type:
          enum:
          - TelemetryLatestSnapshotsResponse
          type: string
        streamSnapshots:
          items:
            $ref: '#/components/schemas/LatestTelemetryStreamMetrics'
          type: array
      required:
      - _type
      - streamSnapshots
      type: object
    LatestTelemetryStreamMetrics:
      discriminator:
        propertyName: _type
      example:
        streamId: 0
        metric:
          value: 1.4658129805029452
          timestamp: 6
        _type: LatestTelemetryStreamMetrics
      properties:
        _type:
          enum:
          - LatestTelemetryStreamMetrics
          type: string
        streamId:
          format: int64
          type: integer
        metric:
          $ref: '#/components/schemas/SingleMetric'
      required:
      - _type
      - streamId
      type: object
    SingleMetric:
      example:
        value: 1.4658129805029452
        timestamp: 6
      properties:
        timestamp:
          format: int64
          type: integer
        value:
          type: number
      required:
      - timestamp
      - value
      type: object
    ComponentNotFoundError:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - ComponentNotFoundError
          type: string
        componentId:
          format: int64
          type: integer
      required:
      - _type
      - componentId
      type: object
    Check:
      discriminator:
        propertyName: _type
      example:
        lastUpdateTimestamp: 1
        remediationHint: remediationHint
        function: 0
        _type: Check
        name: name
        syncCreated: true
        description: description
        arguments:
        - null
        - null
        id: 6
        state:
          detailedMessage: detailedMessage
          lastUpdateTimestamp: 5
          activeErrors:
          - detailedMessage: detailedMessage
            lastUpdateTimeStamp: 9
            _type: CheckError
            id: 7
            state: null
            message: message
          - detailedMessage: detailedMessage
            lastUpdateTimeStamp: 9
            _type: CheckError
            id: 7
            state: null
            message: message
          data: "{}"
          lastHealthStateChangeTimestamp: 2
          stateAcknowledgement:
            lastUpdateTimeStamp: 4
            _type: CheckStateAcknowledgement
            id: 2
            acknowledgedTimestamp: 7
            message: message
          _type: CheckState
          shortMessage: shortMessage
          id: 5
          state: null
          source: 3
          causingEvents:
          - eventId: eventId
            eventType: eventType
            title: title
            eventTimestamp: 1
          - eventId: eventId
            eventType: eventType
            title: title
            eventTimestamp: 1
      properties:
        _type:
          enum:
          - Check
          type: string
        arguments:
          items:
            $ref: '#/components/schemas/Argument'
          type: array
        description:
          type: string
        function:
          format: int64
          type: integer
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        name:
          type: string
        remediationHint:
          type: string
        state:
          $ref: '#/components/schemas/CheckState'
        syncCreated:
          type: boolean
      required:
      - _type
      - arguments
      - function
      - name
      - syncCreated
      type: object
    CheckState:
      discriminator:
        propertyName: _type
      example:
        detailedMessage: detailedMessage
        lastUpdateTimestamp: 5
        activeErrors:
        - detailedMessage: detailedMessage
          lastUpdateTimeStamp: 9
          _type: CheckError
          id: 7
          state: null
          message: message
        - detailedMessage: detailedMessage
          lastUpdateTimeStamp: 9
          _type: CheckError
          id: 7
          state: null
          message: message
        data: "{}"
        lastHealthStateChangeTimestamp: 2
        stateAcknowledgement:
          lastUpdateTimeStamp: 4
          _type: CheckStateAcknowledgement
          id: 2
          acknowledgedTimestamp: 7
          message: message
        _type: CheckState
        shortMessage: shortMessage
        id: 5
        state: null
        source: 3
        causingEvents:
        - eventId: eventId
          eventType: eventType
          title: title
          eventTimestamp: 1
        - eventId: eventId
          eventType: eventType
          title: title
          eventTimestamp: 1
      properties:
        _type:
          enum:
          - CheckState
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        state:
          $ref: '#/components/schemas/HealthStateValue'
        lastHealthStateChangeTimestamp:
          format: int64
          type: integer
        activeErrors:
          items:
            $ref: '#/components/schemas/CheckError'
          type: array
        source:
          format: int64
          type: integer
        stateAcknowledgement:
          $ref: '#/components/schemas/CheckStateAcknowledgement'
        detailedMessage:
          type: string
        shortMessage:
          type: string
        causingEvents:
          items:
            $ref: '#/components/schemas/EventRef'
          type: array
        data:
          nullable: false
          type: object
      required:
      - _type
      - activeErrors
      - causingEvents
      - lastHealthStateChangeTimestamp
      - source
      - state
      type: object
    HealthStateValue:
      enum:
      - UNKNOWN
      - CLEAR
      - DISABLED
      - DEVIATING
      - FLAPPING
      - CRITICAL
      type: string
    CheckError:
      discriminator:
        propertyName: _type
      example:
        detailedMessage: detailedMessage
        lastUpdateTimeStamp: 9
        _type: CheckError
        id: 7
        state: null
        message: message
      properties:
        _type:
          enum:
          - CheckError
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimeStamp:
          format: int64
          type: integer
        message:
          type: string
        detailedMessage:
          type: string
        state:
          $ref: '#/components/schemas/ErrorStateValue'
      required:
      - _type
      - detailedMessage
      - message
      - state
      type: object
    ErrorStateValue:
      enum:
      - UNKNOWN
      - STALE_DATA_STREAM
      - STREAM_DATA_NOT_FOUND
      - DATA_SOURCE_UNREACHABLE
      - DATA_STREAM_ERROR
      - CHECK_ERROR
      - CHECK_LIMITED
      - BASELINES_ARE_DEPRECATED
      type: string
    CheckStateAcknowledgement:
      discriminator:
        propertyName: _type
      example:
        lastUpdateTimeStamp: 4
        _type: CheckStateAcknowledgement
        id: 2
        acknowledgedTimestamp: 7
        message: message
      properties:
        _type:
          enum:
          - CheckStateAcknowledgement
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimeStamp:
          format: int64
          type: integer
        acknowledgedTimestamp:
          format: int64
          type: integer
        message:
          type: string
      required:
      - _type
      - acknowledgedTimestamp
      - message
      type: object
    CheckId:
      format: int64
      type: integer
    RelationId:
      format: int64
      type: integer
    ProblemId:
      format: int64
      type: integer
    Instant:
      format: instant
      type: integer
    Limit:
      format: int32
      minimum: 1
      type: integer
    GetCausingEventsResult:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/CausingEventsResult'
      - $ref: '#/components/schemas/TooManyTopologyResults'
      - $ref: '#/components/schemas/CausingEventsAreNotAvailableForTheTime'
      required:
      - _type
    CausingEventsResult:
      properties:
        _type:
          enum:
          - CausingEventsResult
          type: string
        items:
          items:
            $ref: '#/components/schemas/TopologyEvent'
          type: array
      required:
      - _type
      - items
      type: object
    TooManyTopologyResults:
      properties:
        _type:
          enum:
          - TooManyTopologyResults
          type: string
      required:
      - _type
      type: object
    CausingEventsAreNotAvailableForTheTime:
      properties:
        _type:
          enum:
          - CausingEventsAreNotAvailableForTheTime
          type: string
      required:
      - _type
      type: object
    GetCausingEventsBadRequest:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/LimitOutOfRange'
      - $ref: '#/components/schemas/TopologyTimeOutOfRange'
      required:
      - _type
    LimitOutOfRange:
      properties:
        _type:
          enum:
          - LimitOutOfRange
          type: string
        message:
          type: string
        limit:
          format: int32
          type: integer
        lowerBound:
          format: int32
          type: integer
        upperBound:
          format: int32
          type: integer
      required:
      - _type
      - limit
      - lowerBound
      - message
      - upperBound
      type: object
    TopologyTimeOutOfRange:
      properties:
        _type:
          enum:
          - TopologyTimeOutOfRange
          type: string
        message:
          type: string
        topologyTimeMs:
          format: instant
          type: integer
        lowerBoundMs:
          format: instant
          type: integer
        upperBound:
          type: string
      required:
      - _type
      - lowerBoundMs
      - message
      - topologyTimeMs
      - upperBound
      type: object
    GetCausingEventsNotFound:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/ProblemNotFound'
      - $ref: '#/components/schemas/DataUnavailable'
      required:
      - _type
    ProblemNotFound:
      properties:
        _type:
          enum:
          - ProblemNotFound
          type: string
        message:
          type: string
        problemId:
          format: int64
          type: integer
        requestTimeMs:
          format: instant
          type: integer
      required:
      - _type
      - message
      - problemId
      - requestTimeMs
      type: object
    DataUnavailable:
      properties:
        _type:
          enum:
          - DataUnavailable
          type: string
        message:
          type: string
        requestTimeMs:
          format: instant
          type: integer
        availableSinceMs:
          format: instant
          type: integer
      required:
      - _type
      - availableSinceMs
      - message
      - requestTimeMs
      type: object
    GetCausingEventsServiceUnaivailable:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/TooManyActiveQueries'
      - $ref: '#/components/schemas/GetTopologyTimeout'
      required:
      - _type
    TooManyActiveQueries:
      properties:
        _type:
          enum:
          - TooManyActiveQueries
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    GetTopologyTimeout:
      properties:
        _type:
          enum:
          - GetTopologyTimeout
          type: string
        message:
          type: string
        timeoutSeconds:
          type: integer
      required:
      - _type
      - message
      - timeoutSeconds
      type: object
    PromQuery:
      type: string
    PromTime:
      pattern: "(^((?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))(Z|[\\\
        +-]\\d{2}:\\d{2})?)$)|(^[0-9]{10}$)"
      type: string
    PromTimeout:
      pattern: "^((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)$"
      type: string
    PromEnvelope:
      example:
        data: null
        errorType: errorType
        warnings:
        - warnings
        - warnings
        error: error
        status: status
      properties:
        status:
          type: string
        data:
          $ref: '#/components/schemas/PromData'
        errorType:
          type: string
        error:
          type: string
        warnings:
          items:
            type: string
          type: array
      required:
      - status
      type: object
    PromData:
      discriminator:
        mapping:
          matrix: '#/components/schemas/PromMatrix'
          vector: '#/components/schemas/PromVector'
          scalar: '#/components/schemas/PromScalar'
          string: '#/components/schemas/PromDataString'
        propertyName: resultType
      oneOf:
      - $ref: '#/components/schemas/PromMatrix'
      - $ref: '#/components/schemas/PromVector'
      - $ref: '#/components/schemas/PromScalar'
      - $ref: '#/components/schemas/PromDataString'
      required:
      - resultType
      type: object
    PromMatrix:
      properties:
        resultType:
          enum:
          - matrix
          type: string
        result:
          items:
            $ref: '#/components/schemas/PromDataResult'
          type: array
      required:
      - result
      - resultType
      type: object
    PromDataResult:
      properties:
        metric:
          additionalProperties:
            type: string
          type: object
        values:
          items:
            $ref: '#/components/schemas/PromSample'
          type: array
      required:
      - metric
      - values
      type: object
    PromSample:
      description: "This is always a tuple represented as an array with in first position\
        \ the unix timestamp as \na float with precision 3 in seconds) and in second\
        \ position the sample value as a string.\n"
      items:
        $ref: '#/components/schemas/PromSample_inner'
      maxItems: 2
      minItems: 2
      type: array
      x-as-tuple:
        values:
        - type: number
          format: unix_timestamp
        - type: string
          format: sample_value
    PromVector:
      properties:
        resultType:
          enum:
          - vector
          type: string
        result:
          items:
            $ref: '#/components/schemas/PromVectorResult'
          type: array
      required:
      - result
      - resultType
      type: object
    PromVectorResult:
      properties:
        metric:
          additionalProperties:
            type: string
          type: object
        value:
          description: "This is always a tuple represented as an array with in first\
            \ position the unix timestamp as \na float with precision 3 in seconds)\
            \ and in second position the sample value as a string.\n"
          items:
            $ref: '#/components/schemas/PromSample_inner'
          maxItems: 2
          minItems: 2
          type: array
          x-as-tuple:
            values:
            - type: number
              format: unix_timestamp
            - type: string
              format: sample_value
      required:
      - metric
      - value
      type: object
    PromScalar:
      properties:
        resultType:
          enum:
          - scalar
          type: string
        result:
          description: "This is always a tuple represented as an array with in first\
            \ position the unix timestamp as \na float with precision 3 in seconds)\
            \ and in second position the sample value as a string.\n"
          items:
            $ref: '#/components/schemas/PromSample_inner'
          maxItems: 2
          minItems: 2
          type: array
          x-as-tuple:
            values:
            - type: number
              format: unix_timestamp
            - type: string
              format: sample_value
      required:
      - result
      - resultType
      type: object
    PromDataString:
      properties:
        resultType:
          enum:
          - string
          type: string
        result:
          description: "This is always a tuple represented as an array with in first\
            \ position the unix timestamp as \na float with precision 3 in seconds)\
            \ and in second position the sample value as a string.\n"
          items:
            $ref: '#/components/schemas/PromSample_inner'
          maxItems: 2
          minItems: 2
          type: array
          x-as-tuple:
            values:
            - type: number
              format: unix_timestamp
            - type: string
              format: sample_value
      required:
      - result
      - resultType
      type: object
    PromQueryRequest:
      properties:
        query:
          $ref: '#/components/schemas/PromQuery'
        time:
          $ref: '#/components/schemas/PromTime'
        timeout:
          $ref: '#/components/schemas/PromTimeout'
      required:
      - query
      type: object
    PromStep:
      pattern: "(^((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)$)|(^[0-9]+$)"
      type: string
    PromQueryRangeRequest:
      properties:
        query:
          $ref: '#/components/schemas/PromQuery'
        start:
          $ref: '#/components/schemas/PromTime'
        end:
          $ref: '#/components/schemas/PromTime'
        step:
          $ref: '#/components/schemas/PromStep'
        timeout:
          $ref: '#/components/schemas/PromTimeout'
      required:
      - end
      - query
      - start
      - step
      type: object
    PromExemplarEnvelope:
      example:
        data:
        - seriesLabels:
            key: seriesLabels
          exemplars:
          - value: value
            labels:
              key: labels
            timestamp: 0.8008281904610115
          - value: value
            labels:
              key: labels
            timestamp: 0.8008281904610115
        - seriesLabels:
            key: seriesLabels
          exemplars:
          - value: value
            labels:
              key: labels
            timestamp: 0.8008281904610115
          - value: value
            labels:
              key: labels
            timestamp: 0.8008281904610115
        errorType: errorType
        warnings:
        - warnings
        - warnings
        error: error
        status: status
      properties:
        status:
          type: string
        data:
          items:
            $ref: '#/components/schemas/PromExemplarData'
          type: array
        errorType:
          type: string
        error:
          type: string
        warnings:
          items:
            type: string
          type: array
      required:
      - status
      type: object
    PromExemplarData:
      example:
        seriesLabels:
          key: seriesLabels
        exemplars:
        - value: value
          labels:
            key: labels
          timestamp: 0.8008281904610115
        - value: value
          labels:
            key: labels
          timestamp: 0.8008281904610115
      properties:
        seriesLabels:
          additionalProperties:
            type: string
          type: object
        exemplars:
          items:
            $ref: '#/components/schemas/PromExemplar'
          type: array
      required:
      - exemplars
      - seriesLabels
      type: object
    PromExemplar:
      example:
        value: value
        labels:
          key: labels
        timestamp: 0.8008281904610115
      properties:
        labels:
          additionalProperties:
            type: string
          type: object
        value:
          type: string
        timestamp:
          format: unix_timestamp
          type: number
      required:
      - labels
      - timestamp
      - value
      type: object
    PromQueryExemplarRequest:
      properties:
        query:
          $ref: '#/components/schemas/PromQuery'
        start:
          $ref: '#/components/schemas/PromTime'
        end:
          $ref: '#/components/schemas/PromTime'
      required:
      - end
      - query
      - start
      type: object
    PromMatch:
      items:
        type: string
      minItems: 1
      type: array
    PromLabelsEnvelope:
      example:
        data:
        - data
        - data
        errorType: errorType
        warnings:
        - warnings
        - warnings
        error: error
        status: status
      properties:
        status:
          type: string
        data:
          items:
            type: string
          type: array
        errorType:
          type: string
        error:
          type: string
        warnings:
          items:
            type: string
          type: array
      required:
      - status
      type: object
    PromLabelsRequest:
      properties:
        start:
          $ref: '#/components/schemas/PromTime'
        end:
          $ref: '#/components/schemas/PromTime'
        match[]:
          $ref: '#/components/schemas/PromMatch'
      type: object
    PromLabel:
      type: string
    PromLabelValuesRequest:
      properties:
        start:
          $ref: '#/components/schemas/PromTime'
        end:
          $ref: '#/components/schemas/PromTime'
        match[]:
          $ref: '#/components/schemas/PromMatch'
      type: object
    PromSeriesEnvelope:
      example:
        data:
        - key: data
        - key: data
        errorType: errorType
        warnings:
        - warnings
        - warnings
        error: error
        status: status
      properties:
        status:
          type: string
        data:
          items:
            additionalProperties:
              type: string
            type: object
          type: array
        errorType:
          type: string
        error:
          type: string
        warnings:
          items:
            type: string
          type: array
      required:
      - status
      type: object
    PromSeriesRequest:
      properties:
        match[]:
          $ref: '#/components/schemas/PromMatch'
        start:
          $ref: '#/components/schemas/PromTime'
        end:
          $ref: '#/components/schemas/PromTime'
      required:
      - end
      - "match[]"
      - start
      type: object
    PromLimit:
      format: int64
      type: integer
    PromMetric:
      type: string
    PromMetadataEnvelope:
      example:
        data:
          key:
          - key: data
          - key: data
        errorType: errorType
        warnings:
        - warnings
        - warnings
        error: error
        status: status
      properties:
        status:
          type: string
        data:
          additionalProperties:
            items:
              additionalProperties:
                type: string
              type: object
            type: array
          type: object
        errorType:
          type: string
        error:
          type: string
        warnings:
          items:
            type: string
          type: array
      required:
      - status
      type: object
    PromMetadata:
      additionalProperties:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
      type: object
    PromMetadataRequest:
      properties:
        limit:
          $ref: '#/components/schemas/PromLimit'
        metric:
          $ref: '#/components/schemas/PromMetric'
      required:
      - limit
      type: object
    TopicList:
      items:
        $ref: '#/components/schemas/Topic'
      type: array
    Topic:
      example:
        name: name
      properties:
        name:
          type: string
      required:
      - name
      type: object
    TopicName:
      type: string
    Messages:
      example:
        messages:
        - partition: 0
          offset: 6
          message: "{}"
          key: key
        - partition: 0
          offset: 6
          message: "{}"
          key: key
      properties:
        messages:
          items:
            $ref: '#/components/schemas/Message'
          type: array
      required:
      - messages
      type: object
    MessageList:
      items:
        $ref: '#/components/schemas/Message'
      type: array
    Message:
      example:
        partition: 0
        offset: 6
        message: "{}"
        key: key
      properties:
        key:
          type: string
        partition:
          type: integer
        offset:
          type: integer
        message:
          type: object
      required:
      - key
      - message
      - offset
      - partition
      type: object
    Argument:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/ArgumentAnomalyDirectionVal'
      - $ref: '#/components/schemas/ArgumentBooleanVal'
      - $ref: '#/components/schemas/ArgumentComponentTypeRef'
      - $ref: '#/components/schemas/ArgumentBaselineMetricStreamRef'
      - $ref: '#/components/schemas/ArgumentRelationTypeRef'
      - $ref: '#/components/schemas/ArgumentExtTopoRelation'
      - $ref: '#/components/schemas/ArgumentStsEventStreamVal'
      - $ref: '#/components/schemas/ArgumentMetricStreamId'
      - $ref: '#/components/schemas/ArgumentQueryViewRef'
      - $ref: '#/components/schemas/ArgumentRunStateVal'
      - $ref: '#/components/schemas/ArgumentLongVal'
      - $ref: '#/components/schemas/ArgumentStructTypeVal'
      - $ref: '#/components/schemas/ArgumentDoubleVal'
      - $ref: '#/components/schemas/ArgumentStateVal'
      - $ref: '#/components/schemas/ArgumentNodeIdVal'
      - $ref: '#/components/schemas/ArgumentExtTopoComponent'
      - $ref: '#/components/schemas/ArgumentEventStreamRef'
      - $ref: '#/components/schemas/ArgumentPropagatedHealthStateVal'
      - $ref: '#/components/schemas/ArgumentSimpleTrainingPeriodicityVal'
      - $ref: '#/components/schemas/ArgumentDurationVal'
      - $ref: '#/components/schemas/ArgumentStringVal'
      - $ref: '#/components/schemas/ArgumentMetricStreamRef'
      - $ref: '#/components/schemas/ArgumentScriptMetricQueryVal'
      required:
      - _type
      type: object
    ArgumentAnomalyDirectionVal:
      properties:
        _type:
          enum:
          - ArgumentAnomalyDirectionVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/AnomalyDirection'
      required:
      - _type
      - parameter
      - value
      type: object
    AnomalyDirection:
      enum:
      - RISE
      - DROP
      - RUNNING
      - ANY
      type: string
    ArgumentBooleanVal:
      properties:
        _type:
          enum:
          - ArgumentBooleanVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          type: boolean
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentComponentTypeRef:
      properties:
        _type:
          enum:
          - ArgumentComponentTypeRef
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        componentType:
          format: int64
          type: integer
      required:
      - _type
      - componentType
      - parameter
      type: object
    ArgumentBaselineMetricStreamRef:
      properties:
        _type:
          enum:
          - ArgumentBaselineMetricStreamRef
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        stream:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - stream
      type: object
    ArgumentRelationTypeRef:
      properties:
        _type:
          enum:
          - ArgumentRelationTypeRef
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        relationType:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - relationType
      type: object
    ArgumentExtTopoRelation:
      properties:
        _type:
          enum:
          - ArgumentExtTopoRelation
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        extTopoElement:
          format: int64
          type: integer
      required:
      - _type
      - extTopoElement
      - parameter
      type: object
    ArgumentStsEventStreamVal:
      properties:
        _type:
          enum:
          - ArgumentStsEventStreamVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        filter:
          $ref: '#/components/schemas/StsEventStreamFilter'
      required:
      - _type
      - filter
      - parameter
      type: object
    StsEventStreamFilter:
      enum:
      - STATE_CHANGES_OR_CREATED_DELETED
      - STATE_CHANGES_OR_CREATED_UPDATED_DELETED
      - LIFE_CYCLE_EVENTS
      - STATE_CHANGES
      - HEALTH_STATE_CHANGES
      - PROPAGATED_HEALTH_STATE_CHANGES
      - VIEW_HEALTH_STATE_CHANGES
      - ANOMALY_EVENT
      - PROBLEM_EVENT
      type: string
    ArgumentMetricStreamId:
      properties:
        _type:
          enum:
          - ArgumentMetricStreamId
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        stream:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - stream
      type: object
    ArgumentQueryViewRef:
      properties:
        _type:
          enum:
          - ArgumentQueryViewRef
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        queryView:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - queryView
      type: object
    ArgumentRunStateVal:
      properties:
        _type:
          enum:
          - ArgumentRunStateVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/RunStateValue'
      required:
      - _type
      - parameter
      - value
      type: object
    RunStateValue:
      enum:
      - UNKNOWN
      - STARTING
      - RUNNING
      - STOPPING
      - STOPPED
      - DEPLOYED
      - DEPLOYING
      type: string
    ArgumentLongVal:
      properties:
        _type:
          enum:
          - ArgumentLongVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentStructTypeVal:
      properties:
        _type:
          enum:
          - ArgumentStructTypeVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          type: string
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentDoubleVal:
      properties:
        _type:
          enum:
          - ArgumentDoubleVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          format: double
          type: number
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentStateVal:
      properties:
        _type:
          enum:
          - ArgumentStateVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/HealthStateValue'
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentNodeIdVal:
      properties:
        _type:
          enum:
          - ArgumentNodeIdVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentExtTopoComponent:
      properties:
        _type:
          enum:
          - ArgumentExtTopoComponent
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        extTopoElement:
          format: int64
          type: integer
      required:
      - _type
      - extTopoElement
      - parameter
      type: object
    ArgumentEventStreamRef:
      properties:
        _type:
          enum:
          - ArgumentEventStreamRef
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        stream:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - stream
      type: object
    ArgumentPropagatedHealthStateVal:
      properties:
        _type:
          enum:
          - ArgumentPropagatedHealthStateVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/PropagatedHealthStateValue'
      required:
      - _type
      - parameter
      - value
      type: object
    PropagatedHealthStateValue:
      enum:
      - UNKNOWN
      - PROPAGATION_ERROR
      - DEVIATING
      - FLAPPING
      - CRITICAL
      type: string
    ArgumentSimpleTrainingPeriodicityVal:
      properties:
        _type:
          enum:
          - ArgumentSimpleTrainingPeriodicityVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/SimpleTrainingPeriodicity'
      required:
      - _type
      - parameter
      - value
      type: object
    SimpleTrainingPeriodicity:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - SimpleTrainingPeriodicity
          type: string
        id:
          format: int64
          type: integer
        fundamentalPeriod:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        trainingWindowPeriods:
          format: int64
          type: integer
      required:
      - _type
      - fundamentalPeriod
      - trainingWindowPeriods
      type: object
    ArgumentDurationVal:
      properties:
        _type:
          enum:
          - ArgumentDurationVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentStringVal:
      properties:
        _type:
          enum:
          - ArgumentStringVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          type: string
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentMetricStreamRef:
      properties:
        _type:
          enum:
          - ArgumentMetricStreamRef
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        maxWindow:
          format: int64
          type: integer
        stream:
          format: int64
          type: integer
        downsamplingMethod:
          $ref: '#/components/schemas/DownsamplingMethod'
        windowingMethod:
          $ref: '#/components/schemas/WindowingMethod'
      required:
      - _type
      - parameter
      - stream
      type: object
    WindowingMethod:
      enum:
      - SLIDING
      - BATCHING
      type: string
    ArgumentScriptMetricQueryVal:
      properties:
        _type:
          enum:
          - ArgumentScriptMetricQueryVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        script:
          type: string
      required:
      - _type
      - parameter
      - script
      type: object
    DataType:
      enum:
      - METRICS
      - TOPOLOGY_ELEMENTS
      - EVENTS
      type: string
    StreamPriority:
      enum:
      - HIGH
      - MEDIUM
      - LOW
      type: string
    NodeTypes_nodeTypes_inner:
      example:
        typeName: typeName
        description: description
      properties:
        typeName:
          type: string
        description:
          type: string
      required:
      - description
      - typeName
      type: object
    Sstackpack_configurations_inner:
      example:
        lastUpdateTimestamp: 6
        stackPackVersion: stackPackVersion
        id: 0
        status: status
      properties:
        id:
          format: int64
          type: integer
        status:
          type: string
        lastUpdateTimestamp:
          format: int64
          type: integer
        stackPackVersion:
          type: string
      required:
      - lastUpdateTimestamp
      type: object
    Sstackpack_latestVersion:
      example:
        version: version
      properties:
        version:
          type: string
      type: object
    StackPackStep_value:
      example:
        _type: _type
      properties:
        _type:
          type: string
      type: object
    StackPack_faqs_inner:
      example:
        question: question
        answer: answer
      properties:
        question:
          type: string
        answer:
          type: string
      required:
      - answer
      - question
      type: object
    MonitorApiError_allOf:
      properties:
        statusCode:
          type: string
        message:
          type: string
      required:
      - message
      - statusCode
      type: object
    MonitorNotFoundError_allOf:
      properties:
        _type:
          enum:
          - MonitorNotFoundError
          type: string
      type: object
    ExecuteScriptSyntaxErrors_errors_inner:
      properties:
        message:
          type: string
        location:
          $ref: '#/components/schemas/ScriptLocation'
      required:
      - location
      - message
      type: object
    PromSample_inner:
      description: Unix timestamp with sample value (as a string)
      oneOf:
      - format: unix_timestamp
        type: number
      - format: sample_value
        type: string
  securitySchemes:
    ApiToken:
      in: header
      name: X-API-Token
      type: apiKey
    ServiceToken:
      in: header
      name: X-API-Key
      type: apiKey
    ServiceBearer:
      in: header
      name: X-API-ServiceBearer
      type: apiKey
