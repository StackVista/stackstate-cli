openapi: 3.0.3
info:
  contact:
    email: info@stackstate.com
    name: StackState
    url: https://stackstate.com
  description: "This API documentation page describes the StackState server API. The\
    \ StackState UI and CLI use the StackState server API to configure and query StackState.\
    \ \nYou can use the API for similar purposes.\n\nEach request sent to the StackState\
    \ server API must be authenticated using one of the available authentication methods.\
    \ \n\n*Note that the StackState receiver API, used to send topology, telemetry\
    \ and traces to StackState, is not described on this page and requires a different\
    \ authentication method.*\n\nFor more information on StackState, refer to the\
    \ [StackState documentation](https://docs.stackstate.com).\n"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: StackState API
  version: 5.2.0
  x-logo:
    url: https://raw.githubusercontent.com/StackVista/stackstate-docs/master/resources/logo/StackState-Color-padding.png
    href: '#top'
servers:
- url: /
security:
- ApiToken: []
- ServiceToken: []
- ServiceBearer: []
paths:
  /import:
    post:
      description: Import setting nodes from STY or STJ definitions.
      operationId: importSettings
      parameters:
      - in: query
        name: timeoutSeconds
        required: false
        schema:
          format: int64
          type: integer
      - in: query
        name: namespace
        required: false
        schema:
          type: string
      - in: query
        name: unlocked
        required: false
        schema:
          enum:
          - fail
          - skip
          - overwrite
          type: string
      - in: query
        name: locked
        required: false
        schema:
          enum:
          - fail
          - skip
          - overwrite
          type: string
      requestBody:
        content:
          plain/text:
            schema:
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: object
                type: array
          description: The full description of all imported nodes.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Failure to parse the definitions.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Import settings
      tags:
      - import
  /export:
    post:
      description: Export setting nodes as StackState Templated YAML (STY).
      operationId: exportSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/export'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Full description of all nodes.
      summary: Export settings
      tags:
      - export
  /node:
    get:
      description: list all node types
      operationId: nodeListTypes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeTypes'
          description: listing of all node types
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Node API
      tags:
      - node
  /node/{nodeType}:
    get:
      description: list all nodes of that type
      operationId: typeList
      parameters:
      - in: path
        name: nodeType
        required: true
        schema:
          type: string
      - in: query
        name: namespace
        required: false
        schema:
          type: string
      - in: query
        name: ownedBy
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeList'
          description: list of mentioned type nodes
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Node type API
      tags:
      - node
  /node/{nodeType}/{nodeId}:
    delete:
      description: Delete a locked node
      operationId: delete
      parameters:
      - in: path
        name: nodeType
        required: true
        schema:
          type: string
      - in: path
        name: nodeId
        required: true
        schema:
          format: int64
          type: integer
      - in: query
        name: timeoutSeconds
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: Node deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Node deletion API
      tags:
      - node
  /node/{nodeType}/{nodeIdOrUrn}/clone:
    post:
      description: Clone a node with a new name
      operationId: clone
      parameters:
      - in: path
        name: nodeType
        required: true
        schema:
          type: string
      - in: path
        name: nodeIdOrUrn
        required: true
        schema:
          pattern: "^urn:.+|[0-9]+$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/nodeClone'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: Cloned Node
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Clone a node with a new name
      tags:
      - node
  /node/{nodeType}/{nodeId}/islocked:
    get:
      description: Retrieve if a node is locked
      operationId: lock
      parameters:
      - in: path
        name: nodeType
        required: true
        schema:
          type: string
      - in: path
        name: nodeId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockedResponse'
          description: Node lock status
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Retrieve if a node is locked
      tags:
      - node
  /node/{nodeType}/{nodeId}/unlock:
    post:
      description: Unlock a locked node
      operationId: unlock
      parameters:
      - in: path
        name: nodeType
        required: true
        schema:
          type: string
      - in: path
        name: nodeId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: Unlocked node
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Node unlock API
      tags:
      - node
  /stackpack:
    get:
      description: list of stackpack
      operationId: stackPackList
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackPackList'
          description: Get list of stackpack
        "400":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: bad request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: StackPack API
      tags:
      - stackpack
    post:
      description: upload a StackPack
      operationId: stackPackUpload
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StackPackUpload'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackPack'
          description: Upload success. Processing happens asynchronously.
        "400":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: bad request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: StackPack API
      tags:
      - stackpack
  /stackpack/{stackPackName}/provision:
    post:
      description: Provision details
      operationId: provisionDetails
      parameters:
      - in: path
        name: stackPackName
        required: true
        schema:
          type: string
      - allowReserved: true
        in: query
        name: unlocked
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionResponse'
          description: Successful provisioning of the stackpack
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Provision API
      tags:
      - stackpack
  /stackpack/{stackPackName}/deprovision/{stackPackInstanceId}:
    post:
      description: Provision details
      operationId: provisionUninstall
      parameters:
      - in: path
        name: stackPackName
        required: true
        schema:
          type: string
      - in: path
        name: stackPackInstanceId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successfully uninstalled
        "400":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: bad request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Provision API
      tags:
      - stackpack
  /stackpack/{stackPackName}/upgrade:
    post:
      description: Upgrade stackpack
      operationId: upgradeStackPack
      parameters:
      - in: path
        name: stackPackName
        required: true
        schema:
          type: string
      - allowReserved: true
        in: query
        name: unlocked
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Upgrade API
      tags:
      - stackpack
  /stackpack/{stackPackName}/confirm-manual-steps/{stackPackInstanceId}:
    post:
      description: Confirm manual steps of the stackpack
      operationId: confirmManualSteps
      parameters:
      - in: path
        name: stackPackName
        required: true
        schema:
          type: string
      - in: path
        name: stackPackInstanceId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Confirm manual steps
      tags:
      - stackpack
  /monitors:
    get:
      description: List all available monitor in the system
      operationId: getAllMonitors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorList'
          description: List of all available monitors
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: List monitors
      tags:
      - monitor
  /monitors/{monitorIdOrUrn}:
    delete:
      description: Deletes existing monitor
      operationId: deleteMonitor
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      responses:
        "204":
          description: Return ok
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Delete a monitor
      tags:
      - monitor
    get:
      description: Returns a monitor full representation
      operationId: getMonitor
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: Full representation of a monitor
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Get a monitor
      tags:
      - monitor
    patch:
      description: Performs a patch on the monitor base properties.
      operationId: patchMonitor
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      requestBody:
        $ref: '#/components/requestBodies/monitorPatch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: Full representation of a monitor
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorValidationError'
          description: monitor request has errors
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Update some monitor properties
      tags:
      - monitor
  /monitors/{monitorIdOrUrn}/preview:
    post:
      description: Performs a run of a monitor allowing to test it with new arguments
        and delivers a summary of the health states produced
      operationId: previewMonitor
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      requestBody:
        $ref: '#/components/requestBodies/monitorPreview'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorPreviewResult'
          description: Summary representation of the result of a monitor run
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Preview a monitor
      tags:
      - monitor
  /monitors/{monitorIdOrUrn}/preview/checkStates:
    post:
      description: Performs a run of a monitor allowing to test it with new arguments
        and returns the health states produced
      operationId: previewMonitorCheckStates
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      - description: Health state of check states
        in: query
        name: healthState
        schema:
          $ref: '#/components/schemas/HealthStateValue'
      - in: query
        name: limit
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/monitorPreview'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStates'
          description: Check states of a monitor
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Preview a monitor
      tags:
      - monitor
  /monitors/{monitorIdOrUrn}/run:
    post:
      description: "Performs a run of a monitor. If 'dryRun' is set, topology state\
        \ will not be modified."
      operationId: runMonitor
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      - description: "If set, the topology state will not be modified"
        in: query
        name: dryRun
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorRunResult'
          description: Full representation of the result of a monitor run
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Run a monitor
      tags:
      - monitor
  /monitors/{monitorIdOrUrn}/status:
    get:
      description: Returns a monitor full representation with the stream status information
      operationId: getMonitorWithStatus
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      - in: query
        name: timestamp
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorStatus'
          description: Full representation of a monitor with status
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Get a monitor with stream information
      tags:
      - monitor
  /monitors/{monitorIdOrUrn}/checkStates:
    get:
      description: Returns the checkstates that a monitor generated
      operationId: getMonitorCheckStates
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      - description: Health state of check states
        in: query
        name: healthState
        schema:
          $ref: '#/components/schemas/HealthStateValue'
      - in: query
        name: limit
        schema:
          type: integer
      - in: query
        name: timestamp
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStates'
          description: Check states of a monitor
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Get the check states for a monitor
      tags:
      - monitor
  /monitors/{monitorIdOrUrn}/publish:
    post:
      description: Publish health states for monitor
      operationId: publishHealthStates
      parameters:
      - description: The id or identifier (urn) of a monitor
        in: path
        name: monitorIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorIdOrUrn'
      requestBody:
        $ref: '#/components/requestBodies/monitorSnapshot'
      responses:
        "200":
          description: The health states were published successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Post monitor health states
      tags:
      - monitor
  /monitors/{monitorFunctionIdOrUrn}/test:
    post:
      description: Performs a run of a monitor function to test arguments and delivers
        a summary of the health states produced
      operationId: testMonitorFunction
      parameters:
      - description: The id or identifier (urn) of a monitor function
        in: path
        name: monitorFunctionIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorFunctionIdOrUrn'
      requestBody:
        $ref: '#/components/requestBodies/monitorFunctionTest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorPreviewResult'
          description: Summary representation of the result of a monitor run
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorFunctionNotFoundError'
          description: monitor function was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Test a monitor
      tags:
      - monitor
  /monitors/{monitorFunctionIdOrUrn}/test/checkStates:
    post:
      description: Performs a run of a monitor function to test arguments and returns
        the health states produced
      operationId: testMonitorFunctionCheckStates
      parameters:
      - description: The id or identifier (urn) of a monitor function
        in: path
        name: monitorFunctionIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/MonitorFunctionIdOrUrn'
      - description: Health state of check states
        in: query
        name: healthState
        schema:
          $ref: '#/components/schemas/HealthStateValue'
      - in: query
        name: limit
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/monitorFunctionTest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStates'
          description: Check states of a monitor
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMonitorIdentifierError'
          description: Invalid monitor id or identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorFunctionNotFoundError'
          description: monitor function was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Test a monitor
      tags:
      - monitor
  /monitors/identifierLookup:
    post:
      description: Find identifier templates using a component type and a metrics
        query
      operationId: lookupIdentifier
      requestBody:
        $ref: '#/components/requestBodies/monitorIdentifierLookup'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorIdentifierSuggestions'
          description: Identifier suggestions for multiple component identifier lookup
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Multiple component identifier lookup
      tags:
      - monitor
  /monitors/overview:
    get:
      description: List all available monitor in the system with their function and
        runtime data
      operationId: getMonitorsOverview
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorOverviewList'
          description: List of all available monitors with their function and runtime
            data
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: List monitors overview
      tags:
      - monitor
  /monitor/checkStatus/{id}:
    get:
      description: Get a monitor check status by check state id
      operationId: getMonitorCheckStatus
      parameters:
      - description: The id of a monitor check status
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: A timestamp at which resources will be queried. If not given
          the resources are queried at current time.
        in: query
        name: topologyTime
        required: false
        schema:
          format: instant
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStatus'
          description: Monitor check status
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStatusApiError'
          description: container for all error response
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStatusNotFoundError'
          description: monitor check status was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStatusApiError'
          description: container for all error response
      summary: Get a monitor check status
      tags:
      - monitorCheckStatus
  /monitor/checkStatus/{id}/relatedFailures:
    get:
      description: Get a monitor check status related failures by the check state
        id
      operationId: getMonitorCheckStatusRelatedFailures
      parameters:
      - description: The id of a monitor check status
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: A timestamp at which resources will be queried. If not given
          the resources are queried at current time.
        in: query
        name: topologyTime
        required: false
        schema:
          format: instant
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStatusRelatedFailures'
          description: Monitor check status related failures
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStatusApiError'
          description: container for all error response
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStatusNotFoundError'
          description: monitor check status was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStatusApiError'
          description: container for all error response
      summary: Get a monitor check related failures
      tags:
      - monitorCheckStatus
  /monitor/checkStatus/{id}/healthHistory:
    get:
      description: Get a monitor check status health history for a defined period
        of time by the check state id
      operationId: getMonitorCheckStatusHealthHistory
      parameters:
      - description: The id of a monitor check status
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The start time of a time range to query resources.
        in: query
        name: startTime
        required: true
        schema:
          format: instant
          type: integer
      - description: The end time of a time range to query resources. If not given
          the endTime is set to current time.
        in: query
        name: endTime
        required: false
        schema:
          format: instant
          type: integer
      - description: A timestamp at which resources will be queried. If not given
          the resources are queried at current time.
        in: query
        name: topologyTime
        required: false
        schema:
          format: instant
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStatusHealthHistory'
          description: Monitor check status health history
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStatusApiError'
          description: container for all error response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorCheckStatusApiError'
          description: container for all error response
      summary: Get a monitor check health history
      tags:
      - monitorCheckStatus
  /notifications/channels/slack/oauth-redirect:
    get:
      description: Redirects to Slack to start an OAuth2 flow.
      operationId: slackOauthRedirect
      parameters:
      - description: "After completing the oauth flow the user will be redirected\
          \ back to this path, in the UI, on StackState, to continue further setup\
          \ of the Slack notification channel."
        in: query
        name: redirectPath
        required: true
        schema:
          type: string
      responses:
        "302":
          description: Redirects to Slack to start an OAuth2 flow that will return
            to the slack channel configuration afterwards. In case of an error redirects
            back to the Slack channel configuration with an `error` and a `channelId`
            parameter.
      summary: Starts Slack OAuth2 flow
      tags:
      - notification_channels
  /notifications/channels/slack/oauth-callback:
    get:
      description: "The OAuth callback for Slack, which is used to obtain the access\
        \ token for the Slack channel."
      operationId: slackOAuthCallback
      parameters:
      - description: OAuth code from Slack. Either the code is present for the success
          case or the error parameter is present for the error case.
        in: query
        name: code
        required: false
        schema:
          type: string
      - description: "State parameter that was passed to Slack, should have the same\
          \ value as the one passed to Slack."
        in: query
        name: state
        required: true
        schema:
          type: string
      - description: Error parameter. Either the code is present for the success case
          or the error parameter is present for the error case.
        in: query
        name: error
        required: false
        schema:
          type: string
      responses:
        "302":
          description: "Redirects back to the Slack channel configuration, in case\
            \ of an error it includes an `error` query parameter. If known also a\
            \ `channelId` parameter will be included."
      summary: The OAuth callback for Slack
      tags:
      - notification_channels
  /notifications/channels/slack/{channelId}:
    delete:
      description: Delete the slack notification channel by id
      operationId: deleteSlackNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "204":
          description: Slack notification channel is deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Delete the Slack Notification channel by id
      tags:
      - notification_channels
    get:
      description: Get the slack notification channel by id
      operationId: getSlackNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlackNotificationChannel'
          description: Slack notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Get the Slack Notification channel by id
      tags:
      - notification_channels
  /notifications/channels/slack/{channelId}/listSlackChannels:
    get:
      description: "List all public Slack channels, used for selecting a channel for\
        \ the notifications"
      operationId: listSlackChannels
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlackChannels'
          description: Array of all available Slack channels to which StackState can
            send messages.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: List all public Slack channels
      tags:
      - notification_channels
  /notifications/channels/slack/{channelId}/joinSlackChannel:
    post:
      description: Join the specified Slack channel and configure this notifiation
        channel to post notifications to the specified slack channel.
      operationId: joinSlackChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      requestBody:
        $ref: '#/components/requestBodies/joinSlackChannel'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlackNotificationChannel'
          description: Slack notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Join the specified Slack channel to send notifications
      tags:
      - notification_channels
  /notifications/channels/slack/{channelId}/test:
    post:
      description: Test the Notification channel by sending a test message to the
        notification channel.
      operationId: testSlackChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "204":
          description: Successfully tested channel.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Test the Notification channel
      tags:
      - notification_channels
  /notifications/channels/webhook:
    post:
      description: Create a Webhook Notification channel
      operationId: createWebhookNotificationChannel
      requestBody:
        $ref: '#/components/requestBodies/webhookChannelWrite'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookNotificationChannel'
          description: Webhook notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Create a Webhook Notification channel
      tags:
      - notification_channels
  /notifications/channels/webhook/{channelId}:
    delete:
      description: Delete the webhook notification channel by id
      operationId: deleteWebhookNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "204":
          description: Webhook notification channel is deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Delete the Webhook Notification channel by id
      tags:
      - notification_channels
    get:
      description: Get the webhook notification channel by id
      operationId: getWebhookNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookNotificationChannel'
          description: Webhook notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Get the Webhook Notification channel by id
      tags:
      - notification_channels
    put:
      description: Update the webhook notification channel by id
      operationId: updateWebhookNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      requestBody:
        $ref: '#/components/requestBodies/webhookChannelWrite'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookNotificationChannel'
          description: Webhook notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Update the Webhook Notification channel by id
      tags:
      - notification_channels
  /notifications/channels/webhook/{channelId}/test:
    post:
      description: Test the webhook notification channel by sending a test message
        to the notification channel.
      operationId: testWebhookChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "204":
          description: Successfully tested channel.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Test the Webhook notification channel
      tags:
      - notification_channels
  /notifications/channels/opsgenie:
    post:
      description: Create a Opsgenie Notification channel
      operationId: createOpsgenieNotificationChannel
      requestBody:
        $ref: '#/components/requestBodies/opsgenieChannelWrite'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpsgenieNotificationChannel'
          description: Opsgenie notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Create a Opsgenie Notification channel
      tags:
      - notification_channels
  /notifications/channels/opsgenie/responders:
    get:
      description: List Opsgenie responders
      operationId: listOpsgenieResponders
      parameters:
      - description: OpsGenie API key
        in: query
        name: genieKey
        required: true
        schema:
          type: string
      - description: OpsGenie region
        in: query
        name: region
        required: true
        schema:
          $ref: '#/components/schemas/OpsgenieRegion'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpsgenieResponders'
          description: Opsgenie responders
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: List Opsgenie responders
      tags:
      - notification_channels
  /notifications/channels/opsgenie/{channelId}:
    delete:
      description: Delete the opsgenie notification channel by id
      operationId: deleteOpsgenieNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "204":
          description: Opsgenie notification channel is deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Delete the Opsgenie Notification channel by id
      tags:
      - notification_channels
    get:
      description: Get the opsgenie notification channel by id
      operationId: getOpsgenieNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpsgenieNotificationChannel'
          description: Opsgenie notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Get the Opsgenie Notification channel by id
      tags:
      - notification_channels
    put:
      description: Update the opsgenie notification channel by id
      operationId: updateOpsgenieNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      requestBody:
        $ref: '#/components/requestBodies/opsgenieChannelWrite'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpsgenieNotificationChannel'
          description: Opsgenie notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Update the Opsgenie Notification channel by id
      tags:
      - notification_channels
  /notifications/channels/opsgenie/{channelId}/test:
    post:
      description: Test the opsgenie notification channel by sending a test message
        to the notification channel.
      operationId: testOpsgenieChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "204":
          description: Successfully tested channel.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Test the Opsgenie notification channel
      tags:
      - notification_channels
  /notifications/channels/teams:
    post:
      description: Create a Teams Notification channel
      operationId: createTeamsNotificationChannel
      requestBody:
        $ref: '#/components/requestBodies/teamsChannelWrite'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamsNotificationChannel'
          description: Teams notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Create a Teams Notification channel
      tags:
      - notification_channels
  /notifications/channels/teams/{channelId}:
    delete:
      description: Delete the teams notification channel by id
      operationId: deleteTeamsNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "204":
          description: Teams notification channel is deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Delete the Teams Notification channel by id
      tags:
      - notification_channels
    get:
      description: Get the teams notification channel by id
      operationId: getTeamsNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamsNotificationChannel'
          description: Teams notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Get the Teams Notification channel by id
      tags:
      - notification_channels
    put:
      description: Update the teams notification channel by id
      operationId: updateTeamsNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      requestBody:
        $ref: '#/components/requestBodies/teamsChannelWrite'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamsNotificationChannel'
          description: Teams notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Update the Teams Notification channel by id
      tags:
      - notification_channels
  /notifications/channels/teams/{channelId}/test:
    post:
      description: Test the teams notification channel by sending a test message to
        the notification channel.
      operationId: testTeamsChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "204":
          description: Successfully tested channel.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Test the Teams notification channel
      tags:
      - notification_channels
  /notifications/channels/email:
    post:
      description: Create Email Notification channel
      operationId: createEmailNotificationChannel
      requestBody:
        $ref: '#/components/requestBodies/emailChannelWrite'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailNotificationChannel'
          description: Email notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Create a Email Notification channel
      tags:
      - notification_channels
  /notifications/channels/email/status:
    get:
      description: "Email Notification channel status, test whether it can be used"
      operationId: getEmailNotificationStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailNotificationStatus'
          description: Email notification status
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Email Notification channel status
      tags:
      - notification_channels
  /notifications/channels/email/{channelId}:
    delete:
      description: Delete the email notification channel by id
      operationId: deleteEmailNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "204":
          description: Email notification channel is deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Delete the Email Notification channel by id
      tags:
      - notification_channels
    get:
      description: Get the email notification channel by id
      operationId: getEmailNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailNotificationChannel'
          description: Email notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Get the Email Notification channel by id
      tags:
      - notification_channels
    put:
      description: Update the email notification channel by id
      operationId: updateEmailNotificationChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      requestBody:
        $ref: '#/components/requestBodies/emailChannelWrite'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailNotificationChannel'
          description: Email notification channel
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Update the Email Notification channel by id
      tags:
      - notification_channels
  /notifications/channels/email/{channelId}/test:
    post:
      description: Test the email notification channel by sending a test message to
        the notification channel.
      operationId: testEmailChannel
      parameters:
      - description: Channel identifier
        in: path
        name: channelId
        required: true
        schema:
          $ref: '#/components/schemas/ChannelId'
      responses:
        "204":
          description: Successfully tested channel.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelNotFound'
          description: Notification channel was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelError'
          description: Error while executing the request.
      summary: Test the Email notification channel
      tags:
      - notification_channels
  /notifications/configurations:
    get:
      description: Get all notification configurations
      operationId: getNotificationConfigurations
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurations'
          description: Array of notification configurations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationError'
          description: Error while executing the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationError'
          description: Error while executing the request.
      summary: Get all notification configurations
      tags:
      - notification_configurations
    post:
      description: Create a new notification configuration
      operationId: createNotificationConfiguration
      requestBody:
        $ref: '#/components/requestBodies/notificationConfigurationWrite'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationReadSchema'
          description: Notification configuration
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationError'
          description: Error while executing the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationError'
          description: Error while executing the request.
      summary: Create a new notification configuration
      tags:
      - notification_configurations
  /notifications/configurations/{notificationConfigurationIdOrUrn}:
    delete:
      description: Delete the notification configuration
      operationId: deleteNotificationConfiguration
      parameters:
      - description: Notification identifier
        in: path
        name: notificationConfigurationIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/NotificationConfigurationIdOrUrn'
      responses:
        "204":
          description: Notification configuration is deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationByIdErrors'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationNotFound'
          description: Notification was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationError'
          description: Error while executing the request.
      summary: Delete the notification configuration
      tags:
      - notification_configurations
    get:
      description: Get the notification configuration
      operationId: getNotificationConfiguration
      parameters:
      - description: Notification identifier
        in: path
        name: notificationConfigurationIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/NotificationConfigurationIdOrUrn'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationReadSchema'
          description: Notification configuration
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationByIdErrors'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationNotFound'
          description: Notification was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationError'
          description: Error while executing the request.
      summary: Get the notification configuration
      tags:
      - notification_configurations
    put:
      description: Update the notification configuration
      operationId: updateNotificationConfiguration
      parameters:
      - description: Notification identifier
        in: path
        name: notificationConfigurationIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/NotificationConfigurationIdOrUrn'
      requestBody:
        $ref: '#/components/requestBodies/notificationConfigurationWrite'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationReadSchema'
          description: Notification configuration
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationByIdErrors'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationNotFound'
          description: Notification was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationError'
          description: Error while executing the request.
      summary: Update the notification configuration
      tags:
      - notification_configurations
  /notifications/configurations/{notificationConfigurationIdOrUrn}/channels:
    get:
      description: Get the channels for the notification configuration
      operationId: getNotificationConfigurationChannels
      parameters:
      - description: Notification identifier
        in: path
        name: notificationConfigurationIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/NotificationConfigurationIdOrUrn'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationChannels'
          description: Notification configuration channels
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationByIdErrors'
          description: Error while executing the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationNotFound'
          description: Notification was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfigurationError'
          description: Error while executing the request.
      summary: Get the channels for the notification configuration
      tags:
      - notification_configurations
  /user/profile:
    get:
      description: Get current user profile.
      operationId: getCurrentUserProfile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: User Profile
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
          description: Get User Profile Error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get current user profile
      tags:
      - userProfile
    put:
      description: Save current user profile.
      operationId: saveCurrentUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: User Profile
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileSaveError'
          description: Save User Profile Error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Save current user profile
      tags:
      - userProfile
  /user/profile/tokens:
    get:
      description: Get all API token of the logged-in user.
      operationId: getCurrentUserApiTokens
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiToken'
                type: array
          description: Api Token
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get current user's API tokens
      tags:
      - apiToken
  /user/session/assumedRole:
    get:
      description: Get the assumed a role for the current session.
      operationId: getUserSessionAssumedRole
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: Get the assumed role
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get the assumed a role for the current session
      tags:
      - userSession
    put:
      description: Set the assumed role for the current session.
      operationId: saveUserSessionAssumedRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: Assume role was a success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleNotAvailableError'
          description: Save Assumed Role Error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Set the assumed role for the current session
      tags:
      - userSession
  /user/session/availableRoles:
    get:
      description: Get a list of available roles for this session.
      operationId: getUserSessionAvailableRoles
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roles'
          description: List of available roles
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get a list of available roles for this session
      tags:
      - userSession
  /user/authorization/for:
    get:
      description: Is the current user authorized for the provided permission
      operationId: getUserAuthorizationFor
      parameters:
      - in: query
        name: permission
        required: true
        schema:
          type: string
      responses:
        "204":
          description: User is authorized
        "400":
          description: Provided permission does not exist
        "401":
          description: User is not authorized
        "403":
          description: User is forbidden for the provided permission
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Is the current user authorized for the provided permission
      tags:
      - userAuthorization
  /events:
    post:
      description: Gets you a list of events that exist for topology and time selections.
      operationId: getEvents
      requestBody:
        $ref: '#/components/requestBodies/EventListBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventItemsWithTotal'
          description: Event API
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: "Get Events Topology: Topology Overflow Error or Validation\
            \ Error"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get events
      tags:
      - event
  /events/{eventId}:
    get:
      description: Retrieves a specific event by its identifier.
      operationId: getEvent
      parameters:
      - description: The Identifier of an event.
        in: path
        name: eventId
        required: true
        schema:
          $ref: '#/components/schemas/EventId'
      - in: query
        name: startTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: endTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: playHeadTimestampMs
        schema:
          format: instant
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyEvent'
          description: Event
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: Get Event Validation Error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventNotFoundError'
          description: Error when retrieving an event
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get single event
      tags:
      - event
  /eventsHistogram:
    post:
      description: Gets you a histogram of events that exist for topology and time
        selections.
      operationId: getEventsHistogram
      requestBody:
        $ref: '#/components/requestBodies/EventsHistogramBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsHistogram'
          description: Events Histogram
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: "Get Events Histogram: Topology Overflow Error or Validation\
            \ Error"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get events histogram
      tags:
      - event
  /eventTypes:
    get:
      description: Get a list of event types for a certain STQL query.
      operationId: getEventTypes
      parameters:
      - in: query
        name: startTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: endTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: topologyQuery
        required: true
        schema:
          type: string
      - in: query
        name: includeConnectedComponents
        required: false
        schema:
          type: boolean
      - in: query
        name: playHeadTimestampMs
        schema:
          format: instant
          type: integer
      - in: query
        name: eventTypes
        required: false
        schema:
          items:
            type: string
          type: array
      - in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: The category labels of an event.
        in: query
        name: eventCategories
        required: false
        schema:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
      - in: query
        name: eventSources
        required: false
        schema:
          items:
            type: string
          type: array
      - in: query
        name: eventTags
        required: false
        schema:
          items:
            type: string
          type: array
      - in: query
        name: match
        required: false
        schema:
          default: ""
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringItemsWithTotal'
          description: Event field suggestions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: "Get Events Types: Topology Overflow Error or Validation Error"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get event types
      tags:
      - event
  /eventSources:
    get:
      description: Get a list of event sources.
      operationId: getEventSources
      parameters:
      - in: query
        name: startTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: endTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: topologyQuery
        required: true
        schema:
          type: string
      - in: query
        name: includeConnectedComponents
        required: false
        schema:
          type: boolean
      - in: query
        name: playHeadTimestampMs
        schema:
          format: instant
          type: integer
      - in: query
        name: eventTypes
        required: false
        schema:
          items:
            type: string
          type: array
      - in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: The category labels of an event.
        in: query
        name: eventCategories
        required: false
        schema:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
      - in: query
        name: eventSources
        required: false
        schema:
          items:
            type: string
          type: array
      - in: query
        name: eventTags
        required: false
        schema:
          items:
            type: string
          type: array
      - in: query
        name: match
        schema:
          default: ""
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringItemsWithTotal'
          description: Event field suggestions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: "Get Events Sources: Topology Overflow Error or Validation\
            \ Error"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get event sources
      tags:
      - event
  /eventTags:
    get:
      description: Gets a list of tags that exist in a list of events.
      operationId: getEventTags
      parameters:
      - in: query
        name: startTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: endTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: topologyQuery
        required: true
        schema:
          type: string
      - in: query
        name: includeConnectedComponents
        required: false
        schema:
          type: boolean
      - in: query
        name: playHeadTimestampMs
        schema:
          format: instant
          type: integer
      - in: query
        name: eventTypes
        required: false
        schema:
          items:
            type: string
          type: array
      - in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: The category labels of an event.
        in: query
        name: eventCategories
        required: false
        schema:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
      - in: query
        name: eventSources
        required: false
        schema:
          items:
            type: string
          type: array
      - in: query
        name: eventTags
        required: false
        schema:
          items:
            type: string
          type: array
      - in: query
        name: match
        schema:
          default: ""
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringItemsWithTotal'
          description: Event field suggestions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: "Get Events Tags: Topology Overflow Error or Validation Error"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get event tags
      tags:
      - event
  /synchronization/health/streams:
    get:
      description: Status overview of the health synchronization streams.
      operationId: getHealthSynchronizationStreamsOverview
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamList'
          description: List of existing health streams
      summary: List health sync streams
      tags:
      - healthSynchronization
  /synchronization/health/streams/{healthStreamUrn}/status:
    get:
      description: Status overview of a single health synchronization stream
      operationId: getHealthSynchronizationStreamStatus
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamStatus'
          description: Status data
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamNotFound'
          description: Error when retrieving health stream
      summary: Get health sync stream status
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
  /synchronization/health/streams/{healthStreamUrn}/clearErrors:
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
    post:
      description: Clear all errors for a stream and its sub-streams.
      operationId: postHealthSynchronizationStreamClearErrors
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Return ok (but no content)
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamNotFound'
          description: Error when retrieving health stream
      summary: Clear health sync stream errors
      tags:
      - healthSynchronization
  /synchronization/health/streams/{healthStreamUrn}:
    delete:
      description: Delete a health synchronization stream. Deletion will not be immediate.
      operationId: deleteHealthSynchronizationStream
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Return ok (but no content)
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamNotFound'
          description: Error when retrieving health stream
      summary: Delete health sync stream
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
  /synchronization/health/streams/{healthStreamUrn}/substreams:
    get:
      description: Overview of all sub-streams in a certain health stream.
      operationId: getHealthSynchronizationSubStreamOverview
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubStreamList'
          description: List of substreams
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamNotFound'
          description: Error when retrieving health stream
      summary: List health sync sub-streams
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
  /synchronization/health/streams/{healthStreamUrn}/topologyMatches:
    get:
      description: Overview of check-states matched to topology on the main stream.
      operationId: getHealthSynchronizationStreamTopologyMatches
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyMatchResult'
          description: Topology matches
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSubStreamError'
          description: Error when retrieving health sub stream
      summary: List health sync stream check-states
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
  /synchronization/health/streams/{healthStreamUrn}/substreams/{healthSyncSubStreamId}/status:
    get:
      description: Status overview of a single health synchronization sub stream
      operationId: getHealthSynchronizationSubStreamStatus
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      - description: Health synchronization sub stream id.
        in: path
        name: healthSyncSubStreamId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSubStreamStatus'
          description: Sub stream status
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSubStreamError'
          description: Error when retrieving health sub stream
      summary: Get health sync sub-stream status
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
    - description: Health synchronization sub stream id.
      in: path
      name: healthSyncSubStreamId
      required: true
      schema:
        type: string
  /synchronization/health/streams/{healthStreamUrn}/substreams/{healthSyncSubStreamId}/topologyMatches:
    get:
      description: Overview of check-states matched to topology on the main stream.
      operationId: getHealthSynchronizationSubStreamTopologyMatches
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      - description: Health synchronization sub stream id.
        in: path
        name: healthSyncSubStreamId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyMatchResult'
          description: Topology matches for a specified sub stream
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSubStreamError'
          description: Error when retrieving health sub stream
      summary: List health sync sub-stream check-states
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
    - description: Health synchronization sub stream id.
      in: path
      name: healthSyncSubStreamId
      required: true
      schema:
        type: string
  /synchronization/topology/streams:
    get:
      description: Overview of the topology synchronization streams
      operationId: getTopologySynchronizationStreams
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyStreamList'
          description: List of existing topology streams
      summary: Overview of the topology synchronization streams
      tags:
      - topologySynchronization
  /synchronization/topology/streams/sync:
    get:
      description: "Overview of a specific Topology Stream, queried by node id or\
        \ sync identifier"
      operationId: getTopologySynchronizationStreamById
      parameters:
      - allowReserved: true
        in: query
        name: identifier
        required: true
        schema:
          type: string
      - allowReserved: false
        in: query
        name: identifierType
        required: true
        schema:
          $ref: '#/components/schemas/IdentifierType'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyStreamListItemWithErrorDetails'
          description: A specific topology stream
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSyncIdentifier'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologySyncError'
          description: Sync with given identifier not found
      summary: "Overview of a specific Topology Stream, queried by node id or sync\
        \ identifier"
      tags:
      - topologySynchronization
    parameters:
    - allowReserved: true
      in: query
      name: identifier
      required: true
      schema:
        type: string
    - allowReserved: false
      in: query
      name: identifierType
      required: true
      schema:
        $ref: '#/components/schemas/IdentifierType'
  /synchronization/topology/streams/status:
    get:
      description: "Metrics of a specific Topology Stream, queried by node id"
      operationId: getTopologySynchronizationStreamStatusById
      parameters:
      - allowReserved: true
        in: query
        name: identifier
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyStreamMetrics'
          description: A specific topology stream metrics
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSyncIdentifier'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologySyncError'
          description: Sync with given identifier not found
      summary: "Metrics of a specific Topology Stream, queried by node id"
      tags:
      - topologySynchronization
    parameters:
    - allowReserved: true
      in: query
      name: identifier
      required: true
      schema:
        type: string
  /synchronization/topology/streams/clearErrors:
    parameters:
    - allowReserved: true
      in: query
      name: identifier
      required: true
      schema:
        type: string
    - allowReserved: false
      in: query
      name: identifierType
      required: true
      schema:
        $ref: '#/components/schemas/IdentifierType'
    post:
      description: Clear all the errors related to a specific sync
      operationId: postTopologySynchronizationStreamClearErrors
      parameters:
      - allowReserved: true
        in: query
        name: identifier
        required: true
        schema:
          type: string
      - allowReserved: false
        in: query
        name: identifierType
        required: true
        schema:
          $ref: '#/components/schemas/IdentifierType'
      responses:
        "204":
          description: Return ok (but no content)
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSyncIdentifier'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologySyncError'
          description: Sync with given identifier not found
      summary: Clear all the errors related to a specific sync
      tags:
      - topologySynchronization
  /script/execute:
    post:
      description: Execute a StackState Scripting Language or Template Language script
        with arbitrary arguments.
      operationId: scriptExecute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteScriptRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteScriptResponse'
          description: Result of executing the script.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteScriptError'
          description: Error occurred while executing script.
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteScriptTimeoutError'
          description: Script timed out.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Execute script
      tags:
      - scripting
  /server/info:
    get:
      description: "Get information of the StackState information, such as version,\
        \ deployment mode, etc."
      operationId: serverInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfo'
          description: Server information
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get server info
      tags:
      - server
  /security/tokens:
    get:
      description: Get service tokens.
      operationId: getServiceTokens
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ServiceToken'
                type: array
          description: Service Tokens
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get service tokens
      tags:
      - serviceToken
    post:
      description: Create new service token.
      operationId: createNewServiceToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewServiceTokenRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTokenCreatedResponse'
          description: The newly created service token
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTokenCreateError'
          description: Create service token error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Create new service token
      tags:
      - serviceToken
  /security/tokens/{serviceTokenId}:
    delete:
      description: Delete service token.
      operationId: deleteServiceToken
      parameters:
      - description: The identifier of a service token
        in: path
        name: serviceTokenId
        required: true
        schema:
          $ref: '#/components/schemas/ServiceTokenId'
      responses:
        "204":
          description: Return ok (but no content)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Delete service token
      tags:
      - serviceToken
  /security/ingestion/api_keys:
    get:
      description: Returns only metadata without token itself
      operationId: getIngestionApiKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/IngestionApiKey'
                type: array
          description: All Ingestion Api Keys
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: List Ingestion Api Keys
      tags:
      - ingestionApiKey
    post:
      description: "Generates token and then returns it in the response, the token\
        \ can't be obtained any more after that"
      operationId: generateIngestionApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateIngestionApiKeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedIngestionApiKeyResponse'
          description: The newly generated Ingestion Api Key
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestionApiKeyCreateError'
          description: Invalid arguments
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Generate a new Ingestion Api Key
      tags:
      - ingestionApiKey
  /security/ingestion/authorize:
    post:
      description: Checks if an ingestion api key is valid
      operationId: authorizeIngestionApiKey
      parameters:
      - description: "By default, the endpoint uses only Ingestion API Keys, true\
          \ value - to verify also Receiver API Key"
        in: query
        name: withReceiverKey
        required: false
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizeIngestionApiKeyRequest'
        required: true
      responses:
        "204":
          description: Ingestion Api Key is valid
        "403":
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Check authorization for an Ingestion Api Key
      tags:
      - authorizeIngestionApiKey
  /security/ingestion/api_keys/{ingestionApiKeyId}:
    delete:
      description: "Deleted token can't be used by sources, so all ingestion pipelines\
        \ for that key will fail"
      operationId: deleteIngestionApiKey
      parameters:
      - description: The identifier of a key
        in: path
        name: ingestionApiKeyId
        required: true
        schema:
          $ref: '#/components/schemas/IngestionApiKeyId'
      responses:
        "204":
          description: The key has been deleted
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Delete Ingestion Api Key
      tags:
      - ingestionApiKey
  /security/permissions/list:
    get:
      description: Get a list of available permissions
      operationId: getPermissions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permissions'
          description: A list of permissions
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: List permissions
      tags:
      - permissions
  /security/permissions/{subject}:
    delete:
      description: Revoke permissions of a subject
      operationId: revokePermissions
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          $ref: '#/components/schemas/Subject'
      - in: query
        name: resource
        schema:
          $ref: '#/components/schemas/Resource'
      - in: query
        name: permission
        schema:
          $ref: '#/components/schemas/Permission'
      responses:
        "200":
          description: Permission was revoked.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Revoke permissions
      tags:
      - permissions
    get:
      description: Describe permissions granted to a subject
      operationId: describePermissions
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          $ref: '#/components/schemas/Subject'
      - in: query
        name: resource
        schema:
          $ref: '#/components/schemas/Resource'
      - in: query
        name: permission
        schema:
          $ref: '#/components/schemas/Permission'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDescription'
          description: A permission description for a subject
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Describe permissions
      tags:
      - permissions
    post:
      description: Grant permissions to a subject
      operationId: grantPermissions
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          $ref: '#/components/schemas/Subject'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantPermission'
        required: true
      responses:
        "200":
          description: Permission was granted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Grant permissions
      tags:
      - permissions
  /security/subjects:
    get:
      description: List all subjects and their scopes
      operationId: listSubjects
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectList'
          description: Subject list
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: List subjects
      tags:
      - subject
  /security/subjects/{subject}:
    delete:
      description: Remove a security subject
      operationId: deleteSubject
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          $ref: '#/components/schemas/Subject'
      responses:
        "200":
          description: Subject deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Delete a subject
      tags:
      - subject
    get:
      description: Describe a subject and its scope
      operationId: getSubject
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          $ref: '#/components/schemas/Subject'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectConfig'
          description: Subject config
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get subject
      tags:
      - subject
    put:
      description: Create a new security subject
      operationId: createSubject
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          $ref: '#/components/schemas/Subject'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubject'
        required: true
      responses:
        "200":
          description: Subject created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Create a subject
      tags:
      - subject
  /subscription:
    get:
      description: Get the state of the StackState license
      operationId: getSubscription
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionState'
          description: Subscription information
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get subscription info
      tags:
      - subscription
    post:
      description: Update the StackState license
      operationId: postSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewLicense'
        description: The new license
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionState'
          description: Subscription information
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Submit a new license to update the subscription
      tags:
      - subscription
  /problems/{problemId}/causing-events:
    get:
      description: Resulting events are ordered by likeness to be an actual problem
        cause
      operationId: getProblemCausingEvents
      parameters:
      - description: The problem id number.
        in: path
        name: problemId
        required: true
        schema:
          $ref: '#/components/schemas/ProblemId'
      - description: A timestamp at which resources will be queried. If not given
          the resources are queried for current time.
        in: query
        name: topologyTime
        required: false
        schema:
          $ref: '#/components/schemas/Instant'
      - description: Maximum number of resources to be returned in result.
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/Limit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCausingEventsResult'
          description: Get events causing a problem successful result
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCausingEventsBadRequest'
          description: Events causing a problem can not be got because of the bad
            request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCausingEventsNotFound'
          description: Events causing a problem can not be got because some elements
            cannot be found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCausingEventsServiceUnaivailable'
          description: Events causing a problem can not be got because of the problems
            with one of the services
      summary: List possible events which led to the problem
      tags:
      - problem
  /metrics/query:
    get:
      description: The endpoint evaluates an instant query at a single point in time
      operationId: getInstantQuery
      parameters:
      - description: Prometheus expression query string
        in: query
        name: query
        required: true
        schema:
          $ref: '#/components/schemas/PromQuery'
      - description: Evaluation timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: time
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: Evaluation timeout
        in: query
        name: timeout
        required: false
        schema:
          $ref: '#/components/schemas/PromTimeout'
      - description: Query resolution step width in duration format or float number
          of seconds.
        example: 5m or 300
        in: query
        name: step
        required: false
        schema:
          $ref: '#/components/schemas/PromStep'
      - description: Enforce additional label filters for queries
        example: service=carts
        explode: true
        in: query
        name: post_filter
        required: false
        schema:
          $ref: '#/components/schemas/PromPostFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: JSON response envelope
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: when queries time out or abort
      summary: Instant query at a single point in time
      tags:
      - metric
    post:
      description: The endpoint evaluates an instant query at a single point in time
      operationId: postInstantQuery
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              post_filter:
                explode: true
                style: form
            schema:
              $ref: '#/components/schemas/PromQueryRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: JSON response envelope
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: when queries time out or abort
      summary: Instant query at a single point in time
      tags:
      - metric
  /metrics/query_range:
    get:
      description: The endpoint evaluates an expression query over a range of time
      operationId: getRangeQuery
      parameters:
      - description: Prometheus expression query string
        in: query
        name: query
        required: true
        schema:
          $ref: '#/components/schemas/PromQuery'
      - description: Start timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: start
        required: true
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: End timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: end
        required: true
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: Query resolution step width in duration format or float number
          of seconds.
        example: 5m or 300
        in: query
        name: step
        required: true
        schema:
          $ref: '#/components/schemas/PromStep'
      - description: Evaluation timeout
        in: query
        name: timeout
        required: false
        schema:
          $ref: '#/components/schemas/PromTimeout'
      - description: Align start and end times with step size
        in: query
        name: aligned
        required: false
        schema:
          type: boolean
      - description: Maximum number of data points to return.
        example: "2"
        in: query
        name: maxNumberOfDataPoints
        required: false
        schema:
          $ref: '#/components/schemas/PromMaxNumberOfDataPoints'
      - description: Enforce additional label filters for queries
        example: service=carts
        explode: true
        in: query
        name: post_filter
        required: false
        schema:
          $ref: '#/components/schemas/PromPostFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: JSON response envelope
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: when queries time out or abort
      summary: Query over a range of time
      tags:
      - metric
    post:
      description: The endpoint evaluates an expression query over a range of time
      operationId: postRangeQuery
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              post_filter:
                explode: true
                style: form
            schema:
              $ref: '#/components/schemas/PromQueryRangeRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: JSON response envelope
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromEnvelope'
          description: when queries time out or abort
      summary: Query over a range of time
      tags:
      - metric
  /metrics/query_exemplars:
    get:
      description: "Experimental: The returns a list of exemplars for a valid PromQL\
        \ query for a specific time range"
      operationId: getExemplarsQuery
      parameters:
      - description: Prometheus expression query string
        in: query
        name: query
        required: true
        schema:
          $ref: '#/components/schemas/PromQuery'
      - description: Start timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: start
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: End timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: end
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: JSON response envelope
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: when queries time out or abort
      summary: "Experimental: Exemplars for a specific time range"
      tags:
      - metric
    post:
      description: "Experimental: The returns a list of exemplars for a valid PromQL\
        \ query for a specific time range"
      operationId: postExemplarsQuery
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromQueryExemplarRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: JSON response envelope
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromExemplarEnvelope'
          description: when queries time out or abort
      summary: "Experimental: Exemplars for a specific time range"
      tags:
      - metric
  /metrics/labels:
    get:
      description: The endpoint returns a list of label names
      operationId: getLabels
      parameters:
      - description: Start timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: start
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: End timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: end
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: Repeated series selector argument that selects the series from
          which to read the label names. Optional.
        example: "process_start_time_seconds{job='prometheus'}"
        explode: true
        in: query
        name: "match[]"
        required: false
        schema:
          $ref: '#/components/schemas/PromMatch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: JSON response envelope for labels
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: When requests time out or abort
      summary: List of label names
      tags:
      - metric
    post:
      description: The endpoint returns a list of label names
      operationId: postLabels
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              match[]:
                explode: true
                style: form
            schema:
              $ref: '#/components/schemas/PromLabelsRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: JSON response envelope for labels
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: When requests time out or abort
      summary: List of label names
      tags:
      - metric
  /metrics/label/{label}/values:
    get:
      description: The endpoint returns a list of label values for a provided label
        name
      operationId: getLabelValues
      parameters:
      - description: Prometheus query label
        in: path
        name: label
        required: true
        schema:
          $ref: '#/components/schemas/PromLabel'
      - description: Start timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: start
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: End timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: end
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: Repeated series selector argument that selects the series from
          which to read the label names. Optional.
        example: "process_start_time_seconds{job='prometheus'}"
        explode: true
        in: query
        name: "match[]"
        required: false
        schema:
          $ref: '#/components/schemas/PromMatch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: JSON response envelope for labels
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: When requests time out or abort
      summary: List of label values for a provided label name
      tags:
      - metric
    post:
      description: The endpoint returns a list of label values for a provided label
        name
      operationId: postLabelValues
      parameters:
      - description: Prometheus query label
        in: path
        name: label
        required: true
        schema:
          $ref: '#/components/schemas/PromLabel'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              match[]:
                explode: true
                style: form
            schema:
              $ref: '#/components/schemas/PromLabelValuesRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: JSON response envelope for labels
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromLabelsEnvelope'
          description: When requests time out or abort
      summary: List of label values for a provided label name
      tags:
      - metric
  /metrics/series:
    get:
      description: The endpoint returns the list of time series that match a certain
        label set
      operationId: getSeries
      parameters:
      - description: "Repeated series selector argument that selects the series to\
          \ return. At least one match[] argument must be provided."
        example: "process_start_time_seconds{job='prometheus'}"
        explode: true
        in: query
        name: "match[]"
        required: true
        schema:
          $ref: '#/components/schemas/PromMatch'
      - description: Start timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: start
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      - description: End timestamp in rfc3339 format or unix format
        example: 2015-07-01T20:10:51.781Z or 1660817432
        in: query
        name: end
        required: false
        schema:
          $ref: '#/components/schemas/PromTime'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: JSON response envelope for series
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: When requests time out or abort
      summary: List of time series that match a certain label set
      tags:
      - metric
    post:
      description: The endpoint returns the list of time series that match a certain
        label set
      operationId: postSeries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              match[]:
                explode: true
                style: form
            schema:
              $ref: '#/components/schemas/PromSeriesRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: JSON response envelope for series
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromSeriesEnvelope'
          description: When requests time out or abort
      summary: List of time series that match a certain label set
      tags:
      - metric
  /metrics/metadata:
    get:
      description: "The endpoint returns metadata about metrics currently scraped\
        \ from targets. However, it does not provide any target information. This\
        \ is considered experimental and might change in the future"
      operationId: getMetadata
      parameters:
      - description: Maximum number of metrics to return.
        example: "2"
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/PromLimit'
      - description: A metric name to filter metadata for. All metric metadata is
          retrieved if left empty.
        example: http_requests_total
        in: query
        name: metric
        required: false
        schema:
          $ref: '#/components/schemas/PromMetric'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: JSON response envelope for metadata
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: When requests time out or abort
      summary: Metadata about metrics currently scraped from targets
      tags:
      - metric
    post:
      description: "The endpoint returns metadata about metrics currently scraped\
        \ from targets. However, it does not provide any target information. This\
        \ is considered experimental and might change in the future"
      operationId: postMetadata
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromMetadataRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: JSON response envelope for metadata
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: Parameters are missing or incorrect
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: Expression can't be executed (RFC4918)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromMetadataEnvelope'
          description: When requests time out or abort
      summary: Metadata about metrics currently scraped from targets
      tags:
      - metric
  /topic:
    get:
      description: List all Kafka topics available in StackState
      operationId: list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicList'
          description: Topic list
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: List topics
      tags:
      - topic
  /topic/{topic}:
    get:
      description: List Kafka messages on the topic of choice
      operationId: describe
      parameters:
      - in: path
        name: topic
        required: true
        schema:
          $ref: '#/components/schemas/TopicName'
      - in: query
        name: limit
        schema:
          type: integer
      - in: query
        name: offset
        schema:
          format: int64
          type: integer
      - in: query
        name: partition
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
          description: Message list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Describe a topic
      tags:
      - topic
  /k8s/logs:
    get:
      operationId: getKubernetesLogs
      parameters:
      - description: Logs initial timestamp.
        in: query
        name: from
        required: true
        schema:
          $ref: '#/components/schemas/Instant_1'
      - description: Logs last timestamp.
        in: query
        name: to
        required: true
        schema:
          $ref: '#/components/schemas/Instant_1'
      - description: Maximum number of the log lines in the result.
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: The page for which the log lines of pageSize must be returned.
        in: query
        name: page
        required: false
        schema:
          default: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Find only logs containing query text.
        in: query
        name: query
        required: false
        schema:
          minLength: 3
          type: string
      - description: Find only logs for the given pod UID.
        in: query
        name: podUID
        required: true
        schema:
          format: uuid
          type: string
      - description: Cluster name which identifies the scope of the RBAC data
        in: query
        name: cluster
        required: true
        schema:
          type: string
      - description: Find only logs for the given container names.
        in: query
        name: containerNames
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Fetch Oldest or Newest first.
        in: query
        name: direction
        schema:
          $ref: '#/components/schemas/LogsDirection'
      - description: "Search a specific log severity WARN, ERROR, OTHER."
        in: query
        name: severity
        schema:
          items:
            $ref: '#/components/schemas/LogSeverity'
          type: array
      - description: A timestamp at which the pod existed. If not given the pod is
          queried at current time.
        in: query
        name: topologyTime
        schema:
          format: instant
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetKubernetesLogsResult'
          description: Get logs successful result
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetKubernetesLogsBadRequest'
          description: Can not find the requested logs because one or more request
            params are invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get Kubernetes logs
      tags:
      - kubernetes_logs
  /k8s/logs/histogram:
    get:
      operationId: getKubernetesLogsHistogram
      parameters:
      - description: Logs initial timestamp.
        in: query
        name: from
        required: true
        schema:
          $ref: '#/components/schemas/Instant_1'
      - description: Logs last timestamp.
        in: query
        name: to
        required: true
        schema:
          $ref: '#/components/schemas/Instant_1'
      - description: Find only logs containing query text.
        in: query
        name: query
        required: false
        schema:
          minLength: 3
          type: string
      - description: Find only logs for the given pod UID.
        in: query
        name: podUID
        required: true
        schema:
          format: uuid
          type: string
      - description: Cluster name which identifies the scope of the RBAC data
        in: query
        name: cluster
        required: true
        schema:
          type: string
      - description: Find only logs for the given container names.
        in: query
        name: containerNames
        required: false
        schema:
          items:
            type: string
          type: array
      - description: The number of histogram buckets.
        in: query
        name: bucketsCount
        required: true
        schema:
          format: int32
          type: integer
      - description: "Search a specific log severity WARN, ERROR, OTHER."
        in: query
        name: severity
        schema:
          items:
            $ref: '#/components/schemas/LogSeverity'
          type: array
      - description: A timestamp at which the pod existed. If not given the pod is
          queried at current time.
        in: query
        name: topologyTime
        schema:
          format: instant
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetKubernetesLogsHistogramResult'
          description: Get logs histogram successful result
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetKubernetesLogsHistogramBadRequest'
          description: Can not get the logs histogram because one or more request
            params are invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get Kubernetes logs histogram
      tags:
      - kubernetes_logs
  /k8s/logs/autocomplete:
    get:
      operationId: getKubernetesLogsAutocomplete
      parameters:
      - description: Logs initial timestamp.
        in: query
        name: from
        required: true
        schema:
          $ref: '#/components/schemas/Instant_1'
      - description: Logs last timestamp.
        in: query
        name: to
        required: true
        schema:
          $ref: '#/components/schemas/Instant_1'
      - description: Find only logs for the given pod UID.
        in: query
        name: podUID
        required: true
        schema:
          format: uuid
          type: string
      - description: Cluster name which identifies the scope of the RBAC data
        in: query
        name: cluster
        required: true
        schema:
          type: string
      - description: A timestamp at which the pod existed. If not given the pod is
          queried at current time.
        in: query
        name: topologyTime
        schema:
          format: instant
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetKubernetesLogsAutocompleteResult'
          description: Get logs autocomplete successful result
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetKubernetesLogsAutocompleteBadRequest'
          description: Can not get the logs autocomplete values because one or more
            request params are invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get Kubernetes logs autocomplete values
      tags:
      - kubernetes_logs
  /traces/query:
    post:
      description: Query for traces using filters. Filters that accept an array of
        values match if any of the values match (think of a SQL IN expression).
      operationId: queryTraces
      parameters:
      - description: Filter spans by start time >= value
        example: 1707117737
        in: query
        name: start
        required: true
        schema:
          $ref: '#/components/schemas/Instant_1'
      - description: Filter spans by start time < value
        example: 1707121359
        in: query
        name: end
        required: true
        schema:
          $ref: '#/components/schemas/Instant_1'
      - description: Number of spans in 1 page
        example: 30
        in: query
        name: pageSize
        required: false
        schema:
          default: 20
          format: int32
          maximum: 200
          minimum: 1
          type: integer
      - description: "Get the specified page (with pageSize # of spans), defaults\
          \ to page 0"
        example: 4
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/traceQuery'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceQueryResponse'
          description: Traces
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceApiSpansBadRequest'
          description: Bad spans request response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceApiError'
          description: Server error response
      summary: Query for traces
      tags:
      - traces
  /traces/duration/histogram:
    post:
      description: Query for durations using filters.  Filters that accept an array
        of values match if any of the values match (think of a SQL IN expression).
      operationId: queryDuration
      parameters:
      - description: Filter spans by start time >= value
        example: 1707117737
        in: query
        name: start
        required: true
        schema:
          $ref: '#/components/schemas/Instant_1'
      - description: Filter spans by start time < value
        example: 1707121359
        in: query
        name: end
        required: true
        schema:
          $ref: '#/components/schemas/Instant_1'
      - description: The number of histogram buckets.
        in: query
        name: bucketsCount
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/traceFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DurationHistogram'
          description: DurationHistogram
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceApiSpansBadRequest'
          description: Bad spans request response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceApiError'
          description: Server error response
      summary: Query duration distribution
      tags:
      - traces
  /traces/{traceId}:
    get:
      description: Get a full trace by id only
      operationId: getTrace
      parameters:
      - description: The id of the trace
        in: path
        name: traceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trace'
          description: A trace with all its spans
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceApiTraceNotFound'
          description: Trace not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceApiError'
          description: Server error response
      summary: Fetch a trace
      tags:
      - traces
  /traces/{traceId}/spans/{spanId}:
    get:
      description: Get a single span for a trace
      operationId: getSpan
      parameters:
      - description: The id of the trace
        in: path
        name: traceId
        required: true
        schema:
          type: string
      - description: The id of the span
        in: path
        name: spanId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpanResponse'
          description: Span
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceApiSpanNotFound'
          description: Span not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceApiError'
          description: Server error response
      summary: Get a span
      tags:
      - traces
  /traces/spans/fields/attributes:
    get:
      description: "Suggestions for attribute names, both resource and span attributes.\
        \ Attributes match when their name contains the provided part, at most 100\
        \ suggestions will be returned. Make the part longer to get more accurate\
        \ suggestions."
      operationId: suggestionsAttributeName
      parameters:
      - description: Get suggestions based of this partial name
        in: query
        name: contains
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Suggestions'
          description: "Suggestions for property values, attributes names and attribute\
            \ values"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceApiError'
          description: Server error response
      summary: Suggestions for attribute names
      tags:
      - traces
  /traces/spans/fields/attributes/{attributeName}/values:
    get:
      description: "Suggestions for attribute values, both resource and span attributes.\
        \ Attribute values match when the value contains the provided part, at most\
        \ 100 suggestions will be returned. Make the part longer to get more accurate\
        \ suggestions."
      operationId: suggestionsAttributeValue
      parameters:
      - description: Get suggestions for this attribute
        in: path
        name: attributeName
        required: true
        schema:
          type: string
      - description: Get suggestions based on this partial value
        in: query
        name: contains
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Suggestions'
          description: "Suggestions for property values, attributes names and attribute\
            \ values"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceApiError'
          description: Server error response
      summary: Suggestions for attribute values
      tags:
      - traces
  /traces/spans/fields/{field}/values:
    get:
      description: "Suggestions for values of of the span fields that can be filtered\
        \ on except resource and span attributes. Values match when they contain the\
        \ provided part, at most 100 suggestions will be returned. Make the part longer\
        \ to get more accurate suggestions."
      operationId: suggestionsFieldValues
      parameters:
      - description: Get suggestions for this field
        in: path
        name: field
        required: true
        schema:
          $ref: '#/components/schemas/SpanSuggestionField'
      - description: Get suggestions for this field based on this partial value
        in: query
        name: contains
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Suggestions'
          description: "Suggestions for property values, attributes names and attribute\
            \ values"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceApiError'
          description: Server error response
      summary: Suggestions for span fields
      tags:
      - traces
  /traces/components:
    post:
      description: "Based on the resource attributes on a span, retrieve components\
        \ that have a TraceBinding for it."
      operationId: spanComponents
      requestBody:
        $ref: '#/components/requestBodies/componentQuery'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpanComponents'
          description: Components
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceApiError'
          description: Server error response
      summary: Fetch components based on resource attributes
      tags:
      - traces
  /layouts:
    get:
      description: List all available layout hints in the system
      operationId: getAllLayouts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayoutList'
          description: List of all available layout hints
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayoutApiError'
          description: container for all error response
      summary: List layout hints
      tags:
      - layout
  /components/{componentIdOrUrn}/healthHistory:
    get:
      description: Get a component health history for a defined period of time by
        id
      operationId: getComponentHealthHistory
      parameters:
      - description: The id or identifier (urn) of a component
        in: path
        name: componentIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/ComponentIdOrUrn'
      - description: The start time of a time range to query resources.
        in: query
        name: startTime
        required: true
        schema:
          format: instant
          type: integer
      - description: The end time of a time range to query resources. If not given
          the endTime is set to current time.
        in: query
        name: endTime
        required: false
        schema:
          format: instant
          type: integer
      - description: A timestamp at which resources will be queried. If not given
          the resources are queried at current time.
        in: query
        name: topologyTime
        required: false
        schema:
          format: instant
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentHealthHistory'
          description: Component health history
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentNotFoundError'
          description: Component not found error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get a component health history
      tags:
      - component
  /agents/{agentId}/checkLease:
    post:
      description: Checks the lease of an agent and might register it if it does not
        exist yet.
      operationId: agentCheckLease
      parameters:
      - description: The identifier of an agent
        in: path
        name: agentId
        required: true
        schema:
          $ref: '#/components/schemas/AgentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckLeaseRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentRegistration'
          description: The lease was given
        "403":
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentRegistration'
          description: Too many agents registered
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Check the lease of an agent.
      tags:
      - agentLeases
  /agents:
    get:
      description: Give an overview of all registered agents
      operationId: allAgentRegistrations
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentRegistrations'
          description: All registered agents
        "403":
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Overview of registered agents
      tags:
      - agentRegistrations
  /system/notifications:
    get:
      description: All active system notifications
      operationId: allSystemNotifications
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemNotifications'
          description: All system notifications
        "403":
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Overview of system notifications
      tags:
      - systemNotifications
  /timeline/summary:
    post:
      description: Event summary and aggregated health changes for a topology over
        a range of time
      operationId: getTimelineSummary
      requestBody:
        $ref: '#/components/requestBodies/timelineSummaryRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimelineSummary'
          description: Event summary and aggregated health changes over a range of
            time
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimelineSummaryOverflow'
          description: Limit was reached during timeline processing
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimelineSummaryError'
          description: Errors when computing events and health state
      summary: Timeline summary
      tags:
      - timeline
  /dashboards:
    get:
      description: "Get a list of dashboards, optionally filtered by name."
      operationId: getDashboards
      parameters:
      - description: "If true, includes the full dashboard content in the response.\
          \ Defaults to false (only metadata is returned) for retrieval endpoints.\
          \ Defaults to true for create/update operations."
        in: query
        name: loadFullDashboard
        required: false
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardList'
          description: List of dashboards
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get a list of dashboards
      tags:
      - dashboards
    post:
      description: Create a new dashboard. The dashboard can be private or public
        based on the scope parameter.
      operationId: createDashboard
      requestBody:
        $ref: '#/components/requestBodies/dashboardWriteRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardReadFullSchema'
          description: A single fully loaded dashboard response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardClientErrors'
          description: Dashboard client errors.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Create a new dashboard
      tags:
      - dashboards
  /dashboards/{dashboardIdOrUrn}:
    delete:
      description: Delete a dashboard by its identifier. Only user-owned dashboards
        can be deleted.
      operationId: deleteDashboard
      parameters:
      - description: The identifier of a dashboard
        in: path
        name: dashboardIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/DashboardIdOrUrn'
      responses:
        "204":
          description: "Dashboard deleted (return ok, but no content)."
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardClientErrors'
          description: Dashboard client errors.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardAuthorizationError'
          description: Dashboard not found.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardNotFoundError'
          description: Dashboard not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Delete a dashboard
      tags:
      - dashboards
    get:
      description: Get a dashboard by its identifier.
      operationId: getDashboard
      parameters:
      - description: The identifier of a dashboard
        in: path
        name: dashboardIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/DashboardIdOrUrn'
      - description: "If true, includes the full dashboard content in the response.\
          \ Defaults to false (only metadata is returned) for retrieval endpoints.\
          \ Defaults to true for create/update operations."
        in: query
        name: loadFullDashboard
        required: false
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardReadSchema'
          description: A single dashboard
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardClientErrors'
          description: Dashboard client errors.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardNotFoundError'
          description: Dashboard not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get a single dashboard
      tags:
      - dashboards
    patch:
      description: Patch an existing dashboard by its identifier. Only user-owned
        dashboard can be patched.
      operationId: patchDashboard
      parameters:
      - description: The identifier of a dashboard
        in: path
        name: dashboardIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/DashboardIdOrUrn'
      requestBody:
        $ref: '#/components/requestBodies/dashboardPatchRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardReadFullSchema'
          description: A single fully loaded dashboard response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardClientErrors'
          description: Dashboard client errors.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardAuthorizationError'
          description: Dashboard not found.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardNotFoundError'
          description: Dashboard not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Patch a dashboard
      tags:
      - dashboards
  /dashboards/{dashboardIdOrUrn}/clone:
    post:
      description: Clone a dashboard by its identifier.
      operationId: cloneDashboard
      parameters:
      - description: The identifier of a dashboard
        in: path
        name: dashboardIdOrUrn
        required: true
        schema:
          $ref: '#/components/schemas/DashboardIdOrUrn'
      requestBody:
        $ref: '#/components/requestBodies/dashboardCloneRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardReadFullSchema'
          description: A single fully loaded dashboard response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardClientErrors'
          description: Dashboard client errors.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardAuthorizationError'
          description: Dashboard not found.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardNotFoundError'
          description: Dashboard not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Clone a dashboard
      tags:
      - dashboards
  /dummy/dummy:
    get:
      description: ""
      operationId: dummy
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackElementNotFound'
          description: Error when handling an element which cannot be found.
      summary: Dummy path to fix omission in openapi generation when a type is not
        included.
      tags:
      - dummy
components:
  requestBodies:
    nodeClone:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NodeName'
      description: New name for the node
      required: true
    monitorPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorPatch'
      description: Monitor base properties
      required: true
    monitorPreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorPreview'
      description: Monitor overrides in order to run a preview
      required: true
    monitorSnapshot:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorSnapshot'
      description: Monitor snapshot of health states
      required: true
    monitorFunctionTest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorFunctionTest'
      description: Monitor function arguments to test
      required: true
    monitorIdentifierLookup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorIdentifierLookup'
      description: Component type and metric query for identifier lookup
      required: true
    joinSlackChannel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SlackChannelId'
      description: Provide a Slack channel id to join the specified Slack channel
      required: true
    webhookChannelWrite:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookChannelWriteSchema'
      description: Create or update a webhook channel
      required: true
    opsgenieChannelWrite:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OpsgenieChannelWriteSchema'
      description: Create or update a opsgenie channel
      required: true
    teamsChannelWrite:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TeamsChannelWriteSchema'
      description: Create or update a teams channel
      required: true
    emailChannelWrite:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailChannelWriteSchema'
      description: Create or update a email channel
      required: true
    notificationConfigurationWrite:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationConfigurationWriteSchema'
      description: Create or update a notification configuration
      required: true
    EventListBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventListRequest'
      required: true
    EventsHistogramBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventsHistogramRequest'
      required: true
    traceQuery:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TraceQuery'
      description: Query for traces
      required: true
    traceFilter:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TraceFilter'
      description: Filter for traces
      required: true
    componentQuery:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ComponentQuery'
      description: Span properties to find matching components
      required: true
    timelineSummaryRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TimelineSummaryRequest'
      description: Request for event summary and aggregated health over time
      required: true
    dashboardWriteRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DashboardWriteSchema'
      required: true
    dashboardPatchRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DashboardPatchSchema'
      required: true
    dashboardCloneRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DashboardCloneSchema'
      required: true
  responses:
    genericErrorsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorsResponse'
      description: Error when handling the request on the server side.
    monitors:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorList'
      description: List of all available monitors
    monitorApiError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorApiError'
      description: container for all error response
    monitor:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Monitor'
      description: Full representation of a monitor
    invalidMonitorIdentifierError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidMonitorIdentifierError'
      description: Invalid monitor id or identifier
    monitorNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorNotFoundError'
      description: monitor was not found in the database
    monitorValidationError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorValidationError'
      description: monitor request has errors
    monitorPreviewResult:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorPreviewResult'
      description: Summary representation of the result of a monitor run
    monitorCheckStates:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorCheckStates'
      description: Check states of a monitor
    monitorRunResult:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorRunResult'
      description: Full representation of the result of a monitor run
    monitorStatus:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorStatus'
      description: Full representation of a monitor with status
    monitorFunctionNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorFunctionNotFoundError'
      description: monitor function was not found in the database
    monitorIdentifierSuggestions:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorIdentifierSuggestions'
      description: Identifier suggestions for multiple component identifier lookup
    monitorsOverview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorOverviewList'
      description: List of all available monitors with their function and runtime
        data
    monitorCheckStatus:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorCheckStatus'
      description: Monitor check status
    monitorCheckStatusApiError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorCheckStatusApiError'
      description: container for all error response
    monitorCheckStatusNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorCheckStatusNotFoundError'
      description: monitor check status was not found in the database
    monitorCheckStatusRelatedFailures:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorCheckStatusRelatedFailures'
      description: Monitor check status related failures
    monitorCheckStatusHealthHistory:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorCheckStatusHealthHistory'
      description: Monitor check status health history
    slackNotificationChannel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SlackNotificationChannel'
      description: Slack notification channel
    notificationChannelError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationChannelError'
      description: Error while executing the request.
    notificationChannelNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationChannelNotFound'
      description: Notification channel was not found in the database
    slackChannels:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SlackChannels'
      description: Array of all available Slack channels to which StackState can send
        messages.
    webhookNotificationChannel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookNotificationChannel'
      description: Webhook notification channel
    opsgenieNotificationChannel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OpsgenieNotificationChannel'
      description: Opsgenie notification channel
    opsgenieResponders:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OpsgenieResponders'
      description: Opsgenie responders
    teamsNotificationChannel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TeamsNotificationChannel'
      description: Teams notification channel
    emailNotificationChannel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailNotificationChannel'
      description: Email notification channel
    emailNotificationStatus:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailNotificationStatus'
      description: Email notification status
    notificationConfigurations:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationConfigurations'
      description: Array of notification configurations
    notificationConfigurationError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationConfigurationError'
      description: Error while executing the request.
    notificationConfiguration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationConfigurationReadSchema'
      description: Notification configuration
    notificationConfigurationByIdErrors:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationConfigurationByIdErrors'
      description: Error while executing the request.
    notificationConfigurationNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationConfigurationNotFound'
      description: Notification was not found in the database
    notificationConfigurationChannels:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationConfigurationChannels'
      description: Notification configuration channels
    userProfile:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserProfile'
      description: User Profile
    apiTokens:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/ApiToken'
            type: array
      description: Api Token
    events:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventItemsWithTotal'
      description: Event API
    event:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopologyEvent'
      description: Event
    eventNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventNotFoundError'
      description: Error when retrieving an event
    eventsHistogram:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventsHistogram'
      description: Events Histogram
    eventSuggestions:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StringItemsWithTotal'
      description: Event field suggestions
    urnBadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidUrn'
      description: Bad request when specifying an invalid identifier
    healthStreamError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HealthStreamNotFound'
      description: Error when retrieving health stream
    healthSubStreamError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HealthSubStreamError'
      description: Error when retrieving health sub stream
    TopologySyncBadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidSyncIdentifier'
      description: Bad request when specifying an invalid identifier
    TopologySyncNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopologySyncError'
      description: Sync with given identifier not found
    tokens:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/ServiceToken'
            type: array
      description: Service Tokens
    GetCausingEventsResult:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCausingEventsResult'
      description: Get events causing a problem successful result
    GetCausingEventsBadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCausingEventsBadRequest'
      description: Events causing a problem can not be got because of the bad request
    GetCausingEventsNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCausingEventsNotFound'
      description: Events causing a problem can not be got because some elements cannot
        be found
    GetCausingEventsServiceUnaivailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCausingEventsServiceUnaivailable'
      description: Events causing a problem can not be got because of the problems
        with one of the services
    successEnvelope:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromEnvelope'
      description: JSON response envelope
    invalidParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromEnvelope'
      description: Parameters are missing or incorrect
    unprocessableEntity:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromEnvelope'
      description: Expression can't be executed (RFC4918)
    serviceUnavailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromEnvelope'
      description: when queries time out or abort
    successExemplarEnvelope:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromExemplarEnvelope'
      description: JSON response envelope
    invalidParametersExemplar:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromExemplarEnvelope'
      description: Parameters are missing or incorrect
    unprocessableEntityExemplar:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromExemplarEnvelope'
      description: Expression can't be executed (RFC4918)
    serviceUnavailableExemplar:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromExemplarEnvelope'
      description: when queries time out or abort
    successLabelEnvelope:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromLabelsEnvelope'
      description: JSON response envelope for labels
    invalidParametersLabel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromLabelsEnvelope'
      description: Parameters are missing or incorrect
    unprocessableEntityLabel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromLabelsEnvelope'
      description: Expression can't be executed (RFC4918)
    serviceUnavailableLabel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromLabelsEnvelope'
      description: When requests time out or abort
    successSeriesEnvelope:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromSeriesEnvelope'
      description: JSON response envelope for series
    invalidParametersSeries:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromSeriesEnvelope'
      description: Parameters are missing or incorrect
    unprocessableEntitySeries:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromSeriesEnvelope'
      description: Expression can't be executed (RFC4918)
    serviceUnavailableSeries:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromSeriesEnvelope'
      description: When requests time out or abort
    successMetadataEnvelope:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromMetadataEnvelope'
      description: JSON response envelope for metadata
    invalidParametersMetadata:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromMetadataEnvelope'
      description: Parameters are missing or incorrect
    unprocessableEntityMetadata:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromMetadataEnvelope'
      description: Expression can't be executed (RFC4918)
    serviceUnavailableMetadata:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PromMetadataEnvelope'
      description: When requests time out or abort
    GetKubernetesLogsResult:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetKubernetesLogsResult'
      description: Get logs successful result
    GetKubernetesLogsBadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetKubernetesLogsBadRequest'
      description: Can not find the requested logs because one or more request params
        are invalid.
    GetKubernetesLogsHistogramResult:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetKubernetesLogsHistogramResult'
      description: Get logs histogram successful result
    GetKubernetesLogsHistogramBadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetKubernetesLogsHistogramBadRequest'
      description: Can not get the logs histogram because one or more request params
        are invalid.
    GetKubernetesLogsAutocompleteResult:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetKubernetesLogsAutocompleteResult'
      description: Get logs autocomplete successful result
    GetKubernetesLogsAutocompleteBadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetKubernetesLogsAutocompleteBadRequest'
      description: Can not get the logs autocomplete values because one or more request
        params are invalid.
    traceQueryResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TraceQueryResponse'
      description: Traces
    traceApiSpansBadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TraceApiSpansBadRequest'
      description: Bad spans request response
    traceApiError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TraceApiError'
      description: Server error response
    durations:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DurationHistogram'
      description: DurationHistogram
    trace:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Trace'
      description: A trace with all its spans
    traceApiTraceNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TraceApiTraceNotFound'
      description: Trace not found
    span:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SpanResponse'
      description: Span
    traceApiSpanNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TraceApiSpanNotFound'
      description: Span not found
    suggestions:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Suggestions'
      description: "Suggestions for property values, attributes names and attribute\
        \ values"
    components:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SpanComponents'
      description: Components
    layouts:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LayoutList'
      description: List of all available layout hints
    layoutApiError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LayoutApiError'
      description: container for all error response
    componentHealthHistory:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ComponentHealthHistory'
      description: Component health history
    componentNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ComponentNotFoundError'
      description: Component not found error
    timelineSummaryResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TimelineSummary'
      description: Event summary and aggregated health changes over a range of time
    timelineSummaryOverflowResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TimelineSummaryOverflow'
      description: Limit was reached during timeline processing
    timelineSummaryErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TimelineSummaryError'
      description: Errors when computing events and health state
    dashboards:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DashboardList'
      description: List of dashboards
    dashboardFullSchema:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DashboardReadFullSchema'
      description: A single fully loaded dashboard response
    dashboardClientErrors:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DashboardClientErrors'
      description: Dashboard client errors.
    dashboard:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DashboardReadSchema'
      description: A single dashboard
    dashboardNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DashboardNotFoundError'
      description: Dashboard not found.
    dashboardAuthorizationError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DashboardAuthorizationError'
      description: Dashboard not found.
    stackElementNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StackElementNotFound'
      description: Error when handling an element which cannot be found.
  schemas:
    GenericErrorsResponse:
      properties:
        _type:
          enum:
          - ErrorsResponse
          type: string
        trackingKey:
          type: string
        serverTimestamp:
          format: int64
          type: integer
        errors:
          items:
            $ref: '#/components/schemas/GenericApiError'
          type: array
      required:
      - errors
      - serverTimestamp
      - trackingKey
      type: object
    GenericApiError:
      properties:
        _type:
          enum:
          - InternalError
          type: string
        message:
          type: string
        errorCode:
          format: int64
          type: integer
      required:
      - _type
      - message
      type: object
    export:
      properties:
        nodesWithIds:
          items:
            format: int64
            type: integer
          type: array
        allNodesOfTypes:
          items:
            type: string
          type: array
        namespace:
          type: string
        allowReferences:
          items:
            type: string
          type: array
      type: object
    NodeTypes:
      example:
        nodeTypes:
        - typeName: typeName
          description: description
        - typeName: typeName
          description: description
      properties:
        nodeTypes:
          items:
            $ref: '#/components/schemas/NodeTypes_nodeTypes_inner'
          type: array
      required:
      - nodeTypes
      type: object
    NodeList:
      items:
        $ref: '#/components/schemas/Node'
      type: array
    Node:
      example:
        identifier: identifier
        lastUpdateTimestamp: 6
        typeName: typeName
        name: name
        description: description
        isSettingsNode: true
        id: 0
        manual: true
        ownedBy: ownedBy
      properties:
        typeName:
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        identifier:
          type: string
        name:
          type: string
        description:
          type: string
        ownedBy:
          type: string
        manual:
          type: boolean
        isSettingsNode:
          type: boolean
      required:
      - id
      - lastUpdateTimestamp
      - typeName
      type: object
    NodeName:
      example:
        name: name
      properties:
        name:
          type: string
      required:
      - name
      type: object
    LockedResponse:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/NodeLocked'
      - $ref: '#/components/schemas/NodeUnlocked'
      required:
      - _type
      type: object
    NodeLocked:
      properties:
        _type:
          enum:
          - NodeLocked
          type: string
        owner:
          type: string
      required:
      - _type
      - owner
      type: object
    NodeUnlocked:
      properties:
        _type:
          enum:
          - NodeUnlocked
          type: string
      required:
      - _type
      type: object
    StackPackList:
      items:
        $ref: '#/components/schemas/FullStackPack'
      type: array
    FullStackPack:
      example:
        detailedOverviewUrl: detailedOverviewUrl
        canUninstall: true
        displayName: displayName
        configurations:
        - lastUpdateTimestamp: 6
          stackPackVersion: stackPackVersion
          id: 0
          error:
            retryable: true
            action: action
            error: "{}"
          config: "{}"
          status: status
        - lastUpdateTimestamp: 6
          stackPackVersion: stackPackVersion
          id: 0
          error:
            retryable: true
            action: action
            error: "{}"
          config: "{}"
          status: status
        upgradeInstructions: upgradeInstructions
        overviewUrl: overviewUrl
        isNew: true
        version: version
        steps:
        - display: display
          name: name
          value:
            _type: _type
        - display: display
          name: name
          value:
            _type: _type
        nextVersion: null
        isMultiConfig: true
        resourcesUrl: resourcesUrl
        isCompatible: true
        faqs:
        - question: question
          answer: answer
        - question: question
          answer: answer
        releaseNotes: releaseNotes
        latestVersion: null
        configurationUrls:
        - - configurationUrls
          - configurationUrls
        - - configurationUrls
          - configurationUrls
        name: name
        releaseStatus: null
        logo: logo
        categories:
        - categories
        - categories
        integrations:
        - faqs:
          - question: question
            answer: answer
          - question: question
            answer: answer
          resourceUrl: resourceUrl
          displayName: displayName
          name: name
          logo: logo
          overviewUrl: overviewUrl
          categories:
          - categories
          - categories
          isNew: true
          brandIcon: brandIcon
        - faqs:
          - question: question
            answer: answer
          - question: question
            answer: answer
          resourceUrl: resourceUrl
          displayName: displayName
          name: name
          logo: logo
          overviewUrl: overviewUrl
          categories:
          - categories
          - categories
          isNew: true
          brandIcon: brandIcon
      properties:
        name:
          type: string
        displayName:
          type: string
        version:
          type: string
        logo:
          type: string
        categories:
          items:
            type: string
          type: array
        isNew:
          type: boolean
        isMultiConfig:
          type: boolean
        overviewUrl:
          type: string
        detailedOverviewUrl:
          type: string
        resourcesUrl:
          type: string
        faqs:
          items:
            $ref: '#/components/schemas/FAQ'
          type: array
        configurationUrls:
          items:
            items:
              type: string
            type: array
          type: array
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        steps:
          items:
            $ref: '#/components/schemas/StackPackStep'
          type: array
        integrations:
          items:
            $ref: '#/components/schemas/StackPackIntegration'
          type: array
        releaseNotes:
          type: string
        upgradeInstructions:
          type: string
        configurations:
          items:
            $ref: '#/components/schemas/StackPackConfiguration'
          type: array
        nextVersion:
          $ref: '#/components/schemas/FullStackPack'
        latestVersion:
          $ref: '#/components/schemas/FullStackPack'
        canUninstall:
          type: boolean
        isCompatible:
          type: boolean
      required:
      - canUninstall
      - categories
      - configurationUrls
      - configurations
      - displayName
      - faqs
      - integrations
      - isCompatible
      - isMultiConfig
      - isNew
      - name
      - releaseStatus
      - steps
      - version
      type: object
    FAQ:
      example:
        question: question
        answer: answer
      properties:
        question:
          type: string
        answer:
          type: string
      required:
      - answer
      - question
      type: object
    ReleaseStatus:
      enum:
      - AVAILABLE
      - ENABLED
      - COMING_SOON
      - HIDDEN
      - BROKEN
      type: string
    StackPackStep:
      example:
        display: display
        name: name
        value:
          _type: _type
      properties:
        display:
          type: string
        name:
          type: string
        value:
          $ref: '#/components/schemas/StackPackStep_value'
      type: object
    StackPackIntegration:
      example:
        faqs:
        - question: question
          answer: answer
        - question: question
          answer: answer
        resourceUrl: resourceUrl
        displayName: displayName
        name: name
        logo: logo
        overviewUrl: overviewUrl
        categories:
        - categories
        - categories
        isNew: true
        brandIcon: brandIcon
      properties:
        name:
          type: string
        displayName:
          type: string
        logo:
          type: string
        brandIcon:
          type: string
        categories:
          items:
            type: string
          type: array
        isNew:
          type: boolean
        overviewUrl:
          type: string
        resourceUrl:
          type: string
        faqs:
          items:
            $ref: '#/components/schemas/FAQ'
          type: array
      required:
      - categories
      - displayName
      - faqs
      - isNew
      - name
      type: object
    StackPackConfiguration:
      example:
        lastUpdateTimestamp: 6
        stackPackVersion: stackPackVersion
        id: 0
        error:
          retryable: true
          action: action
          error: "{}"
        config: "{}"
        status: status
      properties:
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        status:
          type: string
        error:
          $ref: '#/components/schemas/StackPackError'
        stackPackVersion:
          type: string
        config:
          type: object
      required:
      - config
      - stackPackVersion
      - status
      type: object
    StackPackError:
      example:
        retryable: true
        action: action
        error: "{}"
      properties:
        retryable:
          type: boolean
        action:
          type: string
        error:
          type: object
      required:
      - error
      - retryable
      type: object
    StackPack:
      example:
        detailedOverviewUrl: detailedOverviewUrl
        displayName: displayName
        overviewUrl: overviewUrl
        isNew: true
        version: version
        resourcesUrl: resourcesUrl
        isCompatible: true
        faqs:
        - question: question
          answer: answer
        - question: question
          answer: answer
        configurationUrls:
        - - configurationUrls
          - configurationUrls
        - - configurationUrls
          - configurationUrls
        name: name
        releaseStatus: null
        logo: logo
        categories:
        - categories
        - categories
      properties:
        name:
          type: string
        displayName:
          type: string
        version:
          type: string
        logo:
          type: string
        categories:
          items:
            type: string
          type: array
        isNew:
          type: boolean
        overviewUrl:
          type: string
        detailedOverviewUrl:
          type: string
        resourcesUrl:
          type: string
        faqs:
          items:
            $ref: '#/components/schemas/FAQ'
          type: array
        configurationUrls:
          items:
            items:
              type: string
            type: array
          type: array
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        isCompatible:
          type: boolean
      required:
      - categories
      - configurationUrls
      - displayName
      - faqs
      - isCompatible
      - isNew
      - name
      - releaseStatus
      - version
      type: object
    StackPackUpload:
      properties:
        stackPack:
          format: binary
          type: string
      type: object
    ProvisionResponse:
      example:
        stackPackVersion: stackPackVersion
        lastUpdateTimestamp: 6
        name: name
        id: 0
        status: status
      properties:
        id:
          format: int64
          type: integer
        status:
          type: string
        name:
          type: string
        stackPackVersion:
          type: string
        lastUpdateTimestamp:
          format: int64
          type: integer
      type: object
    MonitorList:
      example:
        monitors:
        - identifier: identifier
          canClone: true
          runtimeStatus: null
          remediationHint: remediationHint
          canEdit: true
          description: description
          source: source
          tags:
          - tags
          - tags
          dummy: true
          functionId: 6
          lastUpdateTimestamp: 5
          name: name
          arguments:
          - "{}"
          - "{}"
          id: 0
          sourceDetails: sourceDetails
          intervalSeconds: 1
          status: null
        - identifier: identifier
          canClone: true
          runtimeStatus: null
          remediationHint: remediationHint
          canEdit: true
          description: description
          source: source
          tags:
          - tags
          - tags
          dummy: true
          functionId: 6
          lastUpdateTimestamp: 5
          name: name
          arguments:
          - "{}"
          - "{}"
          id: 0
          sourceDetails: sourceDetails
          intervalSeconds: 1
          status: null
      properties:
        monitors:
          items:
            $ref: '#/components/schemas/Monitor'
          type: array
      required:
      - monitors
      type: object
    Monitor:
      example:
        identifier: identifier
        canClone: true
        runtimeStatus: null
        remediationHint: remediationHint
        canEdit: true
        description: description
        source: source
        tags:
        - tags
        - tags
        dummy: true
        functionId: 6
        lastUpdateTimestamp: 5
        name: name
        arguments:
        - "{}"
        - "{}"
        id: 0
        sourceDetails: sourceDetails
        intervalSeconds: 1
        status: null
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        identifier:
          type: string
        description:
          type: string
        functionId:
          format: int64
          type: integer
        arguments:
          items:
            type: object
          type: array
        remediationHint:
          type: string
        intervalSeconds:
          type: integer
        tags:
          items:
            type: string
          type: array
        source:
          type: string
        sourceDetails:
          type: string
        canEdit:
          type: boolean
        canClone:
          type: boolean
        status:
          $ref: '#/components/schemas/MonitorStatusValue'
        runtimeStatus:
          $ref: '#/components/schemas/MonitorRuntimeStatusValue'
        dummy:
          type: boolean
        lastUpdateTimestamp:
          format: int64
          type: integer
      required:
      - arguments
      - canClone
      - canEdit
      - functionId
      - id
      - intervalSeconds
      - lastUpdateTimestamp
      - name
      - runtimeStatus
      - source
      - status
      - tags
      type: object
    MonitorId:
      format: int64
      type: integer
    MonitorUrn:
      type: string
    MonitorStatusValue:
      description: If a monitor status is set to DISABLED it won't produce any health
        states but it can still be run manually to inspect it's output
      enum:
      - ENABLED
      - DISABLED
      type: string
    MonitorRuntimeStatusValue:
      enum:
      - ENABLED
      - DISABLED
      - ERROR
      - WARNING
      type: string
    MonitorApiError:
      allOf:
      - $ref: '#/components/schemas/BaseMonitorError'
      - $ref: '#/components/schemas/MonitorApiError_allOf'
    BaseMonitorError:
      properties:
        monitorId:
          type: string
        monitorIdType:
          enum:
          - id
          - urn
          type: string
      type: object
    MonitorIdOrUrn:
      pattern: "^urn:.+|[0-9]+$"
      type: string
    InvalidMonitorIdentifierError:
      properties:
        monitorIdOrUrn:
          type: string
        _type:
          enum:
          - InvalidMonitorIdentifierError
          type: string
      required:
      - _type
      - monitorIdOrUrn
      type: object
    MonitorNotFoundError:
      allOf:
      - $ref: '#/components/schemas/BaseMonitorError'
      - $ref: '#/components/schemas/MonitorNotFoundError_allOf'
      required:
      - _type
      - monitorId
      - monitorIdType
    MonitorPatch:
      example:
        identifier: identifier
        remediationHint: remediationHint
        name: name
        description: description
        intervalSeconds: 0
        tags:
        - tags
        - tags
        status: null
      properties:
        name:
          type: string
        identifier:
          type: string
        description:
          type: string
        remediationHint:
          type: string
        intervalSeconds:
          type: integer
        tags:
          items:
            type: string
          type: array
        status:
          $ref: '#/components/schemas/MonitorStatusValue'
      type: object
    MonitorValidationError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/MonitorInvalidIntervalError'
      - $ref: '#/components/schemas/InvalidMonitorIdentifierError'
      required:
      - _type
    MonitorInvalidIntervalError:
      properties:
        intervalSeconds:
          type: integer
        _type:
          enum:
          - MonitorInvalidIntervalError
          type: string
      required:
      - _type
      - intervalSeconds
      type: object
    MonitorPreview:
      example:
        arguments:
        - null
        - null
      properties:
        arguments:
          items:
            $ref: '#/components/schemas/Argument'
          type: array
      type: object
    MonitorPreviewResult:
      example:
        unknownCount: 6
        healthStatesCount: 0
        clearCount: 1
        componentCounts:
          matchingComponents: 7
          uniqueIdentifiers: 2
        criticalCount: 5
        deviatingCount: 5
        errors:
        - errors
        - errors
      properties:
        healthStatesCount:
          description: Representing the total count of the monitor results.
          type: integer
        unknownCount:
          description: Representing the count of the monitor results that are UNKNOWN
            in the result.
          type: integer
        clearCount:
          description: Representing the count of the monitor results that are CLEAR
            in the result.
          type: integer
        deviatingCount:
          description: Representing the count of the monitor results that are DEVIATING
            in the result.
          type: integer
        criticalCount:
          description: Representing the count of the monitor results that are CRITICAL
            in the result.
          type: integer
        componentCounts:
          $ref: '#/components/schemas/MonitorPreviewComponentCount'
        errors:
          items:
            type: string
          type: array
      required:
      - clearCount
      - criticalCount
      - deviatingCount
      - errors
      - healthStatesCount
      - unknownCount
      type: object
    MonitorPreviewComponentCount:
      example:
        matchingComponents: 7
        uniqueIdentifiers: 2
      properties:
        uniqueIdentifiers:
          description: The number of unique identifiers for the total health state
            count. Only available when there non-empty identifiers.
          type: integer
        matchingComponents:
          description: "The number of components for the identifiers: matchingComponents\
            \ <= uniqueIdentifiers. Only available when there non-empty identifiers."
          type: integer
      required:
      - matchingComponents
      - uniqueIdentifiers
      type: object
    HealthStateValue:
      enum:
      - UNINITIALIZED
      - UNKNOWN
      - CLEAR
      - DISABLED
      - DEVIATING
      - FLAPPING
      - CRITICAL
      type: string
    MonitorCheckStates:
      example:
        states:
        - componentType: componentType
          lastUpdateTimestamp: 0
          healthState: null
          checkStateId: checkStateId
          componentName: componentName
          componentIdentifier: componentIdentifier
        - componentType: componentType
          lastUpdateTimestamp: 0
          healthState: null
          checkStateId: checkStateId
          componentName: componentName
          componentIdentifier: componentIdentifier
      properties:
        states:
          items:
            $ref: '#/components/schemas/ViewCheckState'
          type: array
      required:
      - states
      type: object
    MonitorRunResult:
      example:
        result: "{}"
      properties:
        result:
          type: object
      required:
      - result
      type: object
    MonitorStatus:
      example:
        function:
          identifier: identifier
          lastUpdateTimestamp: 6
          name: name
          description: description
          id: 0
        monitor:
          identifier: identifier
          canClone: true
          runtimeStatus: null
          remediationHint: remediationHint
          canEdit: true
          description: description
          source: source
          tags:
          - tags
          - tags
          dummy: true
          functionId: 6
          lastUpdateTimestamp: 5
          name: name
          arguments:
          - "{}"
          - "{}"
          id: 0
          sourceDetails: sourceDetails
          intervalSeconds: 1
          status: null
        metrics:
          healthSyncServiceMetrics:
            createsPerSecond:
            - value: 5.637376656633329
            - value: 5.637376656633329
            latencySeconds:
            - value: 5.637376656633329
            - value: 5.637376656633329
            bucketSizeSeconds: 5
            deletesPerSecond:
            - value: 5.637376656633329
            - value: 5.637376656633329
            messagePerSecond:
            - value: 5.637376656633329
            - value: 5.637376656633329
            updatesPerSecond:
            - value: 5.637376656633329
            - value: 5.637376656633329
          runtimeMetrics:
            lastRunTimestamp: 7
            unknownCount: 9
            healthStatesCount: 2
            unmappedHealthStatesCount: 7
            clearCount: 3
            lastSuccessfulRunTimestamp: 1
            lastFailedRunTimestamp: 1
            criticalCount: 4
            deviatingCount: 2
        topologyMatchResult:
          unmatchedCheckStates:
          - topologyElementIdentifier: topologyElementIdentifier
            checkStateId: checkStateId
          - topologyElementIdentifier: topologyElementIdentifier
            checkStateId: checkStateId
          matchedCheckStates: 1
          multipleMatchesCheckStates:
          - topologyElementIdentifier: topologyElementIdentifier
            checkStateId: checkStateId
            matchCount: 6
          - topologyElementIdentifier: topologyElementIdentifier
            checkStateId: checkStateId
            matchCount: 6
        errors:
        - level: null
          count: 1
          error: error
        - level: null
          count: 1
          error: error
      properties:
        monitor:
          $ref: '#/components/schemas/Monitor'
        function:
          $ref: '#/components/schemas/MonitorFunction'
        errors:
          items:
            $ref: '#/components/schemas/MonitorError'
          type: array
        metrics:
          $ref: '#/components/schemas/MonitorMetrics'
        topologyMatchResult:
          $ref: '#/components/schemas/TopologyMatchResult'
      required:
      - function
      - metrics
      - monitor
      type: object
    MonitorFunction:
      example:
        identifier: identifier
        lastUpdateTimestamp: 6
        name: name
        description: description
        id: 0
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        identifier:
          type: string
        description:
          type: string
        lastUpdateTimestamp:
          format: int64
          type: integer
      required:
      - id
      - lastUpdateTimestamp
      - name
      type: object
    MonitorErrors:
      items:
        $ref: '#/components/schemas/MonitorError'
      type: array
    MonitorError:
      example:
        level: null
        count: 1
        error: error
      properties:
        error:
          type: string
        count:
          type: integer
        level:
          $ref: '#/components/schemas/MessageLevel'
      required:
      - count
      - error
      - level
      type: object
    MonitorMetrics:
      example:
        healthSyncServiceMetrics:
          createsPerSecond:
          - value: 5.637376656633329
          - value: 5.637376656633329
          latencySeconds:
          - value: 5.637376656633329
          - value: 5.637376656633329
          bucketSizeSeconds: 5
          deletesPerSecond:
          - value: 5.637376656633329
          - value: 5.637376656633329
          messagePerSecond:
          - value: 5.637376656633329
          - value: 5.637376656633329
          updatesPerSecond:
          - value: 5.637376656633329
          - value: 5.637376656633329
        runtimeMetrics:
          lastRunTimestamp: 7
          unknownCount: 9
          healthStatesCount: 2
          unmappedHealthStatesCount: 7
          clearCount: 3
          lastSuccessfulRunTimestamp: 1
          lastFailedRunTimestamp: 1
          criticalCount: 4
          deviatingCount: 2
      properties:
        healthSyncServiceMetrics:
          $ref: '#/components/schemas/HealthStreamMetrics'
        runtimeMetrics:
          $ref: '#/components/schemas/MonitorRuntimeMetrics'
      required:
      - runtimeMetrics
      type: object
    MonitorRuntimeMetrics:
      example:
        lastRunTimestamp: 7
        unknownCount: 9
        healthStatesCount: 2
        unmappedHealthStatesCount: 7
        clearCount: 3
        lastSuccessfulRunTimestamp: 1
        lastFailedRunTimestamp: 1
        criticalCount: 4
        deviatingCount: 2
      properties:
        healthStatesCount:
          description: Representing the total count of the monitor results.
          type: integer
        unmappedHealthStatesCount:
          description: Representing the total count of the monitor results that are
            not mapped to topology.
          type: integer
        unknownCount:
          description: Representing the count of the monitor results that are UNKNOWN
            and are mapped to topology.
          type: integer
        clearCount:
          description: Representing the count of the monitor results that are CLEAR
            and are mapped to topology.
          type: integer
        deviatingCount:
          description: Representing the count of the monitor results that are DEVIATING
            and are mapped to topology.
          type: integer
        criticalCount:
          description: Representing the count of the monitor results that are CRITICAL
            and are mapped to topology.
          type: integer
        lastRunTimestamp:
          description: Representing the epoch millis of the last monitor run.
          format: int64
          type: integer
        lastSuccessfulRunTimestamp:
          description: Representing the epoch millis of the last monitor successful
            run.
          format: int64
          type: integer
        lastFailedRunTimestamp:
          description: Representing the epoch millis of the last monitor failed run.
          format: int64
          type: integer
      type: object
    MonitorSnapshot:
      example:
        firstBatch: true
        healthStates:
        - remediationHintTemplateData: "{}"
          reason: reason
          id: id
          state: null
          topologyIdentifier: topologyIdentifier
          displayTimeSeries:
          - unit: unit
            name: name
            description: description
            queries:
            - componentIdentifierTemplate: componentIdentifierTemplate
              query: query
              alias: alias
            - componentIdentifierTemplate: componentIdentifierTemplate
              query: query
              alias: alias
          - unit: unit
            name: name
            description: description
            queries:
            - componentIdentifierTemplate: componentIdentifierTemplate
              query: query
              alias: alias
            - componentIdentifierTemplate: componentIdentifierTemplate
              query: query
              alias: alias
          message: message
        - remediationHintTemplateData: "{}"
          reason: reason
          id: id
          state: null
          topologyIdentifier: topologyIdentifier
          displayTimeSeries:
          - unit: unit
            name: name
            description: description
            queries:
            - componentIdentifierTemplate: componentIdentifierTemplate
              query: query
              alias: alias
            - componentIdentifierTemplate: componentIdentifierTemplate
              query: query
              alias: alias
          - unit: unit
            name: name
            description: description
            queries:
            - componentIdentifierTemplate: componentIdentifierTemplate
              query: query
              alias: alias
            - componentIdentifierTemplate: componentIdentifierTemplate
              query: query
              alias: alias
          message: message
        lastBatch: true
      properties:
        firstBatch:
          default: true
          type: boolean
        lastBatch:
          default: true
          type: boolean
        healthStates:
          items:
            $ref: '#/components/schemas/MonitorHealthState'
          type: array
      required:
      - healthStates
      type: object
    MonitorHealthState:
      example:
        remediationHintTemplateData: "{}"
        reason: reason
        id: id
        state: null
        topologyIdentifier: topologyIdentifier
        displayTimeSeries:
        - unit: unit
          name: name
          description: description
          queries:
          - componentIdentifierTemplate: componentIdentifierTemplate
            query: query
            alias: alias
          - componentIdentifierTemplate: componentIdentifierTemplate
            query: query
            alias: alias
        - unit: unit
          name: name
          description: description
          queries:
          - componentIdentifierTemplate: componentIdentifierTemplate
            query: query
            alias: alias
          - componentIdentifierTemplate: componentIdentifierTemplate
            query: query
            alias: alias
        message: message
      properties:
        id:
          type: string
        state:
          $ref: '#/components/schemas/HealthStateValue'
        topologyIdentifier:
          type: string
        displayTimeSeries:
          items:
            $ref: '#/components/schemas/MonitorDisplayTimeSeries'
          type: array
        remediationHintTemplateData:
          type: object
        message:
          type: string
        reason:
          type: string
      required:
      - id
      - state
      - topologyIdentifier
      type: object
    MonitorDisplayTimeSeries:
      example:
        unit: unit
        name: name
        description: description
        queries:
        - componentIdentifierTemplate: componentIdentifierTemplate
          query: query
          alias: alias
        - componentIdentifierTemplate: componentIdentifierTemplate
          query: query
          alias: alias
      properties:
        name:
          type: string
        queries:
          items:
            $ref: '#/components/schemas/MonitorDisplayQuery'
          type: array
        description:
          type: string
        unit:
          type: string
      required:
      - name
      - queries
      type: object
    MonitorDisplayQuery:
      example:
        componentIdentifierTemplate: componentIdentifierTemplate
        query: query
        alias: alias
      properties:
        query:
          type: string
        alias:
          type: string
        componentIdentifierTemplate:
          type: string
      required:
      - query
      type: object
    MonitorFunctionIdOrUrn:
      pattern: "^urn:.+|[0-9]+$"
      type: string
    MonitorFunctionTest:
      example:
        arguments:
        - null
        - null
      properties:
        arguments:
          items:
            $ref: '#/components/schemas/Argument'
          type: array
      required:
      - arguments
      type: object
    MonitorFunctionNotFoundError:
      properties:
        monitorFunctionId:
          type: string
        monitorFunctionIdType:
          enum:
          - id
          - urn
          type: string
        _type:
          enum:
          - MonitorFunctionNotFoundError
          type: string
      required:
      - _type
      - monitorFunctionId
      - monitorFunctionIdType
      type: object
    MonitorIdentifierLookup:
      example:
        componentType: 0
        metricQuery: metricQuery
        overrides:
          timeSeries: 5
          components: 1
        topN: 6
      properties:
        metricQuery:
          type: string
        componentType:
          format: int64
          type: integer
        topN:
          format: int32
          type: integer
        overrides:
          $ref: '#/components/schemas/MonitorIdentifierLookup_overrides'
      required:
      - componentType
      - metricQuery
      type: object
    MonitorIdentifierSuggestions:
      example:
        componentsInspected: 1
        timeseriesInspected: 5
        suggestions:
        - score: 0.8008282
          identifierTemplate: identifierTemplate
          totalMatches: 6
        - score: 0.8008282
          identifierTemplate: identifierTemplate
          totalMatches: 6
      properties:
        suggestions:
          items:
            $ref: '#/components/schemas/MonitorIdentifierSuggestion'
          type: array
        componentsInspected:
          format: int64
          type: integer
        timeseriesInspected:
          format: int64
          type: integer
      required:
      - componentsInspected
      - suggestions
      - timeseriesInspected
      type: object
    MonitorIdentifierSuggestion:
      example:
        score: 0.8008282
        identifierTemplate: identifierTemplate
        totalMatches: 6
      properties:
        identifierTemplate:
          type: string
        score:
          format: float
          type: number
        totalMatches:
          format: int64
          type: integer
      required:
      - identifierTemplate
      - score
      - totalMatches
      type: object
    MonitorOverviewList:
      example:
        monitors:
        - function:
            identifier: identifier
            lastUpdateTimestamp: 6
            name: name
            description: description
            id: 0
          monitor:
            identifier: identifier
            canClone: true
            runtimeStatus: null
            remediationHint: remediationHint
            canEdit: true
            description: description
            source: source
            tags:
            - tags
            - tags
            dummy: true
            functionId: 6
            lastUpdateTimestamp: 5
            name: name
            arguments:
            - "{}"
            - "{}"
            id: 0
            sourceDetails: sourceDetails
            intervalSeconds: 1
            status: null
          runtimeMetrics:
            lastRunTimestamp: 7
            unknownCount: 9
            healthStatesCount: 2
            unmappedHealthStatesCount: 7
            clearCount: 3
            lastSuccessfulRunTimestamp: 1
            lastFailedRunTimestamp: 1
            criticalCount: 4
            deviatingCount: 2
          errors:
          - level: null
            count: 1
            error: error
          - level: null
            count: 1
            error: error
        - function:
            identifier: identifier
            lastUpdateTimestamp: 6
            name: name
            description: description
            id: 0
          monitor:
            identifier: identifier
            canClone: true
            runtimeStatus: null
            remediationHint: remediationHint
            canEdit: true
            description: description
            source: source
            tags:
            - tags
            - tags
            dummy: true
            functionId: 6
            lastUpdateTimestamp: 5
            name: name
            arguments:
            - "{}"
            - "{}"
            id: 0
            sourceDetails: sourceDetails
            intervalSeconds: 1
            status: null
          runtimeMetrics:
            lastRunTimestamp: 7
            unknownCount: 9
            healthStatesCount: 2
            unmappedHealthStatesCount: 7
            clearCount: 3
            lastSuccessfulRunTimestamp: 1
            lastFailedRunTimestamp: 1
            criticalCount: 4
            deviatingCount: 2
          errors:
          - level: null
            count: 1
            error: error
          - level: null
            count: 1
            error: error
      properties:
        monitors:
          items:
            $ref: '#/components/schemas/MonitorOverview'
          type: array
      required:
      - monitors
      type: object
    MonitorOverview:
      example:
        function:
          identifier: identifier
          lastUpdateTimestamp: 6
          name: name
          description: description
          id: 0
        monitor:
          identifier: identifier
          canClone: true
          runtimeStatus: null
          remediationHint: remediationHint
          canEdit: true
          description: description
          source: source
          tags:
          - tags
          - tags
          dummy: true
          functionId: 6
          lastUpdateTimestamp: 5
          name: name
          arguments:
          - "{}"
          - "{}"
          id: 0
          sourceDetails: sourceDetails
          intervalSeconds: 1
          status: null
        runtimeMetrics:
          lastRunTimestamp: 7
          unknownCount: 9
          healthStatesCount: 2
          unmappedHealthStatesCount: 7
          clearCount: 3
          lastSuccessfulRunTimestamp: 1
          lastFailedRunTimestamp: 1
          criticalCount: 4
          deviatingCount: 2
        errors:
        - level: null
          count: 1
          error: error
        - level: null
          count: 1
          error: error
      properties:
        monitor:
          $ref: '#/components/schemas/Monitor'
        function:
          $ref: '#/components/schemas/MonitorFunction'
        errors:
          items:
            $ref: '#/components/schemas/MonitorError'
          type: array
        runtimeMetrics:
          $ref: '#/components/schemas/MonitorRuntimeMetrics'
      required:
      - function
      - monitor
      - runtimeMetrics
      type: object
    MonitorCheckStatus:
      example:
        topologyTime: 5
        reason: reason
        monitorId: null
        monitorName: monitorName
        health: null
        checkStateId: checkStateId
        message: message
        component:
          identifier: identifier
          cluster: cluster
          iconbase64: iconbase64
          name: name
          namespace: namespace
          id: 1
          type: type
        troubleshootingSteps: troubleshootingSteps
        triggeredTimestamp: 6
        monitorDescription: monitorDescription
        id: 0
        metrics:
        - unit: unit
          _type: _type
          name: name
          description: description
          step: step
          queries:
          - componentIdentifierTemplate: componentIdentifierTemplate
            query: query
            alias: alias
          - componentIdentifierTemplate: componentIdentifierTemplate
            query: query
            alias: alias
        - unit: unit
          _type: _type
          name: name
          description: description
          step: step
          queries:
          - componentIdentifierTemplate: componentIdentifierTemplate
            query: query
            alias: alias
          - componentIdentifierTemplate: componentIdentifierTemplate
            query: query
            alias: alias
      properties:
        id:
          format: int64
          type: integer
        checkStateId:
          type: string
        message:
          type: string
        reason:
          type: string
        health:
          $ref: '#/components/schemas/HealthStateValue'
        triggeredTimestamp:
          format: instant
          type: integer
        metrics:
          items:
            $ref: '#/components/schemas/MonitorCheckStatusMetric'
          type: array
        component:
          $ref: '#/components/schemas/MonitorCheckStatusComponent'
        monitorId:
          $ref: '#/components/schemas/MonitorReferenceId'
        monitorName:
          type: string
        monitorDescription:
          type: string
        troubleshootingSteps:
          type: string
        topologyTime:
          format: instant
          type: integer
      required:
      - checkStateId
      - component
      - health
      - id
      - message
      - metrics
      - monitorId
      - monitorName
      - topologyTime
      - triggeredTimestamp
      type: object
    MonitorCheckStatusMetric:
      example:
        unit: unit
        _type: _type
        name: name
        description: description
        step: step
        queries:
        - componentIdentifierTemplate: componentIdentifierTemplate
          query: query
          alias: alias
        - componentIdentifierTemplate: componentIdentifierTemplate
          query: query
          alias: alias
      properties:
        _type:
          type: string
        name:
          type: string
        description:
          type: string
        unit:
          type: string
        step:
          pattern: "(^((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)$)|(^[0-9]+$)"
          type: string
        queries:
          items:
            $ref: '#/components/schemas/MonitorCheckStatusQuery'
          type: array
      required:
      - _type
      - name
      - queries
      type: object
    MonitorCheckStatusQuery:
      example:
        componentIdentifierTemplate: componentIdentifierTemplate
        query: query
        alias: alias
      properties:
        query:
          type: string
        alias:
          type: string
        componentIdentifierTemplate:
          type: string
      required:
      - query
      type: object
    MonitorCheckStatusComponent:
      example:
        identifier: identifier
        cluster: cluster
        iconbase64: iconbase64
        name: name
        namespace: namespace
        id: 1
        type: type
      properties:
        id:
          format: int64
          type: integer
        identifier:
          type: string
        name:
          type: string
        type:
          type: string
        iconbase64:
          type: string
        namespace:
          type: string
        cluster:
          type: string
      required:
      - id
      - identifier
      - name
      - type
    MonitorCheckStatusApiError:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    MonitorCheckStatusNotFoundError:
      properties:
        id:
          format: int64
          type: integer
        _type:
          enum:
          - MonitorNotFoundError
          type: string
      required:
      - _type
      - id
      type: object
    MonitorCheckStatusRelatedFailures:
      example:
        topologyTime: 6
        checkStatusId: 0
        checkStatuses:
        - component:
            identifier: identifier
            cluster: cluster
            iconbase64: iconbase64
            name: name
            namespace: namespace
            id: 1
            type: type
          triggeredTimestamp: 5
          topology:
            distance: 5
            relation: SELF
          name: name
          health: null
          id: 1
        - component:
            identifier: identifier
            cluster: cluster
            iconbase64: iconbase64
            name: name
            namespace: namespace
            id: 1
            type: type
          triggeredTimestamp: 5
          topology:
            distance: 5
            relation: SELF
          name: name
          health: null
          id: 1
      properties:
        checkStatusId:
          format: int64
          type: integer
        topologyTime:
          format: instant
          type: integer
        checkStatuses:
          items:
            $ref: '#/components/schemas/MonitorCheckStatusRelatedFailuresCheckStatus'
          type: array
      required:
      - checkStatusId
      - checkStatuses
      - topologyTime
    MonitorCheckStatusRelatedFailuresCheckStatus:
      example:
        component:
          identifier: identifier
          cluster: cluster
          iconbase64: iconbase64
          name: name
          namespace: namespace
          id: 1
          type: type
        triggeredTimestamp: 5
        topology:
          distance: 5
          relation: SELF
        name: name
        health: null
        id: 1
      properties:
        id:
          format: int64
          type: integer
        health:
          $ref: '#/components/schemas/HealthStateValue'
        name:
          type: string
        component:
          $ref: '#/components/schemas/MonitorCheckStatusComponent'
        topology:
          $ref: '#/components/schemas/MonitorCheckStatusRelatedFailuresTopology'
        triggeredTimestamp:
          format: instant
          type: integer
      required:
      - component
      - health
      - id
      - name
      - topology
      - triggeredTimestamp
    MonitorCheckStatusRelatedFailuresTopology:
      example:
        distance: 5
        relation: SELF
      properties:
        distance:
          type: integer
        relation:
          enum:
          - SELF
          - DEPENDENCY
          - IMPACTED
          - RELATED
          type: string
      required:
      - distance
      - relation
    MonitorCheckStatusHealthHistory:
      example:
        checkStatusId: 0
        startTime: 6
        endTime: 1
        healthStateChanges:
        - newHealth: null
          timestamp: 5
        - newHealth: null
          timestamp: 5
      properties:
        checkStatusId:
          format: int64
          type: integer
        startTime:
          format: instant
          type: integer
        endTime:
          format: instant
          type: integer
        healthStateChanges:
          description: List of health state changes ordered from most recent to oldest.
          items:
            $ref: '#/components/schemas/MonitorCheckStatusHealthChange'
          type: array
      required:
      - checkStatusId
      - endTime
      - healthStateChanges
      - startTime
    MonitorCheckStatusHealthChange:
      example:
        newHealth: null
        timestamp: 5
      properties:
        timestamp:
          format: int64
          type: integer
        newHealth:
          $ref: '#/components/schemas/HealthStateValue'
      required:
      - newHealth
      - timestamp
    ChannelId:
      format: int64
      type: integer
    SlackNotificationChannel:
      allOf:
      - $ref: '#/components/schemas/BaseNotificationChannel'
      - $ref: '#/components/schemas/SlackNotificationChannel_allOf'
    BaseNotificationChannel:
      properties:
        id:
          format: int64
          type: integer
        notificationConfigurationId:
          format: int64
          type: integer
        status:
          $ref: '#/components/schemas/NotificationChannelStatus'
      required:
      - id
      - status
      type: object
    NotificationChannelStatus:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/NotificationChannelStatusError'
          type: array
      required:
      - errors
      type: object
    NotificationChannelStatusError:
      properties:
        category:
          type: string
        count:
          type: integer
        message:
          type: string
        firstSeenMs:
          format: instant
          type: integer
      required:
      - category
      - count
      - firstSeenMs
      - message
      type: object
    NotificationChannelError:
      properties:
        message:
          type: string
        channelId:
          type: string
        _type:
          enum:
          - NotificationChannelError
          type: string
      required:
      - _type
      - channelId
      - message
      type: object
    NotificationChannelNotFound:
      properties:
        message:
          type: string
        channelId:
          type: string
        _type:
          enum:
          - NotificationChannelNotFound
          type: string
      required:
      - _type
      - channelId
      - message
      type: object
    SlackChannels:
      items:
        $ref: '#/components/schemas/SlackChannel'
      type: array
    SlackChannel:
      example:
        name: name
        id: id
      properties:
        name:
          type: string
        id:
          type: string
      required:
      - id
      - name
      type: object
    SlackChannelId:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
      type: object
    WebhookChannelWriteSchema:
      example:
        metadata:
          key: metadata
        verifySsl: true
        url: url
        token: token
      properties:
        url:
          type: string
        token:
          type: string
        verifySsl:
          type: boolean
        metadata:
          additionalProperties:
            type: string
          type: object
      required:
      - metadata
      - token
      - url
      - verifySsl
      type: object
    WebhookNotificationChannel:
      allOf:
      - $ref: '#/components/schemas/BaseNotificationChannel'
      - $ref: '#/components/schemas/WebhookChannelWriteSchema'
      - $ref: '#/components/schemas/WebhookNotificationChannel_allOf'
    OpsgenieChannelWriteSchema:
      example:
        genieKey: genieKey
        region: null
        priority: null
        responders:
        - responder: responder
          responderType: null
        - responder: responder
          responderType: null
      properties:
        region:
          $ref: '#/components/schemas/OpsgenieRegion'
        genieKey:
          type: string
        responders:
          items:
            $ref: '#/components/schemas/OpsgenieResponder'
          type: array
        priority:
          $ref: '#/components/schemas/OpsgeniePriority'
      required:
      - genieKey
      - priority
      - region
      - responders
      type: object
    OpsgenieRegion:
      enum:
      - EU
      - US
      type: string
    OpsgenieResponder:
      example:
        responder: responder
        responderType: null
      properties:
        responderType:
          $ref: '#/components/schemas/OpsgenieResponderType'
        responder:
          type: string
      required:
      - responder
      - responderType
      type: object
    OpsgenieResponderType:
      enum:
      - TEAM
      - USER
      - SCHEDULE
      - ESCALATION
      type: string
    OpsgeniePriority:
      enum:
      - P1
      - P2
      - P3
      - P4
      - P5
      type: string
    OpsgenieNotificationChannel:
      allOf:
      - $ref: '#/components/schemas/BaseNotificationChannel'
      - $ref: '#/components/schemas/OpsgenieChannelWriteSchema'
      - $ref: '#/components/schemas/OpsgenieNotificationChannel_allOf'
    OpsgenieResponders:
      items:
        $ref: '#/components/schemas/OpsgenieResponder'
      type: array
    TeamsChannelWriteSchema:
      example:
        url: url
      properties:
        url:
          type: string
      required:
      - url
      type: object
    TeamsNotificationChannel:
      allOf:
      - $ref: '#/components/schemas/BaseNotificationChannel'
      - $ref: '#/components/schemas/TeamsChannelWriteSchema'
      - $ref: '#/components/schemas/TeamsNotificationChannel_allOf'
    EmailChannelWriteSchema:
      example:
        cc:
        - cc
        - cc
        to:
        - to
        - to
        subjectPrefix: subjectPrefix
      properties:
        to:
          items:
            type: string
          minItems: 1
          type: array
        cc:
          items:
            type: string
          type: array
        subjectPrefix:
          type: string
      required:
      - cc
      - to
      type: object
    EmailNotificationChannel:
      allOf:
      - $ref: '#/components/schemas/BaseNotificationChannel'
      - $ref: '#/components/schemas/EmailChannelWriteSchema'
      - $ref: '#/components/schemas/EmailNotificationChannel_allOf'
    EmailNotificationStatus:
      example:
        validConfiguration: true
      properties:
        validConfiguration:
          type: boolean
      required:
      - validConfiguration
      type: object
    NotificationConfigurations:
      items:
        $ref: '#/components/schemas/NotificationConfigurationReadSchema'
      type: array
    NotificationConfigurationReadSchema:
      allOf:
      - $ref: '#/components/schemas/NotificationConfigurationWriteSchema'
      - $ref: '#/components/schemas/NotificationConfigurationReadSchema_allOf'
    NotificationConfigurationWriteSchema:
      example:
        identifier: identifier
        componentTags:
        - componentTags
        - componentTags
        monitorTags:
        - monitorTags
        - monitorTags
        notifyHealthStates: null
        name: name
        componentTypes:
        - 0
        - 0
        description: description
        notificationChannels:
        - null
        - null
        monitors:
        - null
        - null
        status: null
      properties:
        name:
          type: string
        identifier:
          type: string
        description:
          type: string
        notifyHealthStates:
          $ref: '#/components/schemas/NotifyOnOptions'
        monitors:
          items:
            $ref: '#/components/schemas/MonitorReferenceId'
          type: array
        monitorTags:
          items:
            type: string
          type: array
        componentTypes:
          items:
            format: int64
            type: integer
          type: array
        componentTags:
          items:
            type: string
          type: array
        status:
          $ref: '#/components/schemas/NotificationConfigurationStatusValue'
        notificationChannels:
          items:
            $ref: '#/components/schemas/ChannelReferenceId'
          type: array
      required:
      - componentTags
      - componentTypes
      - monitorTags
      - monitors
      - name
      - notificationChannels
      - notifyHealthStates
      - status
      type: object
    NotificationConfigurationUrn:
      type: string
    NotifyOnOptions:
      enum:
      - CRITICAL
      - DEVIATING_AND_CRITICAL
      type: string
    NotificationConfigurationStatusValue:
      enum:
      - ENABLED
      - DISABLED
      type: string
    ChannelReferenceId:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/SlackChannelRefId'
      - $ref: '#/components/schemas/WebhookChannelRefId'
      - $ref: '#/components/schemas/OpsgenieChannelRefId'
      - $ref: '#/components/schemas/TeamsChannelRefId'
      - $ref: '#/components/schemas/EmailChannelRefId'
      type: object
    SlackChannelRefId:
      properties:
        _type:
          enum:
          - SlackChannelRefId
          type: string
        id:
          format: int64
          type: integer
      required:
      - _type
      - id
      type: object
    WebhookChannelRefId:
      properties:
        _type:
          enum:
          - WebhookChannelRefId
          type: string
        id:
          format: int64
          type: integer
      required:
      - _type
      - id
      type: object
    OpsgenieChannelRefId:
      properties:
        _type:
          enum:
          - OpsgenieChannelRefId
          type: string
        id:
          format: int64
          type: integer
      required:
      - _type
      - id
      type: object
    TeamsChannelRefId:
      properties:
        _type:
          enum:
          - TeamsChannelRefId
          type: string
        id:
          format: int64
          type: integer
      required:
      - _type
      - id
      type: object
    EmailChannelRefId:
      properties:
        _type:
          enum:
          - EmailChannelRefId
          type: string
        id:
          format: int64
          type: integer
      required:
      - _type
      - id
      type: object
    NotificationConfigurationRuntimeStatusValue:
      enum:
      - ERROR
      - WARNING
      - OK
      type: string
    NotificationConfigurationError:
      properties:
        message:
          type: string
        _type:
          enum:
          - NotificationConfigurationError
          type: string
      required:
      - _type
      - message
      type: object
    NotificationConfigurationIdOrUrn:
      pattern: "^urn:.+|[0-9]+$"
      type: string
    NotificationConfigurationByIdErrors:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/NotificationConfigurationError'
      - $ref: '#/components/schemas/InvalidNotificationConfigurationIdentifier'
      required:
      - _type
    InvalidNotificationConfigurationIdentifier:
      properties:
        notificationConfigurationIdOrUrn:
          type: string
        _type:
          enum:
          - InvalidNotificationConfigurationIdentifier
          type: string
      required:
      - _type
      - notificationConfigurationIdOrUrn
      type: object
    NotificationConfigurationNotFound:
      properties:
        message:
          type: string
        notificationConfigurationIdOrUrn:
          type: string
        _type:
          enum:
          - NotificationConfigurationNotFound
          type: string
      required:
      - _type
      - message
      - notificationConfigurationIdOrUrn
      type: object
    NotificationConfigurationChannels:
      items:
        $ref: '#/components/schemas/NotificationChannel'
      type: array
    UserNotFoundError:
      properties:
        _type:
          enum:
          - UserNotFoundError
          type: string
        name:
          type: string
      required:
      - _type
      - name
      type: object
    UserProfileSaveError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/UserNameMismatchError'
      - $ref: '#/components/schemas/UserNotFoundError'
      - $ref: '#/components/schemas/UserNotLoggedInError'
      required:
      - _type
    UserNameMismatchError:
      properties:
        _type:
          enum:
          - UserNameMismatchError
          type: string
        name:
          type: string
      required:
      - _type
      - name
      type: object
    UserNotLoggedInError:
      properties:
        _type:
          enum:
          - UserNotLoggedInError
          type: string
      required:
      - _type
      type: object
    UserProfile:
      example:
        identifier: identifier
        displayName: displayName
        starredViews:
        - 1
        - 1
        description: description
        starredDashboards:
        - 5
        - 5
        hideUnavailableMonitors: true
        hideUnavailableMetrics: true
        lastUpdateTimestamp: 6
        systemNotificationsRead:
        - systemNotificationsRead
        - systemNotificationsRead
        name: name
        id: 0
        hideUnavailableConnections: true
        ownedBy: ownedBy
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        lastUpdateTimestamp:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
        identifier:
          type: string
        starredViews:
          items:
            format: int64
            type: integer
          type: array
        starredDashboards:
          items:
            format: int64
            type: integer
          type: array
        systemNotificationsRead:
          items:
            type: string
          type: array
        hideUnavailableMonitors:
          type: boolean
        hideUnavailableMetrics:
          type: boolean
        hideUnavailableConnections:
          type: boolean
        ownedBy:
          type: string
      required:
      - hideUnavailableConnections
      - hideUnavailableMetrics
      - hideUnavailableMonitors
      - name
      - systemNotificationsRead
      type: object
    ApiToken:
      example:
        lastUpdateTimestamp: 6
        name: name
        description: description
        id: 0
        token: token
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        lastUpdateTimestamp:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        description:
          type: string
        token:
          type: string
      required:
      - name
      - token
      type: object
    Role:
      example:
        role: role
      properties:
        role:
          type: string
      type: object
    RoleNotAvailableError:
      properties:
        _type:
          enum:
          - RoleNotAvailableError
          type: string
        role:
          type: string
      required:
      - _type
      - role
      type: object
    Roles:
      example:
        roles:
        - roles
        - roles
      properties:
        roles:
          items:
            type: string
          type: array
      required:
      - roles
      type: object
    RequestError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/TopologyOverflowError'
      - $ref: '#/components/schemas/RequestValidationError'
      required:
      - _type
    TopologyOverflowError:
      properties:
        _type:
          enum:
          - TopologyOverflowError
          type: string
        maxSize:
          type: integer
      required:
      - _type
      - maxSize
      type: object
    RequestValidationError:
      properties:
        _type:
          enum:
          - RequestValidationError
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    EventListRequest:
      example:
        cursor:
          lastEventTimestampMs: 5
          lastEventId: lastEventId
        eventSources:
        - eventSources
        - eventSources
        limit: 1
        startTimestampMs: 0
        includeConnectedComponents: true
        playHeadTimestampMs: 5
        eventCategories:
        - null
        - null
        topologyQuery: topologyQuery
        eventTypes:
        - eventTypes
        - eventTypes
        eventTags:
        - eventTags
        - eventTags
        endTimestampMs: 6
      properties:
        startTimestampMs:
          format: instant
          type: integer
        endTimestampMs:
          format: instant
          type: integer
        topologyQuery:
          type: string
        includeConnectedComponents:
          type: boolean
        limit:
          type: integer
        playHeadTimestampMs:
          format: instant
          type: integer
        eventTypes:
          items:
            type: string
          type: array
        eventTags:
          items:
            type: string
          type: array
        eventCategories:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
        eventSources:
          items:
            type: string
          type: array
        cursor:
          $ref: '#/components/schemas/EventCursor'
      required:
      - endTimestampMs
      - limit
      - startTimestampMs
      - topologyQuery
      type: object
    EventCategory:
      enum:
      - Changes
      - Deployments
      - Alerts
      - Anomalies
      - Activities
      - Others
      type: string
    EventCursor:
      example:
        lastEventTimestampMs: 5
        lastEventId: lastEventId
      properties:
        lastEventTimestampMs:
          format: int64
          type: integer
        lastEventId:
          type: string
      required:
      - lastEventId
      - lastEventTimestampMs
      type: object
    EventItemsWithTotal:
      example:
        total: 1
        items:
        - identifier: identifier
          sourceIdentifier: sourceIdentifier
          data: "{}"
          description: description
          source: source
          eventType: eventType
          processedTime: 6
          tags:
          - value: value
            key: key
          - value: value
            key: key
          elements:
          - null
          - null
          name: name
          eventTime: 0
          category: null
          elementIdentifiers:
          - elementIdentifiers
          - elementIdentifiers
          sourceLinks:
          - title: title
            url: url
          - title: title
            url: url
        - identifier: identifier
          sourceIdentifier: sourceIdentifier
          data: "{}"
          description: description
          source: source
          eventType: eventType
          processedTime: 6
          tags:
          - value: value
            key: key
          - value: value
            key: key
          elements:
          - null
          - null
          name: name
          eventTime: 0
          category: null
          elementIdentifiers:
          - elementIdentifiers
          - elementIdentifiers
          sourceLinks:
          - title: title
            url: url
          - title: title
            url: url
      properties:
        items:
          items:
            $ref: '#/components/schemas/TopologyEvent'
          type: array
        total:
          format: int64
          type: integer
      required:
      - items
      - total
      type: object
    TopologyEvent:
      example:
        identifier: identifier
        sourceIdentifier: sourceIdentifier
        data: "{}"
        description: description
        source: source
        eventType: eventType
        processedTime: 6
        tags:
        - value: value
          key: key
        - value: value
          key: key
        elements:
        - null
        - null
        name: name
        eventTime: 0
        category: null
        elementIdentifiers:
        - elementIdentifiers
        - elementIdentifiers
        sourceLinks:
        - title: title
          url: url
        - title: title
          url: url
      properties:
        identifier:
          type: string
        sourceIdentifier:
          type: string
        elementIdentifiers:
          items:
            type: string
          type: array
        elements:
          items:
            $ref: '#/components/schemas/EventElement'
          type: array
        source:
          type: string
        category:
          $ref: '#/components/schemas/EventCategory'
        description:
          type: string
        name:
          type: string
        sourceLinks:
          items:
            $ref: '#/components/schemas/SourceLink'
          type: array
        data:
          type: object
        eventType:
          type: string
        eventTime:
          format: int64
          type: integer
        processedTime:
          format: int64
          type: integer
        tags:
          items:
            $ref: '#/components/schemas/EventTag'
          type: array
      required:
      - category
      - causingEvents
      - data
      - elementIdentifiers
      - elements
      - eventTime
      - eventType
      - identifier
      - name
      - processedTime
      - source
      - sourceLinks
      - tags
      type: object
    EventElement:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/EventComponent'
      - $ref: '#/components/schemas/EventRelation'
    EventComponent:
      properties:
        _type:
          enum:
          - EventComponent
          type: string
        id:
          format: int64
          type: integer
        componentTypeId:
          format: int64
          type: integer
        name:
          type: string
      required:
      - _type
      - componentTypeId
      - id
      - name
      type: object
    EventRelation:
      properties:
        _type:
          enum:
          - EventRelation
          type: string
        id:
          format: int64
          type: integer
        relationTypeId:
          format: int64
          type: integer
        name:
          type: string
        source:
          $ref: '#/components/schemas/EventComponent'
        target:
          $ref: '#/components/schemas/EventComponent'
        dependencyDirection:
          $ref: '#/components/schemas/DependencyDirection'
      required:
      - _type
      - dependencyDirection
      - id
      - relationTypeId
      - source
      - target
      type: object
    DependencyDirection:
      enum:
      - one-way
      - none
      - both
      type: string
    SourceLink:
      example:
        title: title
        url: url
      properties:
        title:
          type: string
        url:
          type: string
      required:
      - title
      - url
      type: object
    EventTag:
      example:
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
      required:
      - key
      - value
      type: object
    EventId:
      type: string
    EventNotFoundError:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - EventNotFoundError
          type: string
        eventId:
          type: string
      required:
      - _type
      - eventId
      type: object
    EventsHistogramRequest:
      example:
        topologyTimestamp: 0
        startTimestampMs: 6
        includeConnectedComponents: true
        eventCategories:
        - null
        - null
        topologyQuery: topologyQuery
        eventTypes:
        - eventTypes
        - eventTypes
        histogramBucketCount: 5
        endTimestampMs: 1
      properties:
        topologyTimestamp:
          format: instant
          type: integer
        startTimestampMs:
          format: instant
          type: integer
        endTimestampMs:
          format: instant
          type: integer
        topologyQuery:
          type: string
        includeConnectedComponents:
          type: boolean
        eventTypes:
          items:
            type: string
          type: array
        eventCategories:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
        histogramBucketCount:
          type: integer
      required:
      - endTimestampMs
      - histogramBucketCount
      - startTimestampMs
      - topologyQuery
      type: object
    EventsHistogram:
      example:
        buckets:
        - count: 0
          categoryBuckets:
          - count: 5
            category: null
          - count: 5
            category: null
          startTime: 6
          endTime: 1
        - count: 0
          categoryBuckets:
          - count: 5
            category: null
          - count: 5
            category: null
          startTime: 6
          endTime: 1
      properties:
        buckets:
          items:
            $ref: '#/components/schemas/EventBucket'
          type: array
      required:
      - buckets
      type: object
    EventBucket:
      example:
        count: 0
        categoryBuckets:
        - count: 5
          category: null
        - count: 5
          category: null
        startTime: 6
        endTime: 1
      properties:
        count:
          description: Total logs record count in the bucket.
          format: int64
          type: integer
        startTime:
          description: The bucket initial timestamp.
          format: instant
          type: integer
        endTime:
          description: The bucket final timestamp.
          format: instant
          type: integer
        categoryBuckets:
          items:
            $ref: '#/components/schemas/EventCategoryBucket'
          type: array
      required:
      - categoryBuckets
      - count
      - endTime
      - startTime
      type: object
    EventCategoryBucket:
      example:
        count: 5
        category: null
      properties:
        count:
          description: Total events count for a particular category in the bucket.
          format: int64
          type: integer
        category:
          $ref: '#/components/schemas/EventCategory'
      required:
      - category
      - count
      type: object
    StringItemsWithTotal:
      example:
        total: 0
        items:
        - items
        - items
      properties:
        items:
          items:
            type: string
          type: array
        total:
          format: int64
          type: integer
      required:
      - items
      - total
      type: object
    StreamList:
      example:
        items:
        - urn: urn
          subStreams: 0
          consistencyModel: consistencyModel
        - urn: urn
          subStreams: 0
          consistencyModel: consistencyModel
      properties:
        items:
          items:
            $ref: '#/components/schemas/StreamListItem'
          type: array
      required:
      - items
      type: object
    StreamListItem:
      example:
        urn: urn
        subStreams: 0
        consistencyModel: consistencyModel
      properties:
        urn:
          type: string
        consistencyModel:
          type: string
        subStreams:
          type: integer
      required:
      - consistencyModel
      - subStreams
      - urn
      type: object
    HealthStreamStatus:
      example:
        globalErrors:
        - level: level
          count: 6
          errorCode: errorCode
          error: error
        - level: level
          count: 6
          errorCode: errorCode
          error: error
        partition: 0
        recoverMessage: recoverMessage
        mainStreamStatus:
          checkStateCount: 1
          subStreamState: null
          metrics:
            createsPerSecond:
            - value: 5.637376656633329
            - value: 5.637376656633329
            latencySeconds:
            - value: 5.637376656633329
            - value: 5.637376656633329
            bucketSizeSeconds: 5
            deletesPerSecond:
            - value: 5.637376656633329
            - value: 5.637376656633329
            messagePerSecond:
            - value: 5.637376656633329
            - value: 5.637376656633329
            updatesPerSecond:
            - value: 5.637376656633329
            - value: 5.637376656633329
          errors:
          - level: level
            count: 6
            errorCode: errorCode
            error: error
          - level: level
            count: 6
            errorCode: errorCode
            error: error
        consistencyModel: consistencyModel
        aggregateMetrics:
          createsPerSecond:
          - value: 5.637376656633329
          - value: 5.637376656633329
          latencySeconds:
          - value: 5.637376656633329
          - value: 5.637376656633329
          bucketSizeSeconds: 5
          deletesPerSecond:
          - value: 5.637376656633329
          - value: 5.637376656633329
          messagePerSecond:
          - value: 5.637376656633329
          - value: 5.637376656633329
          updatesPerSecond:
          - value: 5.637376656633329
          - value: 5.637376656633329
      properties:
        partition:
          type: integer
        consistencyModel:
          type: string
        recoverMessage:
          type: string
        globalErrors:
          items:
            $ref: '#/components/schemas/HealthStreamError'
          type: array
        aggregateMetrics:
          $ref: '#/components/schemas/HealthStreamMetrics'
        mainStreamStatus:
          $ref: '#/components/schemas/HealthSubStreamStatus'
      required:
      - aggregateMetrics
      - consistencyModel
      - partition
      type: object
    HealthStreamErrors:
      items:
        $ref: '#/components/schemas/HealthStreamError'
      type: array
    HealthStreamError:
      example:
        level: level
        count: 6
        errorCode: errorCode
        error: error
      properties:
        errorCode:
          type: string
        level:
          type: string
        error:
          type: string
        count:
          type: integer
      required:
      - count
      - error
      - errorCode
      - level
      type: object
    HealthStreamMetrics:
      example:
        createsPerSecond:
        - value: 5.637376656633329
        - value: 5.637376656633329
        latencySeconds:
        - value: 5.637376656633329
        - value: 5.637376656633329
        bucketSizeSeconds: 5
        deletesPerSecond:
        - value: 5.637376656633329
        - value: 5.637376656633329
        messagePerSecond:
        - value: 5.637376656633329
        - value: 5.637376656633329
        updatesPerSecond:
        - value: 5.637376656633329
        - value: 5.637376656633329
      properties:
        bucketSizeSeconds:
          type: integer
        latencySeconds:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
        messagePerSecond:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
        createsPerSecond:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
        updatesPerSecond:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
        deletesPerSecond:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
      required:
      - bucketSizeSeconds
      type: object
    MetricBucketValues:
      items:
        $ref: '#/components/schemas/MetricBucketValue'
      type: array
    MetricBucketValue:
      example:
        value: 5.637376656633329
      properties:
        value:
          format: double
          type: number
      type: object
    HealthSubStreamStatus:
      example:
        checkStateCount: 1
        subStreamState: null
        metrics:
          createsPerSecond:
          - value: 5.637376656633329
          - value: 5.637376656633329
          latencySeconds:
          - value: 5.637376656633329
          - value: 5.637376656633329
          bucketSizeSeconds: 5
          deletesPerSecond:
          - value: 5.637376656633329
          - value: 5.637376656633329
          messagePerSecond:
          - value: 5.637376656633329
          - value: 5.637376656633329
          updatesPerSecond:
          - value: 5.637376656633329
          - value: 5.637376656633329
        errors:
        - level: level
          count: 6
          errorCode: errorCode
          error: error
        - level: level
          count: 6
          errorCode: errorCode
          error: error
      properties:
        errors:
          items:
            $ref: '#/components/schemas/HealthStreamError'
          type: array
        metrics:
          $ref: '#/components/schemas/HealthStreamMetrics'
        subStreamState:
          $ref: '#/components/schemas/HealthSubStreamConsistencyState'
        checkStateCount:
          type: integer
      required:
      - checkStateCount
      - metrics
      - subStreamState
      type: object
    HealthSubStreamConsistencyState:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/HealthSubStreamSnapshot'
      - $ref: '#/components/schemas/HealthSubStreamExpiry'
      - $ref: '#/components/schemas/HealthSubStreamTransactionalIncrements'
      required:
      - _type
    HealthSubStreamSnapshot:
      properties:
        _type:
          enum:
          - HealthSubStreamSnapshot
          type: string
        expiryIntervalMs:
          type: integer
        repeatIntervalMs:
          type: integer
      required:
      - _type
      - repeatIntervalMs
      type: object
    HealthSubStreamExpiry:
      properties:
        _type:
          enum:
          - HealthSubStreamExpiry
          type: string
        expiryIntervalMs:
          type: integer
        repeatIntervalMs:
          type: integer
      required:
      - _type
      - expiryIntervalMs
      - repeatIntervalMs
      type: object
    HealthSubStreamTransactionalIncrements:
      properties:
        _type:
          enum:
          - HealthSubStreamTransactionalIncrements
          type: string
        offset:
          format: int64
          type: integer
        batchIndex:
          format: int64
          type: integer
      required:
      - _type
      - offset
      type: object
    InvalidUrn:
      properties:
        urn:
          type: string
        message:
          type: string
      required:
      - message
      - urn
      type: object
    HealthStreamNotFound:
      properties:
        _type:
          enum:
          - HealthStreamNotFound
          type: string
        urn:
          type: string
      required:
      - _type
      - urn
      type: object
    SubStreamList:
      example:
        subStreams:
        - subStreamId: subStreamId
          checkStateCount: 0
          subStreamState: null
        - subStreamId: subStreamId
          checkStateCount: 0
          subStreamState: null
      properties:
        subStreams:
          items:
            $ref: '#/components/schemas/SubStreamListItem'
          type: array
      required:
      - subStreams
      type: object
    SubStreamListItem:
      example:
        subStreamId: subStreamId
        checkStateCount: 0
        subStreamState: null
      properties:
        subStreamId:
          type: string
        subStreamState:
          $ref: '#/components/schemas/HealthSubStreamConsistencyState'
        checkStateCount:
          type: integer
      required:
      - checkStateCount
      - subStreamId
      - subStreamState
      type: object
    TopologyMatchResult:
      example:
        unmatchedCheckStates:
        - topologyElementIdentifier: topologyElementIdentifier
          checkStateId: checkStateId
        - topologyElementIdentifier: topologyElementIdentifier
          checkStateId: checkStateId
        matchedCheckStates: 1
        multipleMatchesCheckStates:
        - topologyElementIdentifier: topologyElementIdentifier
          checkStateId: checkStateId
          matchCount: 6
        - topologyElementIdentifier: topologyElementIdentifier
          checkStateId: checkStateId
          matchCount: 6
      properties:
        matchedCheckStates:
          type: integer
        unmatchedCheckStates:
          items:
            $ref: '#/components/schemas/UnmatchedCheckState'
          type: array
        multipleMatchesCheckStates:
          items:
            $ref: '#/components/schemas/MultipleMatchesCheckState'
          type: array
      required:
      - matchedCheckStates
      - multipleMatchesCheckStates
      - unmatchedCheckStates
      type: object
    UnmatchedCheckState:
      example:
        topologyElementIdentifier: topologyElementIdentifier
        checkStateId: checkStateId
      properties:
        checkStateId:
          type: string
        topologyElementIdentifier:
          type: string
      required:
      - checkStateId
      - topologyElementIdentifier
      type: object
    MultipleMatchesCheckState:
      example:
        topologyElementIdentifier: topologyElementIdentifier
        checkStateId: checkStateId
        matchCount: 6
      properties:
        checkStateId:
          type: string
        topologyElementIdentifier:
          type: string
        matchCount:
          type: integer
      required:
      - checkStateId
      - matchCount
      - topologyElementIdentifier
      type: object
    HealthSubStreamError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/HealthStreamNotFound'
      - $ref: '#/components/schemas/HealthSubStreamNotFound'
      required:
      - _type
    HealthSubStreamNotFound:
      properties:
        _type:
          enum:
          - HealthSubStreamNotFound
          type: string
        urn:
          type: string
        subStreamId:
          type: string
      required:
      - _type
      - urn
      type: object
    TopologyStreamList:
      example:
        streams:
        - syncIdentifier: syncIdentifier
          createdRelations: 6
          deletedComponents: 5
          name: name
          deletedRelations: 1
          nodeId: 0
          errors: 2
          createdComponents: 5
          status: null
        - syncIdentifier: syncIdentifier
          createdRelations: 6
          deletedComponents: 5
          name: name
          deletedRelations: 1
          nodeId: 0
          errors: 2
          createdComponents: 5
          status: null
      properties:
        streams:
          items:
            $ref: '#/components/schemas/TopologyStreamListItem'
          type: array
      required:
      - streams
      type: object
    TopologyStreamListItem:
      example:
        syncIdentifier: syncIdentifier
        createdRelations: 6
        deletedComponents: 5
        name: name
        deletedRelations: 1
        nodeId: 0
        errors: 2
        createdComponents: 5
        status: null
      properties:
        syncIdentifier:
          nullable: true
          type: string
        nodeId:
          format: int64
          type: integer
        name:
          type: string
        createdRelations:
          format: int64
          type: integer
        deletedRelations:
          format: int64
          type: integer
        createdComponents:
          format: int64
          type: integer
        deletedComponents:
          format: int64
          type: integer
        errors:
          format: int64
          type: integer
        status:
          $ref: '#/components/schemas/TopologySyncStatus'
      required:
      - createdComponents
      - createdRelations
      - deletedComponents
      - deletedRelations
      - errors
      - name
      - nodeId
      - status
      type: object
    TopologySyncStatus:
      enum:
      - Running
      - Resetting
      - Deleting
      - DeleteFailed
      type: string
    TopologyStreamListItemWithErrorDetails:
      example:
        item:
          syncIdentifier: syncIdentifier
          createdRelations: 6
          deletedComponents: 5
          name: name
          deletedRelations: 1
          nodeId: 0
          errors: 2
          createdComponents: 5
          status: null
        errorDetails:
        - level: null
          externalId: externalId
          message: message
        - level: null
          externalId: externalId
          message: message
      properties:
        item:
          $ref: '#/components/schemas/TopologyStreamListItem'
        errorDetails:
          items:
            $ref: '#/components/schemas/TopologyStreamError'
          type: array
      required:
      - errorDetails
      - item
      type: object
    TopologyStreamErrors:
      items:
        $ref: '#/components/schemas/TopologyStreamError'
      type: array
    TopologyStreamError:
      example:
        level: null
        externalId: externalId
        message: message
      properties:
        level:
          $ref: '#/components/schemas/MessageLevel'
        message:
          type: string
        externalId:
          type: string
      required:
      - level
      - message
      type: object
    IdentifierType:
      enum:
      - NodeId
      - Identifier
      type: string
    InvalidSyncIdentifier:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    TopologySyncError:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    TopologyStreamMetrics:
      example:
        latencySeconds:
        - value: 5.637376656633329
        - value: 5.637376656633329
        bucketSizeSeconds: 0
      properties:
        bucketSizeSeconds:
          type: integer
        latencySeconds:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
      required:
      - bucketSizeSeconds
      type: object
    ExecuteScriptResponse:
      example:
        result: "{}"
      properties:
        result:
          description: "Contains a `value` and `_type` property. This is described\
            \ this way, because `value` can hold any\nJSON type and most open api\
            \ generators (but not all) have problems with such types or are inconsistent\
            \ with the OpenAPI spec.\nThe `_type` property describes the original\
            \ type of the result value during script execution.\nThe `value` property\
            \ holds the resulting value serialized to JSON.\nThe `value` property\
            \ can be of any JSON type, i.e. null, undefined, boolean, number, string,\
            \ array or object.\n"
          nullable: true
          type: object
      required:
      - result
      type: object
    ExecuteScriptError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/ExecuteScriptSyntaxErrors'
      - $ref: '#/components/schemas/ExecuteScriptGroovyRuntimeError'
      - $ref: '#/components/schemas/ExecuteScriptExecutionError'
      - $ref: '#/components/schemas/ExecuteScriptSecurityError'
      - $ref: '#/components/schemas/ExecuteScriptExceptionError'
      - $ref: '#/components/schemas/ExecuteScriptWrongReturnTypeError'
      - $ref: '#/components/schemas/ExecuteScriptTimeoutError'
      - $ref: '#/components/schemas/ExecuteScriptArgumentsScriptError'
      type: object
    ExecuteScriptSyntaxErrors:
      properties:
        _type:
          enum:
          - ExecuteScriptSyntaxErrors
          type: string
        message:
          type: string
        errors:
          items:
            $ref: '#/components/schemas/ExecuteScriptSyntaxErrors_errors_inner'
          type: array
      required:
      - _type
      - errors
      - message
      type: object
    ScriptLocation:
      properties:
        line:
          type: integer
        column:
          type: integer
      required:
      - column
      - line
      type: object
    ExecuteScriptGroovyRuntimeError:
      properties:
        _type:
          enum:
          - ExecuteScriptGroovyRuntimeError
          type: string
        message:
          type: string
        location:
          $ref: '#/components/schemas/ScriptLocation'
      required:
      - _type
      - message
      type: object
    ExecuteScriptExecutionError:
      properties:
        _type:
          enum:
          - ExecuteScriptExecutionError
          type: string
        reason:
          type: string
        message:
          type: string
      required:
      - _type
      - message
      - reason
      type: object
    ExecuteScriptSecurityError:
      properties:
        _type:
          enum:
          - ExecuteScriptSecurityError
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    ExecuteScriptExceptionError:
      properties:
        _type:
          enum:
          - ExecuteScriptExceptionError
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    ExecuteScriptWrongReturnTypeError:
      properties:
        _type:
          enum:
          - ExecuteScriptWrongReturnTypeError
          type: string
        message:
          type: string
        actualReturnType:
          type: string
        expectedReturnType:
          type: string
      required:
      - _type
      - actualReturnType
      - expectedReturnType
      - message
      type: object
    ExecuteScriptTimeoutError:
      properties:
        _type:
          enum:
          - ExecuteScriptTimeoutError
          type: string
        message:
          type: string
        timeoutMs:
          type: integer
      required:
      - _type
      - message
      - timeoutMs
      type: object
    ExecuteScriptArgumentsScriptError:
      properties:
        _type:
          enum:
          - ExecuteScriptArgumentsScriptError
          type: string
        message:
          type: string
        error:
          $ref: '#/components/schemas/ExecuteScriptError'
      required:
      - _type
      - error
      - message
      type: object
    ExecuteScriptRequest:
      example:
        argumentsScript: argumentsScript
        timeoutMs: 0
        script: script
      properties:
        timeoutMs:
          type: integer
        script:
          type: string
        argumentsScript:
          type: string
      required:
      - script
      type: object
    ServerInfo:
      example:
        deploymentMode: Saas
        platformVersion: 1.2.3-alpha.1+build5678
        version:
          patch: 1
          major: 0
          minor: 6
          isDev: true
          commit: commit
          diff: diff
      properties:
        version:
          $ref: '#/components/schemas/ServerVersion'
        deploymentMode:
          enum:
          - Saas
          - SelfHosted
          type: string
        platformVersion:
          description: "The version value is a semantic version, based on the official\
            \ Semantic Versioning spec (https://semver.org/)."
          example: 1.2.3-alpha.1+build5678
          type: string
      required:
      - deploymentMode
      - version
      type: object
    ServerVersion:
      example:
        patch: 1
        major: 0
        minor: 6
        isDev: true
        commit: commit
        diff: diff
      properties:
        major:
          type: integer
        minor:
          type: integer
        patch:
          type: integer
        diff:
          type: string
        commit:
          type: string
        isDev:
          type: boolean
      required:
      - commit
      - diff
      - isDev
      - major
      - minor
      - patch
      type: object
    SemanticVersion:
      description: "The version value is a semantic version, based on the official\
        \ Semantic Versioning spec (https://semver.org/)."
      example: 1.2.3-alpha.1+build5678
      type: string
    ServiceTokenCreatedResponse:
      example:
        name: name
        expiration: 0
        token: token
      properties:
        name:
          readOnly: true
          type: string
        token:
          readOnly: true
          type: string
        expiration:
          format: int64
          readOnly: true
          type: integer
      required:
      - name
      - token
      type: object
    ServiceTokenCreateError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/ServiceTokenInvalidExpiryError'
      required:
      - _type
    ServiceTokenInvalidExpiryError:
      properties:
        _type:
          enum:
          - ServiceTokenInvalidExpiryError
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    NewServiceTokenRequest:
      example:
        expiryDate: 0
        roles:
        - roles
        - roles
        name: name
      properties:
        name:
          type: string
        expiryDate:
          format: int64
          type: integer
        roles:
          items:
            type: string
          type: array
      required:
      - name
      - roles
      type: object
    ServiceToken:
      example:
        lastUpdateTimestamp: 6
        roles:
        - roles
        - roles
        name: name
        description: description
        expiration: 1
        id: 0
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        lastUpdateTimestamp:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        description:
          type: string
        expiration:
          format: int64
          type: integer
        roles:
          items:
            type: string
          type: array
      required:
      - name
      - roles
      type: object
    ServiceTokenId:
      format: int64
      type: integer
    IngestionApiKey:
      example:
        lastUpdateTimestamp: 6
        name: name
        description: description
        expiration: 1
        id: 0
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        lastUpdateTimestamp:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        description:
          type: string
        expiration:
          format: int64
          type: integer
      required:
      - id
      - lastUpdateTimestamp
      - name
      type: object
    GeneratedIngestionApiKeyResponse:
      example:
        lastUpdateTimestamp: 6
        apiKey: apiKey
        name: name
        description: description
        expiration: 1
        id: 0
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        lastUpdateTimestamp:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        description:
          type: string
        expiration:
          format: int64
          type: integer
        apiKey:
          type: string
      required:
      - apiKey
      - id
      - lastUpdateTimestamp
      - name
      type: object
    IngestionApiKeyCreateError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/IngestionApiKeyInvalidExpiryError'
      required:
      - _type
    IngestionApiKeyInvalidExpiryError:
      properties:
        _type:
          enum:
          - IngestionApiKeyInvalidExpiryError
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    GenerateIngestionApiKeyRequest:
      example:
        name: name
        description: description
        expiration: 0
      properties:
        name:
          type: string
        description:
          type: string
        expiration:
          format: int64
          type: integer
      required:
      - name
      type: object
    AuthorizeIngestionApiKeyRequest:
      example:
        apiKey: apiKey
      properties:
        apiKey:
          type: string
      required:
      - apiKey
      type: object
    IngestionApiKeyId:
      format: int64
      type: integer
    Permissions:
      example:
        permissions:
        - null
        - null
      properties:
        permissions:
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      required:
      - permissions
      type: object
    PermissionList:
      items:
        $ref: '#/components/schemas/Permission'
      type: array
    Permission:
      type: string
    PermissionDescription:
      example:
        subjectHandle: subjectHandle
        permissions:
          key: null
      properties:
        subjectHandle:
          type: string
        permissions:
          additionalProperties:
            $ref: '#/components/schemas/PermissionList'
          type: object
      required:
      - permissions
      - subjectHandle
      type: object
    Subject:
      type: string
    GrantPermission:
      example:
        permission: permission
        resourceName: resourceName
      properties:
        permission:
          type: string
        resourceName:
          type: string
      required:
      - permission
      - resourceName
      type: object
    Resource:
      type: string
    SubjectList:
      items:
        $ref: '#/components/schemas/SubjectConfig'
      type: array
    SubjectConfig:
      example:
        handle: handle
      properties:
        handle:
          type: string
      required:
      - handle
      type: object
    CreateSubject:
      example:
        query: query
      properties:
        query:
          type: string
      type: object
    Query:
      type: string
    SubscriptionState:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/ExpiredSubscription'
      - $ref: '#/components/schemas/UnlicensedSubscription'
      - $ref: '#/components/schemas/LicensedSubscription'
      required:
      - _type
      type: object
    ExpiredSubscription:
      properties:
        _type:
          enum:
          - ExpiredSubscription
          type: string
        subscription:
          $ref: '#/components/schemas/Subscription'
      required:
      - _type
      - subscription
      type: object
    Subscription:
      properties:
        tenant:
          type: string
        expiryTimestampMs:
          format: int64
          type: integer
        plan:
          type: string
      required:
      - plan
      - tenant
    UnlicensedSubscription:
      properties:
        _type:
          enum:
          - UnlicensedSubscription
          type: string
        reason:
          enum:
          - Missin
          - Invalid
          type: string
      required:
      - _type
      - reason
      type: object
    LicensedSubscription:
      properties:
        _type:
          enum:
          - LicensedSubscription
          type: string
        subscription:
          $ref: '#/components/schemas/Subscription'
      required:
      - _type
      - subscription
      type: object
    NewLicense:
      example:
        key: key
      properties:
        key:
          type: string
      required:
      - key
      type: object
    ProblemId:
      format: int64
      type: integer
    Instant:
      format: instant
      type: integer
    Limit:
      format: int32
      minimum: 1
      type: integer
    GetCausingEventsResult:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/CausingEventsResult'
      - $ref: '#/components/schemas/TooManyTopologyResults'
      - $ref: '#/components/schemas/CausingEventsAreNotAvailableForTheTime'
      required:
      - _type
    CausingEventsResult:
      properties:
        _type:
          enum:
          - CausingEventsResult
          type: string
        items:
          items:
            $ref: '#/components/schemas/TopologyEvent'
          type: array
      required:
      - _type
      - items
      type: object
    TooManyTopologyResults:
      properties:
        _type:
          enum:
          - TooManyTopologyResults
          type: string
      required:
      - _type
      type: object
    CausingEventsAreNotAvailableForTheTime:
      properties:
        _type:
          enum:
          - CausingEventsAreNotAvailableForTheTime
          type: string
      required:
      - _type
      type: object
    GetCausingEventsBadRequest:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/LimitOutOfRange'
      - $ref: '#/components/schemas/TopologyTimeOutOfRange'
      required:
      - _type
    LimitOutOfRange:
      properties:
        _type:
          enum:
          - LimitOutOfRange
          type: string
        message:
          type: string
        limit:
          format: int32
          type: integer
        lowerBound:
          format: int32
          type: integer
        upperBound:
          format: int32
          type: integer
      required:
      - _type
      - limit
      - lowerBound
      - message
      - upperBound
      type: object
    TopologyTimeOutOfRange:
      properties:
        _type:
          enum:
          - TopologyTimeOutOfRange
          type: string
        message:
          type: string
        topologyTimeMs:
          format: instant
          type: integer
        lowerBoundMs:
          format: instant
          type: integer
        upperBound:
          type: string
      required:
      - _type
      - lowerBoundMs
      - message
      - topologyTimeMs
      - upperBound
      type: object
    GetCausingEventsNotFound:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/ProblemNotFound'
      - $ref: '#/components/schemas/DataUnavailable'
      required:
      - _type
    ProblemNotFound:
      properties:
        _type:
          enum:
          - ProblemNotFound
          type: string
        message:
          type: string
        problemId:
          format: int64
          type: integer
        requestTimeMs:
          format: instant
          type: integer
      required:
      - _type
      - message
      - problemId
      - requestTimeMs
      type: object
    DataUnavailable:
      properties:
        _type:
          enum:
          - DataUnavailable
          type: string
        message:
          type: string
        requestTimeMs:
          format: instant
          type: integer
        availableSinceMs:
          format: instant
          type: integer
      required:
      - _type
      - availableSinceMs
      - message
      - requestTimeMs
      type: object
    GetCausingEventsServiceUnaivailable:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/TooManyActiveQueries'
      - $ref: '#/components/schemas/GetTopologyTimeout'
      required:
      - _type
    TooManyActiveQueries:
      properties:
        _type:
          enum:
          - TooManyActiveQueries
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    GetTopologyTimeout:
      properties:
        _type:
          enum:
          - GetTopologyTimeout
          type: string
        message:
          type: string
        timeoutSeconds:
          type: integer
      required:
      - _type
      - message
      - timeoutSeconds
      type: object
    PromQuery:
      type: string
    PromTime:
      pattern: "(^((?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))(Z|[\\\
        +-]\\d{2}:\\d{2})?)$)|(^[0-9]{10}$)"
      type: string
    PromTimeout:
      pattern: "^((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)$"
      type: string
    PromStep:
      pattern: "(^((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)$)|(^[0-9]+$)"
      type: string
    PromPostFilter:
      items:
        type: string
      type: array
    PromEnvelope:
      example:
        data: null
        errorType: errorType
        warnings:
        - warnings
        - warnings
        error: error
        status: status
      properties:
        status:
          type: string
        data:
          $ref: '#/components/schemas/PromData'
        errorType:
          type: string
        error:
          type: string
        warnings:
          items:
            type: string
          type: array
      required:
      - status
      type: object
    PromData:
      discriminator:
        mapping:
          matrix: '#/components/schemas/PromMatrix'
          vector: '#/components/schemas/PromVector'
          scalar: '#/components/schemas/PromScalar'
          string: '#/components/schemas/PromDataString'
        propertyName: resultType
      oneOf:
      - $ref: '#/components/schemas/PromMatrix'
      - $ref: '#/components/schemas/PromVector'
      - $ref: '#/components/schemas/PromScalar'
      - $ref: '#/components/schemas/PromDataString'
      required:
      - resultType
      type: object
    PromMatrix:
      properties:
        resultType:
          enum:
          - matrix
          type: string
        result:
          items:
            $ref: '#/components/schemas/PromDataResult'
          type: array
      required:
      - result
      - resultType
      type: object
    PromDataResult:
      properties:
        metric:
          additionalProperties:
            type: string
          type: object
        values:
          items:
            $ref: '#/components/schemas/PromSample'
          type: array
      required:
      - metric
      - values
      type: object
    PromSample:
      description: "This is always a tuple represented as an array with in first position\
        \ the unix timestamp as \na float with precision 3 in seconds) and in second\
        \ position the sample value as a string.\n"
      items:
        $ref: '#/components/schemas/PromSample_inner'
      maxItems: 2
      minItems: 2
      type: array
      x-as-tuple:
        values:
        - type: number
          format: unix_timestamp
        - type: string
          format: sample_value
    PromVector:
      properties:
        resultType:
          enum:
          - vector
          type: string
        result:
          items:
            $ref: '#/components/schemas/PromVectorResult'
          type: array
      required:
      - result
      - resultType
      type: object
    PromVectorResult:
      properties:
        metric:
          additionalProperties:
            type: string
          type: object
        value:
          description: "This is always a tuple represented as an array with in first\
            \ position the unix timestamp as \na float with precision 3 in seconds)\
            \ and in second position the sample value as a string.\n"
          items:
            $ref: '#/components/schemas/PromSample_inner'
          maxItems: 2
          minItems: 2
          type: array
          x-as-tuple:
            values:
            - type: number
              format: unix_timestamp
            - type: string
              format: sample_value
      required:
      - metric
      - value
      type: object
    PromScalar:
      properties:
        resultType:
          enum:
          - scalar
          type: string
        result:
          description: "This is always a tuple represented as an array with in first\
            \ position the unix timestamp as \na float with precision 3 in seconds)\
            \ and in second position the sample value as a string.\n"
          items:
            $ref: '#/components/schemas/PromSample_inner'
          maxItems: 2
          minItems: 2
          type: array
          x-as-tuple:
            values:
            - type: number
              format: unix_timestamp
            - type: string
              format: sample_value
      required:
      - result
      - resultType
      type: object
    PromDataString:
      properties:
        resultType:
          enum:
          - string
          type: string
        result:
          description: "This is always a tuple represented as an array with in first\
            \ position the unix timestamp as \na float with precision 3 in seconds)\
            \ and in second position the sample value as a string.\n"
          items:
            $ref: '#/components/schemas/PromSample_inner'
          maxItems: 2
          minItems: 2
          type: array
          x-as-tuple:
            values:
            - type: number
              format: unix_timestamp
            - type: string
              format: sample_value
      required:
      - result
      - resultType
      type: object
    PromQueryRequest:
      properties:
        query:
          $ref: '#/components/schemas/PromQuery'
        time:
          $ref: '#/components/schemas/PromTime'
        timeout:
          $ref: '#/components/schemas/PromTimeout'
        step:
          $ref: '#/components/schemas/PromStep'
        post_filter:
          $ref: '#/components/schemas/PromPostFilter'
      required:
      - query
      type: object
    PromMaxNumberOfDataPoints:
      format: int64
      type: integer
    PromQueryRangeRequest:
      properties:
        query:
          $ref: '#/components/schemas/PromQuery'
        start:
          $ref: '#/components/schemas/PromTime'
        end:
          $ref: '#/components/schemas/PromTime'
        step:
          $ref: '#/components/schemas/PromStep'
        timeout:
          $ref: '#/components/schemas/PromTimeout'
        aligned:
          $ref: '#/components/schemas/PromAligned'
        maxNumberOfDataPoints:
          $ref: '#/components/schemas/PromMaxNumberOfDataPoints'
        post_filter:
          $ref: '#/components/schemas/PromPostFilter'
      required:
      - end
      - query
      - start
      - step
      type: object
    PromAligned:
      type: boolean
    PromExemplarEnvelope:
      example:
        data:
        - seriesLabels:
            key: seriesLabels
          exemplars:
          - value: value
            labels:
              key: labels
            timestamp: 0.8008281904610115
          - value: value
            labels:
              key: labels
            timestamp: 0.8008281904610115
        - seriesLabels:
            key: seriesLabels
          exemplars:
          - value: value
            labels:
              key: labels
            timestamp: 0.8008281904610115
          - value: value
            labels:
              key: labels
            timestamp: 0.8008281904610115
        errorType: errorType
        warnings:
        - warnings
        - warnings
        error: error
        status: status
      properties:
        status:
          type: string
        data:
          items:
            $ref: '#/components/schemas/PromExemplarData'
          type: array
        errorType:
          type: string
        error:
          type: string
        warnings:
          items:
            type: string
          type: array
      required:
      - status
      type: object
    PromExemplarData:
      example:
        seriesLabels:
          key: seriesLabels
        exemplars:
        - value: value
          labels:
            key: labels
          timestamp: 0.8008281904610115
        - value: value
          labels:
            key: labels
          timestamp: 0.8008281904610115
      properties:
        seriesLabels:
          additionalProperties:
            type: string
          type: object
        exemplars:
          items:
            $ref: '#/components/schemas/PromExemplar'
          type: array
      required:
      - exemplars
      - seriesLabels
      type: object
    PromExemplar:
      example:
        value: value
        labels:
          key: labels
        timestamp: 0.8008281904610115
      properties:
        labels:
          additionalProperties:
            type: string
          type: object
        value:
          type: string
        timestamp:
          format: unix_timestamp
          type: number
      required:
      - labels
      - timestamp
      - value
      type: object
    PromQueryExemplarRequest:
      properties:
        query:
          $ref: '#/components/schemas/PromQuery'
        start:
          $ref: '#/components/schemas/PromTime'
        end:
          $ref: '#/components/schemas/PromTime'
      required:
      - query
      type: object
    PromMatch:
      items:
        type: string
      minItems: 1
      type: array
    PromLabelsEnvelope:
      example:
        data:
        - data
        - data
        errorType: errorType
        warnings:
        - warnings
        - warnings
        error: error
        status: status
      properties:
        status:
          type: string
        data:
          items:
            type: string
          type: array
        errorType:
          type: string
        error:
          type: string
        warnings:
          items:
            type: string
          type: array
      required:
      - status
      type: object
    PromLabelsRequest:
      properties:
        start:
          $ref: '#/components/schemas/PromTime'
        end:
          $ref: '#/components/schemas/PromTime'
        match[]:
          $ref: '#/components/schemas/PromMatch'
      type: object
    PromLabel:
      type: string
    PromLabelValuesRequest:
      properties:
        start:
          $ref: '#/components/schemas/PromTime'
        end:
          $ref: '#/components/schemas/PromTime'
        match[]:
          $ref: '#/components/schemas/PromMatch'
      type: object
    PromSeriesEnvelope:
      example:
        data:
        - key: data
        - key: data
        errorType: errorType
        warnings:
        - warnings
        - warnings
        error: error
        status: status
      properties:
        status:
          type: string
        data:
          items:
            additionalProperties:
              type: string
            type: object
          type: array
        errorType:
          type: string
        error:
          type: string
        warnings:
          items:
            type: string
          type: array
      required:
      - status
      type: object
    PromSeriesRequest:
      properties:
        match[]:
          $ref: '#/components/schemas/PromMatch'
        start:
          $ref: '#/components/schemas/PromTime'
        end:
          $ref: '#/components/schemas/PromTime'
      required:
      - "match[]"
      type: object
    PromLimit:
      format: int64
      type: integer
    PromMetric:
      type: string
    PromMetadataEnvelope:
      example:
        data:
          key:
          - key: data
          - key: data
        errorType: errorType
        warnings:
        - warnings
        - warnings
        error: error
        status: status
      properties:
        status:
          type: string
        data:
          additionalProperties:
            items:
              additionalProperties:
                type: string
              type: object
            type: array
          type: object
        errorType:
          type: string
        error:
          type: string
        warnings:
          items:
            type: string
          type: array
      required:
      - status
      type: object
    PromMetadata:
      additionalProperties:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
      type: object
    PromMetadataRequest:
      properties:
        limit:
          $ref: '#/components/schemas/PromLimit'
        metric:
          $ref: '#/components/schemas/PromMetric'
      type: object
    TopicList:
      items:
        $ref: '#/components/schemas/Topic'
      type: array
    Topic:
      example:
        name: name
      properties:
        name:
          type: string
      required:
      - name
      type: object
    TopicName:
      type: string
    Messages:
      example:
        messages:
        - partition: 0
          offset: 6
          message: "{}"
          key: key
        - partition: 0
          offset: 6
          message: "{}"
          key: key
      properties:
        messages:
          items:
            $ref: '#/components/schemas/Message'
          type: array
      required:
      - messages
      type: object
    MessageList:
      items:
        $ref: '#/components/schemas/Message'
      type: array
    Message:
      example:
        partition: 0
        offset: 6
        message: "{}"
        key: key
      properties:
        key:
          type: string
        partition:
          type: integer
        offset:
          format: int64
          type: integer
        message:
          type: object
      required:
      - key
      - message
      - offset
      - partition
      type: object
    Instant_1:
      description: Date/time representation in milliseconds since epoch (1970-01-01
        00:00:00)
      format: instant
      type: integer
    LogsDirection:
      default: NEWEST
      enum:
      - NEWEST
      - OLDEST
      type: string
    GetKubernetesLogsResult:
      example:
        pageSize: 1
        page: 5
        matchesTotal: 5
        logs:
        - severity: null
          podUID: podUID
          highlights:
          - startIndex: 0
            endIndex: 6
          - startIndex: 0
            endIndex: 6
          level: null
          containerName: containerName
          podName: podName
          message: message
          timestamp: 2000-01-23T04:56:07.000+00:00
        - severity: null
          podUID: podUID
          highlights:
          - startIndex: 0
            endIndex: 6
          - startIndex: 0
            endIndex: 6
          level: null
          containerName: containerName
          podName: podName
          message: message
          timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        logs:
          description: List of log records ordered by timestamps in ascending order.
          items:
            $ref: '#/components/schemas/KubernetesLogRecord'
          type: array
        pageSize:
          description: Maximum number of the log lines in the result.
          type: integer
        page:
          description: The requested logs page.
          type: integer
        matchesTotal:
          description: The total amount of matching logs for the requested search
            criteria.
          format: int64
          type: integer
      required:
      - logs
      - matchesTotal
      - page
      - pageSize
      type: object
    KubernetesLogRecord:
      example:
        severity: null
        podUID: podUID
        highlights:
        - startIndex: 0
          endIndex: 6
        - startIndex: 0
          endIndex: 6
        level: null
        containerName: containerName
        podName: podName
        message: message
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        timestamp:
          format: date-time
          type: string
        message:
          type: string
        highlights:
          items:
            $ref: '#/components/schemas/KubernetesLogHighlight'
          type: array
        podName:
          type: string
        podUID:
          type: string
        containerName:
          type: string
        severity:
          $ref: '#/components/schemas/LogSeverity'
        level:
          $ref: '#/components/schemas/LogLevel'
      required:
      - containerName
      - highlights
      - level
      - message
      - podName
      - podUID
      - severity
      - timestamp
      type: object
    KubernetesLogHighlight:
      example:
        startIndex: 0
        endIndex: 6
      properties:
        startIndex:
          description: Index of character in the message to start the highlight (0-based)
          type: integer
        endIndex:
          description: Index of character in the message to end the highlight (0-based)
          type: integer
      required:
      - endIndex
      - startIndex
      type: object
    LogSeverity:
      default: OTHER
      enum:
      - WARNING
      - ERROR
      - OTHER
      type: string
    LogLevel:
      default: UNKNOWN
      enum:
      - ALERT
      - TRACE
      - DEBUG
      - NOTICE
      - INFO
      - WARN
      - WARNING
      - ERR
      - ERROR
      - CRIT
      - CRITICAL
      - FATAL
      - SEVERE
      - EMERG
      - EMERGENCY
      - UNKNOWN
      type: string
    GetKubernetesLogsBadRequest:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/GetKubernetesLogsInvalidTimeRange'
      - $ref: '#/components/schemas/GetKubernetesLogsInvalidPagination'
      - $ref: '#/components/schemas/GetKubernetesLogsInvalidQuery'
      required:
      - _type
    GetKubernetesLogsInvalidTimeRange:
      properties:
        _type:
          enum:
          - InvalidTimeRange
          type: string
        message:
          type: string
        from:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
        to:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
      required:
      - _type
      - from
      - message
      - to
      type: object
    GetKubernetesLogsInvalidPagination:
      properties:
        _type:
          enum:
          - InvalidPagination
          type: string
        message:
          type: string
        pageSize:
          type: integer
        page:
          type: integer
      required:
      - _type
      - message
      - page
      - pageSize
      type: object
    GetKubernetesLogsInvalidQuery:
      properties:
        _type:
          enum:
          - InvalidQuery
          type: string
        message:
          type: string
        query:
          type: string
      required:
      - _type
      - message
      - query
      type: object
    GetKubernetesLogsHistogramResult:
      example:
        buckets:
        - count: 0
          logSeverityBuckets:
          - severity: null
            count: 5
          - severity: null
            count: 5
          startTime: 6
          endTime: 1
        - count: 0
          logSeverityBuckets:
          - severity: null
            count: 5
          - severity: null
            count: 5
          startTime: 6
          endTime: 1
      properties:
        buckets:
          items:
            $ref: '#/components/schemas/KubernetesLogHistogramBucket'
          type: array
      required:
      - buckets
      type: object
    KubernetesLogHistogramBucket:
      example:
        count: 0
        logSeverityBuckets:
        - severity: null
          count: 5
        - severity: null
          count: 5
        startTime: 6
        endTime: 1
      properties:
        count:
          description: Total logs record count in the bucket.
          format: int64
          type: integer
        startTime:
          description: The bucket initial timestamp.
          format: instant
          type: integer
        endTime:
          description: The bucket final timestamp.
          format: instant
          type: integer
        logSeverityBuckets:
          items:
            $ref: '#/components/schemas/KubernetesLogSeverityHistogramBucket'
          type: array
      required:
      - count
      - endTime
      - logSeverityBuckets
      - startTime
      type: object
    KubernetesLogSeverityHistogramBucket:
      example:
        severity: null
        count: 5
      properties:
        count:
          description: Total logs record count for a particular log severity in the
            bucket.
          format: int64
          type: integer
        severity:
          $ref: '#/components/schemas/LogSeverity'
      required:
      - count
      - severity
      type: object
    GetKubernetesLogsHistogramBadRequest:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/GetKubernetesLogsHistogramInvalidTimeRange'
      - $ref: '#/components/schemas/GetKubernetesLogsHistogramInvalidQuery'
      required:
      - _type
    GetKubernetesLogsHistogramInvalidTimeRange:
      properties:
        _type:
          enum:
          - InvalidTimeRange
          type: string
        message:
          type: string
        from:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
        to:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
      required:
      - _type
      - from
      - message
      - to
      type: object
    GetKubernetesLogsHistogramInvalidQuery:
      properties:
        _type:
          enum:
          - InvalidQuery
          type: string
        message:
          type: string
        query:
          type: string
      required:
      - _type
      - message
      - query
      type: object
    GetKubernetesLogsAutocompleteResult:
      example:
        levels:
        - null
        - null
        containerNames:
        - containerNames
        - containerNames
      properties:
        containerNames:
          items:
            type: string
          type: array
        levels:
          items:
            $ref: '#/components/schemas/LogSeverity'
          type: array
      required:
      - containerNames
      - levels
      type: object
    GetKubernetesLogsAutocompleteBadRequest:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/GetKubernetesLogsAutocompleteInvalidTimeRange'
      required:
      - _type
    GetKubernetesLogsAutocompleteInvalidTimeRange:
      properties:
        _type:
          enum:
          - InvalidTimeRange
          type: string
        message:
          type: string
        from:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
        to:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
      required:
      - _type
      - from
      - message
      - to
      type: object
    TraceQuery:
      description: "Find traces that have a span that matches the primary filter and\
        \ a span that matches the secondary filter. These could be the same, or two\
        \ different spans of the same trace."
      example:
        sortBy:
        - field: null
          direction: null
        - field: null
          direction: null
        primarySpanFilter:
          traceId:
          - 6942f450030e8c5f7411a23c26185aa2
          spanId:
          - 1a607e3a97735e71
          durationFromNanos: 500000
          spanKind:
          - Client
          durationToNanos: 5000000
          scopeName:
          - scopeName
          - scopeName
          attributes:
            key:
            - attributes
            - attributes
          spanParentType:
          - External
          serviceName: orderService
          spanName:
          - GET /orders
          statusCode:
          - Error
          scopeVersion:
          - scopeVersion
          - scopeVersion
        secondarySpanFilter:
          traceId:
          - 6942f450030e8c5f7411a23c26185aa2
          spanId:
          - 1a607e3a97735e71
          durationFromNanos: 500000
          spanKind:
          - Client
          durationToNanos: 5000000
          scopeName:
          - scopeName
          - scopeName
          attributes:
            key:
            - attributes
            - attributes
          spanParentType:
          - External
          serviceName: orderService
          spanName:
          - GET /orders
          statusCode:
          - Error
          scopeVersion:
          - scopeVersion
          - scopeVersion
      properties:
        primarySpanFilter:
          $ref: '#/components/schemas/SpanFilter'
        secondarySpanFilter:
          $ref: '#/components/schemas/SpanFilter'
        sortBy:
          items:
            $ref: '#/components/schemas/SpanSortOption'
          type: array
      required:
      - primarySpanFilter
      type: object
    SpanFilter:
      example:
        traceId:
        - 6942f450030e8c5f7411a23c26185aa2
        spanId:
        - 1a607e3a97735e71
        durationFromNanos: 500000
        spanKind:
        - Client
        durationToNanos: 5000000
        scopeName:
        - scopeName
        - scopeName
        attributes:
          key:
          - attributes
          - attributes
        spanParentType:
        - External
        serviceName: orderService
        spanName:
        - GET /orders
        statusCode:
        - Error
        scopeVersion:
        - scopeVersion
        - scopeVersion
      properties:
        serviceName:
          description: Filter spans by service name
          example: orderService
          items:
            type: string
          type: array
        spanName:
          description: Filter spans by name
          example:
          - GET /orders
          items:
            type: string
          type: array
        attributes:
          additionalProperties:
            items:
              type: string
            type: array
          description: Filter spans by 1 or more attributes
          type: object
        spanKind:
          description: Filter span by kind
          example:
          - Client
          items:
            $ref: '#/components/schemas/SpanKind'
          type: array
        spanParentType:
          description: Filter span by parent type
          example:
          - External
          items:
            $ref: '#/components/schemas/SpanParentType'
          type: array
        durationFromNanos:
          description: "Filter spans by duration >= value, in nanoseconds"
          example: 500000
          format: int64
          type: integer
        durationToNanos:
          description: "Filter spans by duration < value, in nanoseconds"
          example: 5000000
          format: int64
          type: integer
        statusCode:
          description: Filter spans by the StatusCode
          example:
          - Error
          items:
            $ref: '#/components/schemas/StatusCode'
          type: array
        traceId:
          description: "Filter spans by trace id, use only this filter to get a complete\
            \ trace"
          example:
          - 6942f450030e8c5f7411a23c26185aa2
          items:
            type: string
          type: array
        spanId:
          description: "Filter spans by span id, use only this filter to get a single\
            \ span"
          example:
          - 1a607e3a97735e71
          items:
            type: string
          type: array
        scopeName:
          description: Filter spans by scope
          items:
            type: string
          type: array
        scopeVersion:
          description: Filter spans by scope version
          items:
            type: string
          type: array
      type: object
    SpanKind:
      enum:
      - Unspecified
      - Client
      - Server
      - Internal
      - Consumer
      - Producer
      type: string
    SpanParentType:
      enum:
      - External
      - Internal
      - Root
      type: string
    StatusCode:
      enum:
      - Unset
      - Error
      - Ok
      type: string
    SpanSortOption:
      example:
        field: null
        direction: null
      properties:
        field:
          $ref: '#/components/schemas/SpanSortField'
        direction:
          $ref: '#/components/schemas/SpanSortDirection'
      required:
      - direction
      - field
      type: object
    SpanSortField:
      enum:
      - StartTime
      - ServiceName
      - SpanName
      - SpanKind
      - SpanParentType
      - DurationNanos
      - StatusCode
      - TraceId
      - SpanId
      - ScopeName
      - ScopeVersion
      type: string
    SpanSortDirection:
      enum:
      - Ascending
      - Descending
      type: string
    TraceQueryResponse:
      example:
        traces:
        - null
        - null
        pageSize: 0
        page: 6
        matchesTotal: 1
      properties:
        traces:
          description: List of traces matching the query
          items:
            $ref: '#/components/schemas/TraceQueryMatch'
          type: array
        pageSize:
          description: Maximum number of the traces in the result.
          type: integer
        page:
          description: The requested page.
          type: integer
        matchesTotal:
          description: The total number of matching traces.
          format: int64
          type: integer
      required:
      - matchesTotal
      - page
      - pageSize
      - traces
      type: object
    TraceQueryMatch:
      allOf:
      - $ref: '#/components/schemas/Trace'
      - $ref: '#/components/schemas/TraceQueryMatch_allOf'
      description: "A trace that matched the query filters. It structurally matches\
        \ the Trace schema, with extra fields representing \nthe result of the trace\
        \ query.\n"
    Trace:
      example:
        traceId: traceId
        spans:
        - traceId: traceId
          durationNanos: 1
          resourceId: resourceId
          spanKind: null
          scopeName: scopeName
          spanAttributes:
            key: spanAttributes
          spanParentType: null
          serviceName: serviceName
          parentSpanId: parentSpanId
          statusMessage: statusMessage
          spanName: spanName
          scopeVersion: scopeVersion
          spanId: spanId
          traceState: traceState
          startTime:
            offsetNanos: 602745
            timestamp: 0
          links:
          - traceId: traceId
            spanId: spanId
            traceState: traceState
            attributes:
              key: attributes
          - traceId: traceId
            spanId: spanId
            traceState: traceState
            attributes:
              key: attributes
          endTime:
            offsetNanos: 602745
            timestamp: 0
          events:
          - name: name
            attributes:
              key: attributes
            timestamp:
              offsetNanos: 602745
              timestamp: 0
          - name: name
            attributes:
              key: attributes
            timestamp:
              offsetNanos: 602745
              timestamp: 0
          statusCode: null
        - traceId: traceId
          durationNanos: 1
          resourceId: resourceId
          spanKind: null
          scopeName: scopeName
          spanAttributes:
            key: spanAttributes
          spanParentType: null
          serviceName: serviceName
          parentSpanId: parentSpanId
          statusMessage: statusMessage
          spanName: spanName
          scopeVersion: scopeVersion
          spanId: spanId
          traceState: traceState
          startTime:
            offsetNanos: 602745
            timestamp: 0
          links:
          - traceId: traceId
            spanId: spanId
            traceState: traceState
            attributes:
              key: attributes
          - traceId: traceId
            spanId: spanId
            traceState: traceState
            attributes:
              key: attributes
          endTime:
            offsetNanos: 602745
            timestamp: 0
          events:
          - name: name
            attributes:
              key: attributes
            timestamp:
              offsetNanos: 602745
              timestamp: 0
          - name: name
            attributes:
              key: attributes
            timestamp:
              offsetNanos: 602745
              timestamp: 0
          statusCode: null
        resources:
          key: null
      properties:
        traceId:
          description: The id of the trace
          type: string
        spans:
          description: All spans for the trace
          items:
            $ref: '#/components/schemas/Span'
          type: array
        resources:
          additionalProperties:
            $ref: '#/components/schemas/Attributes'
          description: |
            Map of resource identifiers to their corresponding resource attributes (key/value pairs). Keys are UUIDs used in the spans’ `resourceId` fields.
          type: object
      required:
      - resources
      - spans
      - traceId
      type: object
    Span:
      example:
        traceId: traceId
        durationNanos: 1
        resourceId: resourceId
        spanKind: null
        scopeName: scopeName
        spanAttributes:
          key: spanAttributes
        spanParentType: null
        serviceName: serviceName
        parentSpanId: parentSpanId
        statusMessage: statusMessage
        spanName: spanName
        scopeVersion: scopeVersion
        spanId: spanId
        traceState: traceState
        startTime:
          offsetNanos: 602745
          timestamp: 0
        links:
        - traceId: traceId
          spanId: spanId
          traceState: traceState
          attributes:
            key: attributes
        - traceId: traceId
          spanId: spanId
          traceState: traceState
          attributes:
            key: attributes
        endTime:
          offsetNanos: 602745
          timestamp: 0
        events:
        - name: name
          attributes:
            key: attributes
          timestamp:
            offsetNanos: 602745
            timestamp: 0
        - name: name
          attributes:
            key: attributes
          timestamp:
            offsetNanos: 602745
            timestamp: 0
        statusCode: null
      properties:
        startTime:
          $ref: '#/components/schemas/InstantNanoPrecision'
        endTime:
          $ref: '#/components/schemas/InstantNanoPrecision'
        durationNanos:
          description: Duration of the span in nanoseconds
          format: int64
          type: integer
        traceId:
          description: "The unique identifier for the trace, all spans of the same\
            \ trace share the same trace_id"
          type: string
        spanId:
          description: The unique identifier of the span within the trace
          type: string
        parentSpanId:
          description: The id of the parent span of this span. Empty if this is the
            root span
          type: string
        traceState:
          description: Can contain vendor specific trace identification information
            https://www.w3.org/TR/trace-context/#tracestate-header
          type: string
        spanName:
          description: "A description of the span's operation. For example, the name\
            \ can be a qualified method name or a file name and a line number where\
            \ the operation is called"
          type: string
        serviceName:
          description: Logical name of the service for the span
          type: string
        spanKind:
          $ref: '#/components/schemas/SpanKind'
        spanParentType:
          $ref: '#/components/schemas/SpanParentType'
        spanAttributes:
          additionalProperties:
            type: string
          description: Set of key/value pairs providing extra contextual information.
            Keys are unique.
          type: object
        resourceId:
          description: "Reference to shared resource attributes, used to deduplicate\
            \ repeated resource data."
          type: string
        statusCode:
          $ref: '#/components/schemas/StatusCode'
        statusMessage:
          description: Human readable message for the status
          type: string
        scopeName:
          description: The name of the instrumentation scope for the span https://opentelemetry.io/docs/specs/otel/glossary/#instrumentation-scope
          type: string
        scopeVersion:
          description: The version for the instrumentation scope for the span https://opentelemetry.io/docs/specs/otel/glossary/#instrumentation-scope
          type: string
        events:
          description: Time-stamped annotations on the span providing extra application
            context
          items:
            $ref: '#/components/schemas/SpanEvent'
          type: array
        links:
          description: Links to related spans in the same or in other traces
          items:
            $ref: '#/components/schemas/SpanLink'
          type: array
      required:
      - durationNanos
      - endTime
      - events
      - links
      - resourceId
      - serviceName
      - spanAttributes
      - spanId
      - spanKind
      - spanName
      - spanParentType
      - startTime
      - statusCode
      - traceId
      type: object
    Attributes:
      additionalProperties:
        type: string
      description: Set of key/value pairs providing extra contextual information.
        Keys are unique.
      type: object
    SpanEvent:
      description: "Event is a time-stamped annotation of the span, consisting of\
        \ user-supplied text description and key-value pairs."
      example:
        name: name
        attributes:
          key: attributes
        timestamp:
          offsetNanos: 602745
          timestamp: 0
      properties:
        timestamp:
          $ref: '#/components/schemas/InstantNanoPrecision'
        name:
          type: string
        attributes:
          additionalProperties:
            type: string
          description: Set of key/value pairs providing extra contextual information.
            Keys are unique.
          type: object
      required:
      - attributes
      - name
      - timestamp
      type: object
    SpanLink:
      description: "A pointer from the current span to another span in the same trace\
        \ or in a different trace. \nFor example, this can be used in batching operations,\
        \ where a single batch handler processes \nmultiple requests from different\
        \ traces or when the handler receives a request from a different project.\n"
      example:
        traceId: traceId
        spanId: spanId
        traceState: traceState
        attributes:
          key: attributes
      properties:
        traceId:
          type: string
        spanId:
          type: string
        traceState:
          type: string
        attributes:
          additionalProperties:
            type: string
          description: Set of key/value pairs providing extra contextual information.
            Keys are unique.
          type: object
      required:
      - attributes
      - spanId
      - traceId
      type: object
    TraceApiSpansBadRequest:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/TraceApiInvalidTimeRange'
      - $ref: '#/components/schemas/TraceApiInvalidPagination'
      - $ref: '#/components/schemas/TraceApiInvalidDurationFilter'
      required:
      - _type
    TraceApiInvalidTimeRange:
      properties:
        _type:
          enum:
          - TraceApiInvalidTimeRange
          type: string
        message:
          type: string
        from:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
        to:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
      required:
      - _type
      - from
      - message
      - to
      type: object
    TraceApiInvalidPagination:
      properties:
        _type:
          enum:
          - TraceApiInvalidPagination
          type: string
        message:
          type: string
        pageSize:
          type: integer
      required:
      - _type
      - message
      - pageSize
      type: object
    TraceApiInvalidDurationFilter:
      properties:
        _type:
          enum:
          - TraceApiInvalidDurationFilter
          type: string
        message:
          type: string
        from:
          format: int64
          type: integer
        to:
          format: int64
          type: integer
      required:
      - _type
      - from
      - message
      - to
      type: object
    TraceApiError:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    TraceFilter:
      description: "Filter traces that have a span that matches the primary filter\
        \ and a span that matches the secondary filter. These could be the same, or\
        \ two different spans of the same trace."
      example:
        primarySpanFilter:
          traceId:
          - 6942f450030e8c5f7411a23c26185aa2
          spanId:
          - 1a607e3a97735e71
          durationFromNanos: 500000
          spanKind:
          - Client
          durationToNanos: 5000000
          scopeName:
          - scopeName
          - scopeName
          attributes:
            key:
            - attributes
            - attributes
          spanParentType:
          - External
          serviceName: orderService
          spanName:
          - GET /orders
          statusCode:
          - Error
          scopeVersion:
          - scopeVersion
          - scopeVersion
        secondarySpanFilter:
          traceId:
          - 6942f450030e8c5f7411a23c26185aa2
          spanId:
          - 1a607e3a97735e71
          durationFromNanos: 500000
          spanKind:
          - Client
          durationToNanos: 5000000
          scopeName:
          - scopeName
          - scopeName
          attributes:
            key:
            - attributes
            - attributes
          spanParentType:
          - External
          serviceName: orderService
          spanName:
          - GET /orders
          statusCode:
          - Error
          scopeVersion:
          - scopeVersion
          - scopeVersion
      properties:
        primarySpanFilter:
          $ref: '#/components/schemas/SpanFilter'
        secondarySpanFilter:
          $ref: '#/components/schemas/SpanFilter'
      required:
      - primarySpanFilter
      type: object
    DurationHistogram:
      example:
        quantiles:
          q99: 3.616076749251911
          q90: 7.061401241503109
          q95: 9.301444243932576
          q50: 2.3021358869347655
        buckets:
        - lowerNanos: 5
          upperNanos: 5
          okCount: 0
          unsetCount: 1
          errorCount: 6
        - lowerNanos: 5
          upperNanos: 5
          okCount: 0
          unsetCount: 1
          errorCount: 6
      properties:
        buckets:
          description: List of duration buckets
          items:
            $ref: '#/components/schemas/DurationHistogramBucket'
          type: array
        quantiles:
          $ref: '#/components/schemas/DurationQuantiles'
      required:
      - buckets
      - quantiles
      type: object
    DurationHistogramBucket:
      example:
        lowerNanos: 5
        upperNanos: 5
        okCount: 0
        unsetCount: 1
        errorCount: 6
      properties:
        okCount:
          description: "Number of successful traces with a duration between (lowerNanos,\
            \ upperNanos]."
          type: integer
        errorCount:
          description: "Number of erroneous traces with a duration between (lowerNanos,\
            \ upperNanos]."
          type: integer
        unsetCount:
          description: "Number of traces with unset status and a duration between\
            \ (lowerNanos, upperNanos]."
          type: integer
        lowerNanos:
          description: Lower limit on trace duration
          format: int64
          type: integer
        upperNanos:
          description: Upper limit on trace duration
          format: int64
          type: integer
      required:
      - errorCount
      - okCount
      - unsetCount
      type: object
    DurationQuantiles:
      example:
        q99: 3.616076749251911
        q90: 7.061401241503109
        q95: 9.301444243932576
        q50: 2.3021358869347655
      properties:
        q50:
          format: double
          type: number
        q90:
          format: double
          type: number
        q95:
          format: double
          type: number
        q99:
          format: double
          type: number
      required:
      - q50
      - q90
      - q95
      - q99
      type: object
    TraceApiTraceNotFound:
      properties:
        traceId:
          type: string
      required:
      - traceId
      type: object
    SpanResponse:
      description: "The result of looking up a span. As an optimization to reduce\
        \ duplication, resource attributes are inlined at the\nroot-level of the schema.\n"
      example:
        resourceAttributes:
          key: resourceAttributes
        span:
          traceId: traceId
          durationNanos: 1
          resourceId: resourceId
          spanKind: null
          scopeName: scopeName
          spanAttributes:
            key: spanAttributes
          spanParentType: null
          serviceName: serviceName
          parentSpanId: parentSpanId
          statusMessage: statusMessage
          spanName: spanName
          scopeVersion: scopeVersion
          spanId: spanId
          traceState: traceState
          startTime:
            offsetNanos: 602745
            timestamp: 0
          links:
          - traceId: traceId
            spanId: spanId
            traceState: traceState
            attributes:
              key: attributes
          - traceId: traceId
            spanId: spanId
            traceState: traceState
            attributes:
              key: attributes
          endTime:
            offsetNanos: 602745
            timestamp: 0
          events:
          - name: name
            attributes:
              key: attributes
            timestamp:
              offsetNanos: 602745
              timestamp: 0
          - name: name
            attributes:
              key: attributes
            timestamp:
              offsetNanos: 602745
              timestamp: 0
          statusCode: null
      properties:
        span:
          $ref: '#/components/schemas/Span'
        resourceAttributes:
          additionalProperties:
            type: string
          description: Set of key/value pairs providing extra contextual information.
            Keys are unique.
          type: object
      required:
      - resourceAttributes
      - span
      type: object
    TraceApiSpanNotFound:
      properties:
        traceId:
          type: string
        spanId:
          type: string
      required:
      - spanId
      - traceId
      type: object
    Suggestions:
      example:
        suggestions:
        - suggestions
        - suggestions
      properties:
        suggestions:
          items:
            type: string
          type: array
      required:
      - suggestions
      type: object
    SpanSuggestionField:
      enum:
      - ServiceName
      - SpanName
      - ScopeName
      - ScopeVersion
      type: string
    ComponentQuery:
      example:
        resourceAttributes:
          key: resourceAttributes
        instant: 0
      properties:
        resourceAttributes:
          additionalProperties:
            type: string
          description: Set of key/value pairs providing extra contextual information.
            Keys are unique.
          type: object
        instant:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
      required:
      - resourceAttributes
      type: object
    SpanComponents:
      example:
        components:
        - identifier: identifier
          healthState: null
          name: name
          id: 0
          type: type
        - identifier: identifier
          healthState: null
          name: name
          id: 0
          type: type
      properties:
        components:
          items:
            $ref: '#/components/schemas/SpanComponent'
          type: array
      required:
      - components
      type: object
    SpanComponent:
      example:
        identifier: identifier
        healthState: null
        name: name
        id: 0
        type: type
      properties:
        id:
          format: int64
          type: integer
        identifier:
          type: string
        name:
          type: string
        type:
          type: string
        healthState:
          $ref: '#/components/schemas/HealthStateValue'
      required:
      - healthState
      - id
      - identifier
      - name
      - type
      type: object
    LayoutList:
      example:
        layouts:
        - null
        - null
      properties:
        layouts:
          items:
            $ref: '#/components/schemas/LayoutHint'
          type: array
      required:
      - layouts
      type: object
    LayoutHint:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/MetricPerspectiveTab'
      - $ref: '#/components/schemas/MetricPerspectiveSection'
      - $ref: '#/components/schemas/ComponentHighlightMetricSection'
    MetricPerspectiveTab:
      allOf:
      - $ref: '#/components/schemas/BaseLayoutHint'
      - $ref: '#/components/schemas/MetricPerspectiveTab_allOf'
    BaseLayoutHint:
      properties:
        name:
          type: string
        weight:
          format: float
          type: number
      required:
      - name
      - weight
      type: object
    MetricPerspectiveSection:
      allOf:
      - $ref: '#/components/schemas/BaseLayoutHint'
      - $ref: '#/components/schemas/MetricPerspectiveSection_allOf'
    ComponentHighlightMetricSection:
      allOf:
      - $ref: '#/components/schemas/BaseLayoutHint'
      - $ref: '#/components/schemas/ComponentHighlightMetricSection_allOf'
    LayoutApiError:
      properties:
        statusCode:
          type: string
        message:
          type: string
      required:
      - message
      - statusCode
      type: object
    ComponentIdOrUrn:
      pattern: "^urn:.+|[0-9]+$"
      type: string
    ComponentHealthHistory:
      example:
        startTime: 6
        id: 0
        endTime: 1
        healthStateChanges:
        - newHealth: null
          timestamp: 5
        - newHealth: null
          timestamp: 5
      properties:
        id:
          format: int64
          type: integer
        startTime:
          format: instant
          type: integer
        endTime:
          format: instant
          type: integer
        healthStateChanges:
          description: List of health state changes ordered from most recent to oldest.
          items:
            $ref: '#/components/schemas/ComponentHealthChange'
          type: array
      required:
      - endTime
      - healthStateChanges
      - id
      - startTime
    ComponentHealthChange:
      example:
        newHealth: null
        timestamp: 5
      properties:
        timestamp:
          format: int64
          type: integer
        newHealth:
          $ref: '#/components/schemas/HealthStateValue'
      required:
      - newHealth
      - timestamp
    ComponentNotFoundError:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - ComponentNotFoundError
          type: string
        componentId:
          format: int64
          type: integer
      required:
      - _type
      - componentId
      type: object
    ComponentId:
      format: int64
      type: integer
    CheckLeaseRequest:
      example:
        apiKey: apiKey
        agentData:
          memoryBytes: 5
          kernelVersion: kernelVersion
          coreCount: 1
          platform: platform
      properties:
        apiKey:
          type: string
        agentData:
          $ref: '#/components/schemas/AgentData'
      required:
      - apiKey
      type: object
    AgentId:
      type: string
    AgentRegistration:
      example:
        agentId: agentId
        nodeBudgetCount: 5
        leaseUntilEpochMs: 0
        registeredEpochMs: 6
        lease: null
        agentData:
          memoryBytes: 5
          kernelVersion: kernelVersion
          coreCount: 1
          platform: platform
      properties:
        agentId:
          type: string
        lease:
          $ref: '#/components/schemas/AgentLease'
        leaseUntilEpochMs:
          format: int64
          type: integer
        registeredEpochMs:
          format: int64
          type: integer
        agentData:
          $ref: '#/components/schemas/AgentData'
        nodeBudgetCount:
          description: "The number of standard (4CPU, 16Gb) nodes this agent counts\
            \ for"
          type: integer
      required:
      - agentId
      - lease
      - leaseUntilEpochMs
      - nodeBudgetCount
      - registeredEpochMs
      type: object
    AgentLease:
      enum:
      - Active
      - Limited
      - Stale
      type: string
    AgentData:
      example:
        memoryBytes: 5
        kernelVersion: kernelVersion
        coreCount: 1
        platform: platform
      properties:
        platform:
          type: string
        coreCount:
          type: integer
        memoryBytes:
          format: int64
          type: integer
        kernelVersion:
          type: string
      required:
      - coreCount
      - kernelVersion
      - memoryBytes
      - platform
      type: object
    AgentRegistrations:
      example:
        agents:
        - agentId: agentId
          nodeBudgetCount: 5
          leaseUntilEpochMs: 0
          registeredEpochMs: 6
          lease: null
          agentData:
            memoryBytes: 5
            kernelVersion: kernelVersion
            coreCount: 1
            platform: platform
        - agentId: agentId
          nodeBudgetCount: 5
          leaseUntilEpochMs: 0
          registeredEpochMs: 6
          lease: null
          agentData:
            memoryBytes: 5
            kernelVersion: kernelVersion
            coreCount: 1
            platform: platform
      properties:
        agents:
          items:
            $ref: '#/components/schemas/AgentRegistration'
          type: array
      required:
      - agents
      type: object
    SystemNotifications:
      example:
        notifications:
        - severity: null
          toast: true
          notificationTimeEpochMs: 0
          notificationId: notificationId
          title: title
          content: content
        - severity: null
          toast: true
          notificationTimeEpochMs: 0
          notificationId: notificationId
          title: title
          content: content
      properties:
        notifications:
          items:
            $ref: '#/components/schemas/SystemNotification'
          type: array
      required:
      - notifications
      type: object
    SystemNotification:
      example:
        severity: null
        toast: true
        notificationTimeEpochMs: 0
        notificationId: notificationId
        title: title
        content: content
      properties:
        notificationId:
          type: string
        title:
          type: string
        severity:
          $ref: '#/components/schemas/SystemNotificationSeverity'
        notificationTimeEpochMs:
          format: int64
          type: integer
        content:
          type: string
        toast:
          type: boolean
      required:
      - content
      - notificationId
      - notificationTimeEpochMs
      - severity
      - title
      - toast
      type: object
    SystemNotificationId:
      type: string
    SystemNotificationSeverity:
      enum:
      - info
      - ok
      - warning
      - problem
      type: string
    TimelineSummaryRequest:
      example:
        eventFilters:
          types:
          - types
          - types
          sources:
          - sources
          - sources
          categories:
          - categories
          - categories
          tags:
          - tags
          - tags
        arguments: null
        startTime: 0
        endTime: 6
        histogramBucketCount: 1
      properties:
        arguments:
          $ref: '#/components/schemas/TimelineSummaryRequest_arguments'
        startTime:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
        endTime:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
        histogramBucketCount:
          type: integer
        eventFilters:
          $ref: '#/components/schemas/EventFilters'
      required:
      - arguments
      - histogramBucketCount
      - startTime
      type: object
    ComponentViewArguments:
      properties:
        _type:
          enum:
          - ComponentViewArguments
          type: string
        componentIdentifier:
          type: string
        queryTime:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
      required:
      - _type
      - componentIdentifier
      type: object
    QueryViewArguments:
      properties:
        _type:
          enum:
          - QueryViewArguments
          type: string
        query:
          type: string
        queryTime:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
      required:
      - _type
      - query
      type: object
    EventFilters:
      example:
        types:
        - types
        - types
        sources:
        - sources
        - sources
        categories:
        - categories
        - categories
        tags:
        - tags
        - tags
      properties:
        types:
          items:
            type: string
          type: array
        tags:
          items:
            type: string
          type: array
        categories:
          items:
            type: string
          type: array
        sources:
          items:
            type: string
          type: array
      type: object
    TimelineSummary:
      example:
        healthHistory:
        - newHealth: null
          _type: TimelineSummaryHealthChange
          timestamp: 5
        - newHealth: null
          _type: TimelineSummaryHealthChange
          timestamp: 5
        buckets:
        - _type: TimelineSummaryEventBucket
          count: 0
          endTimeEpochMillis: 1
          startTimeEpochMillis: 6
        - _type: TimelineSummaryEventBucket
          count: 0
          endTimeEpochMillis: 1
          startTimeEpochMillis: 6
        fromTime: 5
      properties:
        buckets:
          items:
            $ref: '#/components/schemas/TimelineSummaryEventBucket'
          type: array
        healthHistory:
          items:
            $ref: '#/components/schemas/TimelineSummaryHealthChange'
          type: array
        fromTime:
          format: int64
          type: integer
      required:
      - buckets
      - fromTime
      - healthHistory
      type: object
    TimelineSummaryEventBucket:
      discriminator:
        propertyName: _type
      example:
        _type: TimelineSummaryEventBucket
        count: 0
        endTimeEpochMillis: 1
        startTimeEpochMillis: 6
      properties:
        _type:
          enum:
          - TimelineSummaryEventBucket
          type: string
        count:
          format: int64
          type: integer
        startTimeEpochMillis:
          format: int64
          type: integer
        endTimeEpochMillis:
          format: int64
          type: integer
      required:
      - _type
      - count
      - startTimeEpochMillis
      type: object
    TimelineSummaryHealthChange:
      discriminator:
        propertyName: _type
      example:
        newHealth: null
        _type: TimelineSummaryHealthChange
        timestamp: 5
      properties:
        _type:
          enum:
          - TimelineSummaryHealthChange
          type: string
        timestamp:
          format: int64
          type: integer
        newHealth:
          $ref: '#/components/schemas/HealthStateValue'
      required:
      - _type
      - newHealth
      - timestamp
      type: object
    TimelineSummaryOverflow:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    TimelineSummaryError:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    DashboardList:
      example:
        dashboards:
        - null
        - null
      properties:
        dashboards:
          description: "List of dashboards, which can be either metadata or full representations."
          items:
            $ref: '#/components/schemas/DashboardReadSchema'
          type: array
      required:
      - dashboards
      type: object
    DashboardReadSchema:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/DashboardReadMetadataSchema'
      - $ref: '#/components/schemas/DashboardReadFullSchema'
    DashboardReadMetadataSchema:
      allOf:
      - $ref: '#/components/schemas/DashboardReadBaseSchema'
      - $ref: '#/components/schemas/DashboardReadMetadataSchema_allOf'
    DashboardReadBaseSchema:
      properties:
        _type:
          type: string
        identifier:
          description: The identifier of a dashboard. Either the system/graph ID or
            URN of the resource.
          pattern: "^urn:.+|[0-9]+$"
          type: string
        id:
          format: int64
          type: integer
        name:
          description: Name of the dashboard
          type: string
        description:
          description: Description of the dashboard
          type: string
        scope:
          $ref: '#/components/schemas/DashboardScope'
        ownerId:
          description: "The user id of the dashboard owner. A dashboard was either\
            \ created by a user or from a StackPack. For a user, the identifier will\
            \ be the system/graph ID, and for a StackPack, the field will be empty/omitted."
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
      required:
      - _type
      - description
      - id
      - identifier
      - lastUpdateTimestamp
      - name
      - scope
      type: object
    DashboardIdOrUrn:
      description: The identifier of a dashboard. Either the system/graph ID or URN
        of the resource.
      pattern: "^urn:.+|[0-9]+$"
      type: string
    DashboardScope:
      description: "Scope of the dashboard. 'publicDashboard' for accessible by everyone,\
        \ 'privateDashboard' for owned and accessible by the current user."
      enum:
      - publicDashboard
      - privateDashboard
      type: string
    DashboardReadFullSchema:
      allOf:
      - $ref: '#/components/schemas/DashboardReadBaseSchema'
      - $ref: '#/components/schemas/DashboardReadFullSchema_allOf'
    DashboardWriteSchema:
      example:
        scope: null
        name: name
        description: description
        dashboard:
          metadata:
            createdAt: 2000-01-23T04:56:07.000+00:00
            name: name
            project: project
            version: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
          kind: kind
          spec:
            duration: duration
            variables:
            - null
            - null
            datasources:
              key:
                default: true
                plugin:
                  kind: kind
                  spec: "{}"
                display:
                  name: name
                  description: description
            refreshInterval: refreshInterval
            panels:
              key:
                kind: kind
                spec:
                  plugin:
                    kind: kind
                    spec: "{}"
                  display:
                    name: name
                    description: description
                  links:
                  - targetBlank: true
                    name: name
                    tooltip: tooltip
                    renderVariables: true
                    url: url
                  - targetBlank: true
                    name: name
                    tooltip: tooltip
                    renderVariables: true
                    url: url
                  queries:
                  - kind: kind
                    spec:
                      plugin:
                        kind: kind
                        spec: "{}"
                  - kind: kind
                    spec:
                      plugin:
                        kind: kind
                        spec: "{}"
            display:
              name: name
              description: description
            layouts:
            - kind: null
              spec:
                display:
                  title: title
                  collapse:
                    open: true
                items:
                - x: 6
                  width: 5
                  "y": 1
                  content:
                    $ref: $ref
                  height: 5
                - x: 6
                  width: 5
                  "y": 1
                  content:
                    $ref: $ref
                  height: 5
            - kind: null
              spec:
                display:
                  title: title
                  collapse:
                    open: true
                items:
                - x: 6
                  width: 5
                  "y": 1
                  content:
                    $ref: $ref
                  height: 5
                - x: 6
                  width: 5
                  "y": 1
                  content:
                    $ref: $ref
                  height: 5
      properties:
        name:
          description: Name of the dashboard
          type: string
        description:
          description: Description of the dashboard
          type: string
        scope:
          $ref: '#/components/schemas/DashboardScope'
        dashboard:
          $ref: '#/components/schemas/PersesDashboard'
      required:
      - dashboard
      - description
      - name
      - scope
      type: object
    DashboardClientErrors:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/DashboardInvalidIdentifierError'
      - $ref: '#/components/schemas/DashboardValidationError'
    DashboardInvalidIdentifierError:
      properties:
        _type:
          enum:
          - DashboardInvalidIdentifierError
          type: string
        message:
          description: A detailed error message describing why the operation failed.
          type: string
        dashboardIdOrUrn:
          type: string
      required:
      - _type
      - dashboardIdOrUrn
      - message
      type: object
    DashboardValidationError:
      properties:
        _type:
          enum:
          - DashboardValidationError
          type: string
        message:
          description: A detailed error message describing why the operation failed.
          type: string
      required:
      - _type
      - message
      type: object
    DashboardNotFoundError:
      properties:
        message:
          description: A detailed error message describing why the operation failed.
          type: string
        dashboardIdOrUrn:
          type: string
      required:
      - dashboardIdOrUrn
      - message
      type: object
    DashboardAuthorizationError:
      properties:
        message:
          description: A detailed error message describing why the operation failed.
          type: string
        dashboardIdOrUrn:
          type: string
        userName:
          type: string
      required:
      - dashboardIdOrUrn
      - message
      - userName
      type: object
    DashboardPatchSchema:
      description: The provided fields are used to patch the corresponding fields
        of a dashboard.
      example:
        scope: null
        name: name
        description: description
        dashboard:
          metadata:
            createdAt: 2000-01-23T04:56:07.000+00:00
            name: name
            project: project
            version: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
          kind: kind
          spec:
            duration: duration
            variables:
            - null
            - null
            datasources:
              key:
                default: true
                plugin:
                  kind: kind
                  spec: "{}"
                display:
                  name: name
                  description: description
            refreshInterval: refreshInterval
            panels:
              key:
                kind: kind
                spec:
                  plugin:
                    kind: kind
                    spec: "{}"
                  display:
                    name: name
                    description: description
                  links:
                  - targetBlank: true
                    name: name
                    tooltip: tooltip
                    renderVariables: true
                    url: url
                  - targetBlank: true
                    name: name
                    tooltip: tooltip
                    renderVariables: true
                    url: url
                  queries:
                  - kind: kind
                    spec:
                      plugin:
                        kind: kind
                        spec: "{}"
                  - kind: kind
                    spec:
                      plugin:
                        kind: kind
                        spec: "{}"
            display:
              name: name
              description: description
            layouts:
            - kind: null
              spec:
                display:
                  title: title
                  collapse:
                    open: true
                items:
                - x: 6
                  width: 5
                  "y": 1
                  content:
                    $ref: $ref
                  height: 5
                - x: 6
                  width: 5
                  "y": 1
                  content:
                    $ref: $ref
                  height: 5
            - kind: null
              spec:
                display:
                  title: title
                  collapse:
                    open: true
                items:
                - x: 6
                  width: 5
                  "y": 1
                  content:
                    $ref: $ref
                  height: 5
                - x: 6
                  width: 5
                  "y": 1
                  content:
                    $ref: $ref
                  height: 5
      properties:
        name:
          description: Name of the dashboard
          type: string
        description:
          description: Description of the dashboard
          type: string
        scope:
          $ref: '#/components/schemas/DashboardScope'
        dashboard:
          $ref: '#/components/schemas/PersesDashboard'
      type: object
    DashboardCloneSchema:
      description: The provided fields are used to override the corresponding fields
        of the new (cloned) dashboard.
      example:
        scope: null
        name: name
        description: description
        dashboard:
          metadata:
            createdAt: 2000-01-23T04:56:07.000+00:00
            name: name
            project: project
            version: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
          kind: kind
          spec:
            duration: duration
            variables:
            - null
            - null
            datasources:
              key:
                default: true
                plugin:
                  kind: kind
                  spec: "{}"
                display:
                  name: name
                  description: description
            refreshInterval: refreshInterval
            panels:
              key:
                kind: kind
                spec:
                  plugin:
                    kind: kind
                    spec: "{}"
                  display:
                    name: name
                    description: description
                  links:
                  - targetBlank: true
                    name: name
                    tooltip: tooltip
                    renderVariables: true
                    url: url
                  - targetBlank: true
                    name: name
                    tooltip: tooltip
                    renderVariables: true
                    url: url
                  queries:
                  - kind: kind
                    spec:
                      plugin:
                        kind: kind
                        spec: "{}"
                  - kind: kind
                    spec:
                      plugin:
                        kind: kind
                        spec: "{}"
            display:
              name: name
              description: description
            layouts:
            - kind: null
              spec:
                display:
                  title: title
                  collapse:
                    open: true
                items:
                - x: 6
                  width: 5
                  "y": 1
                  content:
                    $ref: $ref
                  height: 5
                - x: 6
                  width: 5
                  "y": 1
                  content:
                    $ref: $ref
                  height: 5
            - kind: null
              spec:
                display:
                  title: title
                  collapse:
                    open: true
                items:
                - x: 6
                  width: 5
                  "y": 1
                  content:
                    $ref: $ref
                  height: 5
                - x: 6
                  width: 5
                  "y": 1
                  content:
                    $ref: $ref
                  height: 5
      properties:
        name:
          description: Name of the dashboard. Required to make it easier so see which
            dashboard is the new (cloned) dashboard.
          type: string
        description:
          description: Description of the dashboard
          type: string
        scope:
          $ref: '#/components/schemas/DashboardScope'
        dashboard:
          $ref: '#/components/schemas/PersesDashboard'
      required:
      - name
      type: object
    StackElementNotFound:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - StackElementNotFound
          type: string
        objectType:
          type: string
        objectId:
          type: string
        message:
          type: string
        existedEarlierMs:
          format: int64
          type: integer
        existsLaterMs:
          format: int64
          type: integer
      required:
      - _type
      - message
      - objectId
      - objectType
      type: object
    Argument:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/ArgumentBooleanVal'
      - $ref: '#/components/schemas/ArgumentComponentTypeRef'
      - $ref: '#/components/schemas/ArgumentRelationTypeRef'
      - $ref: '#/components/schemas/ArgumentQueryViewRef'
      - $ref: '#/components/schemas/ArgumentLongVal'
      - $ref: '#/components/schemas/ArgumentStructTypeVal'
      - $ref: '#/components/schemas/ArgumentDoubleVal'
      - $ref: '#/components/schemas/ArgumentStateVal'
      - $ref: '#/components/schemas/ArgumentNodeIdVal'
      - $ref: '#/components/schemas/ArgumentDurationVal'
      - $ref: '#/components/schemas/ArgumentStringVal'
      - $ref: '#/components/schemas/ArgumentTimeWindowVal'
      - $ref: '#/components/schemas/ArgumentComparatorWithoutEqualityVal'
      - $ref: '#/components/schemas/ArgumentFailingHealthStateVal'
      - $ref: '#/components/schemas/ArgumentPromQLMetricVal'
      - $ref: '#/components/schemas/ArgumentTopologyQueryVal'
      - $ref: '#/components/schemas/ArgumentTopologyPromQLMetricVal'
      required:
      - _type
      type: object
    ArgumentBooleanVal:
      properties:
        _type:
          enum:
          - ArgumentBooleanVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          type: boolean
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentComponentTypeRef:
      properties:
        _type:
          enum:
          - ArgumentComponentTypeRef
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        componentType:
          format: int64
          type: integer
      required:
      - _type
      - componentType
      - parameter
      type: object
    ArgumentRelationTypeRef:
      properties:
        _type:
          enum:
          - ArgumentRelationTypeRef
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        relationType:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - relationType
      type: object
    ArgumentQueryViewRef:
      properties:
        _type:
          enum:
          - ArgumentQueryViewRef
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        queryView:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - queryView
      type: object
    ArgumentLongVal:
      properties:
        _type:
          enum:
          - ArgumentLongVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentStructTypeVal:
      properties:
        _type:
          enum:
          - ArgumentStructTypeVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          type: string
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentDoubleVal:
      properties:
        _type:
          enum:
          - ArgumentDoubleVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          format: double
          type: number
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentStateVal:
      properties:
        _type:
          enum:
          - ArgumentStateVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/HealthStateValue'
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentNodeIdVal:
      properties:
        _type:
          enum:
          - ArgumentNodeIdVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentDurationVal:
      properties:
        _type:
          enum:
          - ArgumentDurationVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          format: int64
          type: integer
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentStringVal:
      properties:
        _type:
          enum:
          - ArgumentStringVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          type: string
      required:
      - _type
      - parameter
      - value
      type: object
    ArgumentTimeWindowVal:
      properties:
        _type:
          enum:
          - ArgumentTimeWindowVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        valueMs:
          format: int64
          minimum: 0
          type: integer
      required:
      - _type
      - parameter
      - valueMs
      type: object
    ArgumentComparatorWithoutEqualityVal:
      properties:
        _type:
          enum:
          - ArgumentComparatorWithoutEqualityVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/ComparatorWithoutEquality'
      required:
      - _type
      - parameter
      - value
      type: object
    ComparatorWithoutEquality:
      enum:
      - GTE
      - GT
      - LT
      - LTE
      type: string
    ArgumentFailingHealthStateVal:
      properties:
        _type:
          enum:
          - ArgumentFailingHealthStateVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/FailingHealthStateValue'
      required:
      - _type
      - parameter
      - value
      type: object
    FailingHealthStateValue:
      enum:
      - DEVIATING
      - CRITICAL
      - UNKNOWN
      type: string
    ArgumentPromQLMetricVal:
      properties:
        _type:
          enum:
          - ArgumentPromQLMetricVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/PromQLMetric'
      required:
      - _type
      - parameter
      - value
      type: object
    PromQLMetric:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - PromQLMetric
          type: string
        id:
          format: int64
          type: integer
        query:
          type: string
        unit:
          type: string
        aliasTemplate:
          type: string
      required:
      - _type
      - aliasTemplate
      - query
      - unit
      type: object
    ArgumentTopologyQueryVal:
      properties:
        _type:
          enum:
          - ArgumentTopologyQueryVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        query:
          type: string
      required:
      - _type
      - parameter
      - query
      type: object
    ArgumentTopologyPromQLMetricVal:
      properties:
        _type:
          enum:
          - ArgumentTopologyPromQLMetricVal
          type: string
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        parameter:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/TopologyPromQLMetric'
      required:
      - _type
      - parameter
      - value
      type: object
    TopologyPromQLMetric:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - TopologyPromQLMetric
          type: string
        id:
          format: int64
          type: integer
        promQLQuery:
          type: string
        unit:
          type: string
        aliasTemplate:
          type: string
        topologyQuery:
          type: string
      required:
      - _type
      - aliasTemplate
      - promQLQuery
      - topologyQuery
      - unit
      type: object
    ViewCheckState:
      example:
        componentType: componentType
        lastUpdateTimestamp: 0
        healthState: null
        checkStateId: checkStateId
        componentName: componentName
        componentIdentifier: componentIdentifier
      properties:
        checkStateId:
          type: string
        healthState:
          $ref: '#/components/schemas/HealthStateValue'
        componentName:
          type: string
        componentIdentifier:
          type: string
        componentType:
          type: string
        lastUpdateTimestamp:
          format: int64
          type: integer
      required:
      - checkStateId
      - componentIdentifier
      - healthState
      - lastUpdateTimestamp
      type: object
    MessageLevel:
      enum:
      - WARN
      - ERROR
      - INFO
      type: string
    MonitorReferenceId:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/MonitorDefId'
      - $ref: '#/components/schemas/ExternalMonitorDefId'
      type: object
    MonitorDefId:
      properties:
        _type:
          enum:
          - MonitorDefId
          type: string
        id:
          format: int64
          type: integer
      required:
      - _type
      - id
      type: object
    ExternalMonitorDefId:
      properties:
        _type:
          enum:
          - ExternalMonitorDefId
          type: string
        id:
          format: int64
          type: integer
      required:
      - _type
      - id
      type: object
    NotificationChannel:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/SlackNotificationChannel'
      - $ref: '#/components/schemas/WebhookNotificationChannel'
      - $ref: '#/components/schemas/OpsgenieNotificationChannel'
      - $ref: '#/components/schemas/TeamsNotificationChannel'
      - $ref: '#/components/schemas/EmailNotificationChannel'
    InstantNanoPrecision:
      description: A custom representation for a date/time that needs better than
        milliseconds precision. Simply using nanoseconds since epoch results in integers
        that are too big to be represented correctly in Javascript (which is limited
        to 2^53-1). Instead this uses the standard representation of milliseconds
        since epoch with a nanosecond offset. Calculate nanoseconds since epoch like
        this `nanosSinceEpoch = timestamp * 1000000 + offsetNanos`.
      example:
        offsetNanos: 602745
        timestamp: 0
      properties:
        timestamp:
          description: Date/time representation in milliseconds since epoch (1970-01-01
            00:00:00)
          format: instant
          type: integer
        offsetNanos:
          description: "Offset in nanoseconds (relative to the timestamp). Especially\
            \ useful when comparing start and/or end times of spans, for example when\
            \ rendering a trace chart."
          format: int32
          maximum: 999999
          minimum: 0
          type: integer
      required:
      - offsetNanos
      - timestamp
      type: object
    PersesDashboard:
      example:
        metadata:
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          project: project
          version: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
        kind: kind
        spec:
          duration: duration
          variables:
          - null
          - null
          datasources:
            key:
              default: true
              plugin:
                kind: kind
                spec: "{}"
              display:
                name: name
                description: description
          refreshInterval: refreshInterval
          panels:
            key:
              kind: kind
              spec:
                plugin:
                  kind: kind
                  spec: "{}"
                display:
                  name: name
                  description: description
                links:
                - targetBlank: true
                  name: name
                  tooltip: tooltip
                  renderVariables: true
                  url: url
                - targetBlank: true
                  name: name
                  tooltip: tooltip
                  renderVariables: true
                  url: url
                queries:
                - kind: kind
                  spec:
                    plugin:
                      kind: kind
                      spec: "{}"
                - kind: kind
                  spec:
                    plugin:
                      kind: kind
                      spec: "{}"
          display:
            name: name
            description: description
          layouts:
          - kind: null
            spec:
              display:
                title: title
                collapse:
                  open: true
              items:
              - x: 6
                width: 5
                "y": 1
                content:
                  $ref: $ref
                height: 5
              - x: 6
                width: 5
                "y": 1
                content:
                  $ref: $ref
                height: 5
          - kind: null
            spec:
              display:
                title: title
                collapse:
                  open: true
              items:
              - x: 6
                width: 5
                "y": 1
                content:
                  $ref: $ref
                height: 5
              - x: 6
                width: 5
                "y": 1
                content:
                  $ref: $ref
                height: 5
      properties:
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/PersesProjectMetadata'
        spec:
          $ref: '#/components/schemas/PersesDashboardSpec'
      type: object
    PersesKind:
      type: string
    PersesProjectMetadata:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        project: project
        version: 0
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        createdAt:
          format: date-time
          type: string
        name:
          type: string
        project:
          type: string
        updatedAt:
          format: date-time
          type: string
        version:
          format: uint64
          type: integer
      type: object
    PersesDashboardSpec:
      example:
        duration: duration
        variables:
        - null
        - null
        datasources:
          key:
            default: true
            plugin:
              kind: kind
              spec: "{}"
            display:
              name: name
              description: description
        refreshInterval: refreshInterval
        panels:
          key:
            kind: kind
            spec:
              plugin:
                kind: kind
                spec: "{}"
              display:
                name: name
                description: description
              links:
              - targetBlank: true
                name: name
                tooltip: tooltip
                renderVariables: true
                url: url
              - targetBlank: true
                name: name
                tooltip: tooltip
                renderVariables: true
                url: url
              queries:
              - kind: kind
                spec:
                  plugin:
                    kind: kind
                    spec: "{}"
              - kind: kind
                spec:
                  plugin:
                    kind: kind
                    spec: "{}"
        display:
          name: name
          description: description
        layouts:
        - kind: null
          spec:
            display:
              title: title
              collapse:
                open: true
            items:
            - x: 6
              width: 5
              "y": 1
              content:
                $ref: $ref
              height: 5
            - x: 6
              width: 5
              "y": 1
              content:
                $ref: $ref
              height: 5
        - kind: null
          spec:
            display:
              title: title
              collapse:
                open: true
            items:
            - x: 6
              width: 5
              "y": 1
              content:
                $ref: $ref
              height: 5
            - x: 6
              width: 5
              "y": 1
              content:
                $ref: $ref
              height: 5
      properties:
        datasources:
          additionalProperties:
            $ref: '#/components/schemas/PersesDatasourceSpec'
          description: Datasources is an optional list of datasource definition.
          type: object
        display:
          $ref: '#/components/schemas/PersesDashboardDisplaySpec'
        duration:
          description: "A Duration represents the elapsed time between two instants.\n\
            It must be provided as a string like \"1h\", \"30m\", \"15s\".\n"
          type: string
        layouts:
          items:
            $ref: '#/components/schemas/PersesLayout'
          type: array
        panels:
          additionalProperties:
            $ref: '#/components/schemas/PersesPanel'
          type: object
        refreshInterval:
          description: "A Duration represents the elapsed time between two instants.\n\
            It must be provided as a string like \"1h\", \"30m\", \"15s\".\n"
          type: string
        variables:
          items:
            $ref: '#/components/schemas/PersesVariableTypes'
          type: array
      type: object
    PersesDatasourceSpec:
      example:
        default: true
        plugin:
          kind: kind
          spec: "{}"
        display:
          name: name
          description: description
      properties:
        default:
          type: boolean
        display:
          $ref: '#/components/schemas/PersesDashboardDisplaySpec'
        plugin:
          $ref: '#/components/schemas/PersesPlugin'
      type: object
    PersesDashboardDisplaySpec:
      example:
        name: name
        description: description
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    PersesPlugin:
      example:
        kind: kind
        spec: "{}"
      properties:
        kind:
          type: string
        spec:
          type: object
      type: object
    PersesDuration:
      description: "A Duration represents the elapsed time between two instants.\n\
        It must be provided as a string like \"1h\", \"30m\", \"15s\".\n"
      type: string
    PersesLayout:
      example:
        kind: null
        spec:
          display:
            title: title
            collapse:
              open: true
          items:
          - x: 6
            width: 5
            "y": 1
            content:
              $ref: $ref
            height: 5
          - x: 6
            width: 5
            "y": 1
            content:
              $ref: $ref
            height: 5
      properties:
        kind:
          $ref: '#/components/schemas/PersesLayoutKind'
        spec:
          $ref: '#/components/schemas/PersesLayoutSpec'
      required:
      - kind
      - spec
      type: object
    PersesLayoutKind:
      description: "Defines the layout type. Currently, only 'Grid' is supported."
      enum:
      - Grid
      type: string
    PersesLayoutSpec:
      example:
        display:
          title: title
          collapse:
            open: true
        items:
        - x: 6
          width: 5
          "y": 1
          content:
            $ref: $ref
          height: 5
        - x: 6
          width: 5
          "y": 1
          content:
            $ref: $ref
          height: 5
      properties:
        display:
          $ref: '#/components/schemas/PersesGridLayoutDisplay'
        items:
          items:
            $ref: '#/components/schemas/PersesGridItem'
          type: array
      required:
      - items
      type: object
    PersesGridLayoutDisplay:
      example:
        title: title
        collapse:
          open: true
      properties:
        title:
          description: The title of the grid layout.
          type: string
        collapse:
          $ref: '#/components/schemas/PersesGridLayoutCollapse'
      required:
      - title
      type: object
    PersesGridLayoutCollapse:
      example:
        open: true
      properties:
        open:
          description: Indicates whether the grid layout is collapsed.
          type: boolean
      required:
      - open
      type: object
    PersesGridItem:
      example:
        x: 6
        width: 5
        "y": 1
        content:
          $ref: $ref
        height: 5
      properties:
        x:
          description: The x-coordinate of the item in the grid.
          type: integer
        "y":
          description: The y-coordinate of the item in the grid.
          type: integer
        width:
          description: The width of the item in the grid.
          type: integer
        height:
          description: The height of the item in the grid.
          type: integer
        content:
          $ref: '#/components/schemas/PersesJSONRef'
      required:
      - content
      - height
      - width
      - x
      - "y"
      type: object
    PersesJSONRef:
      example:
        $ref: $ref
      properties:
        $ref:
          description: "The JSON reference pointing to the actual object. The property\
            \ name '$ref' contains a reserved char, which gets stripped away when\
            \ generated (it's possible to handle this but makes the generation code\
            \ more complex). For now, consumers of this spec will need to omit the\
            \ '$' in the property name."
          type: string
      required:
      - $ref
      type: object
    PersesPanel:
      example:
        kind: kind
        spec:
          plugin:
            kind: kind
            spec: "{}"
          display:
            name: name
            description: description
          links:
          - targetBlank: true
            name: name
            tooltip: tooltip
            renderVariables: true
            url: url
          - targetBlank: true
            name: name
            tooltip: tooltip
            renderVariables: true
            url: url
          queries:
          - kind: kind
            spec:
              plugin:
                kind: kind
                spec: "{}"
          - kind: kind
            spec:
              plugin:
                kind: kind
                spec: "{}"
      properties:
        kind:
          type: string
        spec:
          $ref: '#/components/schemas/PersesPanelSpec'
      type: object
    PersesPanelSpec:
      example:
        plugin:
          kind: kind
          spec: "{}"
        display:
          name: name
          description: description
        links:
        - targetBlank: true
          name: name
          tooltip: tooltip
          renderVariables: true
          url: url
        - targetBlank: true
          name: name
          tooltip: tooltip
          renderVariables: true
          url: url
        queries:
        - kind: kind
          spec:
            plugin:
              kind: kind
              spec: "{}"
        - kind: kind
          spec:
            plugin:
              kind: kind
              spec: "{}"
      properties:
        display:
          $ref: '#/components/schemas/PersesPanelDisplay'
        links:
          items:
            $ref: '#/components/schemas/PersesLink'
          type: array
        plugin:
          $ref: '#/components/schemas/PersesPlugin'
        queries:
          items:
            $ref: '#/components/schemas/PersesQuery'
          type: array
      type: object
    PersesPanelDisplay:
      example:
        name: name
        description: description
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    PersesLink:
      example:
        targetBlank: true
        name: name
        tooltip: tooltip
        renderVariables: true
        url: url
      properties:
        name:
          type: string
        renderVariables:
          type: boolean
        targetBlank:
          type: boolean
        tooltip:
          type: string
        url:
          type: string
      type: object
    PersesQuery:
      example:
        kind: kind
        spec:
          plugin:
            kind: kind
            spec: "{}"
      properties:
        kind:
          type: string
        spec:
          $ref: '#/components/schemas/PersesQuerySpec'
      type: object
    PersesQuerySpec:
      example:
        plugin:
          kind: kind
          spec: "{}"
      properties:
        plugin:
          $ref: '#/components/schemas/PersesPlugin'
      type: object
    PersesVariableTypes:
      discriminator:
        mapping:
          TextVariable: '#/components/schemas/PersesTextVariable'
          ListVariable: '#/components/schemas/PersesListVariable'
        propertyName: kind
      oneOf:
      - $ref: '#/components/schemas/PersesTextVariable'
      - $ref: '#/components/schemas/PersesListVariable'
    PersesTextVariable:
      properties:
        kind:
          enum:
          - TextVariable
          type: string
        spec:
          $ref: '#/components/schemas/PersesTextVariableSpec'
      required:
      - kind
      type: object
    PersesTextVariableSpec:
      properties:
        name:
          type: string
        display:
          $ref: '#/components/schemas/PersesVariableDisplaySpec'
        value:
          type: string
        constant:
          type: boolean
      required:
      - name
      - value
      type: object
    PersesVariableDisplaySpec:
      properties:
        name:
          type: string
        description:
          type: string
        hidden:
          type: boolean
      type: object
    PersesListVariable:
      properties:
        kind:
          enum:
          - ListVariable
          type: string
        spec:
          $ref: '#/components/schemas/PersesListVariableSpec'
      required:
      - kind
      type: object
    PersesListVariableSpec:
      properties:
        name:
          type: string
        display:
          $ref: '#/components/schemas/PersesVariableDisplaySpec'
        defaultValue:
          $ref: '#/components/schemas/PersesListVariableDefaultValue'
        allowAllValue:
          type: boolean
        allowMultiple:
          type: boolean
        customAllValue:
          type: string
        capturingRegexp:
          type: string
        sort:
          $ref: '#/components/schemas/PersesVariableSort'
        plugin:
          $ref: '#/components/schemas/PersesPlugin'
      required:
      - allowAllValue
      - allowMultiple
      - name
      - plugin
      type: object
    PersesListVariableDefaultValue:
      discriminator:
        mapping:
          singleValue: '#/components/schemas/PersesListVariableDefaultSingleValue'
          sliceValues: '#/components/schemas/PersesListVariableDefaultSliceValues'
        propertyName: kind
      oneOf:
      - $ref: '#/components/schemas/PersesListVariableDefaultSingleValue'
      - $ref: '#/components/schemas/PersesListVariableDefaultSliceValues'
      type: object
    PersesListVariableDefaultSingleValue:
      properties:
        kind:
          enum:
          - singleValue
          type: string
        singleValue:
          type: string
      required:
      - kind
      - singleValue
      type: object
    PersesListVariableDefaultSliceValues:
      properties:
        kind:
          enum:
          - sliceValues
          type: string
        sliceValues:
          items:
            type: string
          type: array
      required:
      - kind
      - sliceValues
      type: object
    PersesVariableSort:
      enum:
      - none
      - alphabetical-asc
      - alphabetical-desc
      - numerical-asc
      - numerical-desc
      - alphabetical-ci-asc
      - alphabetical-ci-desc
      type: string
    NodeTypes_nodeTypes_inner:
      example:
        typeName: typeName
        description: description
      properties:
        typeName:
          type: string
        description:
          type: string
      required:
      - description
      - typeName
      type: object
    StackPackStep_value:
      example:
        _type: _type
      properties:
        _type:
          type: string
      type: object
    MonitorApiError_allOf:
      properties:
        statusCode:
          type: string
        message:
          type: string
      required:
      - message
      - statusCode
      type: object
    MonitorNotFoundError_allOf:
      properties:
        _type:
          enum:
          - MonitorNotFoundError
          type: string
      type: object
    MonitorIdentifierLookup_overrides:
      example:
        timeSeries: 5
        components: 1
      properties:
        components:
          format: int32
          type: integer
        timeSeries:
          format: int32
          type: integer
      required:
      - components
      - timeSeries
      type: object
    SlackNotificationChannel_allOf:
      properties:
        _type:
          enum:
          - SlackNotificationChannel
          type: string
        slackWorkspace:
          type: string
        slackChannel:
          type: string
        slackChannelId:
          type: string
      required:
      - _type
      - slackWorkspace
      type: object
    WebhookNotificationChannel_allOf:
      properties:
        _type:
          enum:
          - WebhookNotificationChannel
          type: string
      required:
      - _type
      type: object
    OpsgenieNotificationChannel_allOf:
      properties:
        _type:
          enum:
          - OpsgenieNotificationChannel
          type: string
      required:
      - _type
      type: object
    TeamsNotificationChannel_allOf:
      properties:
        _type:
          enum:
          - TeamsNotificationChannel
          type: string
      required:
      - _type
      type: object
    EmailNotificationChannel_allOf:
      properties:
        _type:
          enum:
          - EmailNotificationChannel
          type: string
      required:
      - _type
      type: object
    NotificationConfigurationReadSchema_allOf:
      properties:
        id:
          format: int64
          type: integer
        lastUpdateTimestamp:
          format: int64
          type: integer
        runtimeStatus:
          $ref: '#/components/schemas/NotificationConfigurationRuntimeStatusValue'
      required:
      - id
      - lastUpdateTimestamp
      - runtimeStatus
      type: object
    ExecuteScriptSyntaxErrors_errors_inner:
      properties:
        message:
          type: string
        location:
          $ref: '#/components/schemas/ScriptLocation'
      required:
      - location
      - message
      type: object
    PromSample_inner:
      description: Unix timestamp with sample value (as a string)
      oneOf:
      - format: unix_timestamp
        type: number
      - format: sample_value
        type: string
    TraceQueryMatch_allOf:
      properties:
        primaryFilterMatches:
          description: Spans matching the primary filter
          items:
            description: The unique identifier of the span within the trace
            type: string
          type: array
        secondaryFilterMatches:
          description: Spans matching the secondary filter
          items:
            description: The unique identifier of the span within the trace
            type: string
          type: array
      required:
      - primaryFilterMatches
      - secondaryFilterMatches
      type: object
    MetricPerspectiveTab_allOf:
      properties:
        _type:
          enum:
          - MetricPerspectiveTab
          type: string
      required:
      - _type
      type: object
    MetricPerspectiveSection_allOf:
      properties:
        _type:
          enum:
          - MetricPerspectiveSection
          type: string
        tab:
          type: string
      required:
      - _type
      - tab
      type: object
    ComponentHighlightMetricSection_allOf:
      properties:
        _type:
          enum:
          - ComponentHighlightMetricSection
          type: string
      required:
      - _type
      type: object
    TimelineSummaryRequest_arguments:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/ComponentViewArguments'
      - $ref: '#/components/schemas/QueryViewArguments'
      type: object
    DashboardReadMetadataSchema_allOf:
      properties:
        _type:
          enum:
          - DashboardReadMetadataSchema
          type: string
      type: object
    DashboardReadFullSchema_allOf:
      properties:
        _type:
          enum:
          - DashboardReadFullSchema
          type: string
        dashboard:
          $ref: '#/components/schemas/PersesDashboard'
      required:
      - dashboard
      type: object
  securitySchemes:
    ApiToken:
      description: |
        Authenticate with your personal API token in the `X-API-Key` HTTP header.

        To get your API token:
         * Login to the StackState user-interface
         * In the main-menu click on the `CLI` option
         * Your API token is shown to you on this page.
      in: header
      name: X-API-Token
      type: apiKey
    ServiceToken:
      description: |
        For self-hosted installations only. Authenticate with a Kubernetes service token in the `X-API-Key` HTTP header. Also include the `X-API-ServiceBearer` header.
      in: header
      name: X-API-Key
      type: apiKey
    ServiceBearer:
      description: |
        Use in combination with a ServiceToken.
      in: header
      name: X-API-ServiceBearer
      type: apiKey
