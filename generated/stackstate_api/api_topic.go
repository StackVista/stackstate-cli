/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

type TopicApi interface {

	/*
		GetTopic Topic API

		Get topic list

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetTopicRequest
	*/
	GetTopic(ctx context.Context) ApiGetTopicRequest

	// GetTopicExecute executes the request
	//  @return []Topic
	GetTopicExecute(r ApiGetTopicRequest) ([]Topic, *http.Response, error)
}

// TopicApiService TopicApi service
type TopicApiService service

type ApiGetTopicRequest struct {
	ctx        context.Context
	ApiService TopicApi
}

func (r ApiGetTopicRequest) Execute() ([]Topic, *http.Response, error) {
	return r.ApiService.GetTopicExecute(r)
}

/*
GetTopic Topic API

Get topic list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTopicRequest
*/
func (a *TopicApiService) GetTopic(ctx context.Context) ApiGetTopicRequest {
	return ApiGetTopicRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return []Topic
func (a *TopicApiService) GetTopicExecute(r ApiGetTopicRequest) ([]Topic, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Topic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TopicApiService.GetTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/topic"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------

type TopicApiMock struct {
	GetTopicCalls    *[]GetTopicCall
	GetTopicResponse GetTopicMockResponse
}

func NewTopicApiMock() TopicApiMock {
	xGetTopicCalls := make([]GetTopicCall, 0)
	return TopicApiMock{
		GetTopicCalls: &xGetTopicCalls,
	}
}

type GetTopicMockResponse struct {
	Result   []Topic
	Response *http.Response
	Error    error
}

type GetTopicCall struct {
}

func (mock TopicApiMock) GetTopic(ctx context.Context) ApiGetTopicRequest {
	return ApiGetTopicRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock TopicApiMock) GetTopicExecute(r ApiGetTopicRequest) ([]Topic, *http.Response, error) {
	p := GetTopicCall{}
	*mock.GetTopicCalls = append(*mock.GetTopicCalls, p)
	return mock.GetTopicResponse.Result, mock.GetTopicResponse.Response, mock.GetTopicResponse.Error
}
