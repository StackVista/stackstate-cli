/*
StackState API

Testing MonitorAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package stackstate_api

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "gitlab.com/stackvista/stackstate-cli2"
)

func Test_stackstate_api_MonitorAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MonitorAPIService DeleteMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var monitorIdOrUrn string

		httpRes, err := apiClient.MonitorAPI.DeleteMonitor(context.Background(), monitorIdOrUrn).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MonitorAPIService GetAllMonitors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MonitorAPI.GetAllMonitors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MonitorAPIService GetMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var monitorIdOrUrn string

		resp, httpRes, err := apiClient.MonitorAPI.GetMonitor(context.Background(), monitorIdOrUrn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MonitorAPIService GetMonitorWithStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var monitorIdOrUrn string

		resp, httpRes, err := apiClient.MonitorAPI.GetMonitorWithStatus(context.Background(), monitorIdOrUrn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MonitorAPIService GetMonitorsOverview", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MonitorAPI.GetMonitorsOverview(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MonitorAPIService LookupIdentifier", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MonitorAPI.LookupIdentifier(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MonitorAPIService PatchMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var monitorIdOrUrn string

		resp, httpRes, err := apiClient.MonitorAPI.PatchMonitor(context.Background(), monitorIdOrUrn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MonitorAPIService PreviewMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var monitorIdOrUrn string

		resp, httpRes, err := apiClient.MonitorAPI.PreviewMonitor(context.Background(), monitorIdOrUrn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MonitorAPIService PublishHealthStates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var monitorIdOrUrn string

		httpRes, err := apiClient.MonitorAPI.PublishHealthStates(context.Background(), monitorIdOrUrn).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MonitorAPIService RunMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var monitorIdOrUrn string

		resp, httpRes, err := apiClient.MonitorAPI.RunMonitor(context.Background(), monitorIdOrUrn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MonitorAPIService TestMonitorFunction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var monitorFunctionIdOrUrn string

		resp, httpRes, err := apiClient.MonitorAPI.TestMonitorFunction(context.Background(), monitorFunctionIdOrUrn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
