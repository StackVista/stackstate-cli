/*
StackState API

Testing NotificationChannelsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package stackstate_api

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "gitlab.com/stackvista/stackstate-cli2"
)

func Test_stackstate_api_NotificationChannelsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NotificationChannelsAPIService CreateOpsgenieNotificationChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NotificationChannelsAPI.CreateOpsgenieNotificationChannel(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService CreateWebhookNotificationChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NotificationChannelsAPI.CreateWebhookNotificationChannel(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService DeleteOpsgenieNotificationChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		httpRes, err := apiClient.NotificationChannelsAPI.DeleteOpsgenieNotificationChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService DeleteSlackNotificationChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		httpRes, err := apiClient.NotificationChannelsAPI.DeleteSlackNotificationChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService DeleteWebhookNotificationChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		httpRes, err := apiClient.NotificationChannelsAPI.DeleteWebhookNotificationChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService GetOpsgenieNotificationChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		resp, httpRes, err := apiClient.NotificationChannelsAPI.GetOpsgenieNotificationChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService GetSlackNotificationChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		resp, httpRes, err := apiClient.NotificationChannelsAPI.GetSlackNotificationChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService GetWebhookNotificationChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		resp, httpRes, err := apiClient.NotificationChannelsAPI.GetWebhookNotificationChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService JoinSlackChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		resp, httpRes, err := apiClient.NotificationChannelsAPI.JoinSlackChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService ListOpsgenieResponders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NotificationChannelsAPI.ListOpsgenieResponders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService ListSlackChannels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		resp, httpRes, err := apiClient.NotificationChannelsAPI.ListSlackChannels(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService SlackOAuthCallback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.NotificationChannelsAPI.SlackOAuthCallback(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService SlackOauthRedirect", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.NotificationChannelsAPI.SlackOauthRedirect(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService TestOpsgenieChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		httpRes, err := apiClient.NotificationChannelsAPI.TestOpsgenieChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService TestSlackChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		httpRes, err := apiClient.NotificationChannelsAPI.TestSlackChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService TestWebhookChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		httpRes, err := apiClient.NotificationChannelsAPI.TestWebhookChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService UpdateOpsgenieNotificationChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		resp, httpRes, err := apiClient.NotificationChannelsAPI.UpdateOpsgenieNotificationChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationChannelsAPIService UpdateWebhookNotificationChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId int64

		resp, httpRes, err := apiClient.NotificationChannelsAPI.UpdateWebhookNotificationChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
