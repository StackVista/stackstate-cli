/*
StackState API

Testing SubjectAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package stackstate_api

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "gitlab.com/stackvista/stackstate-cli2"
)

func Test_stackstate_api_SubjectAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SubjectAPIService CreateSubject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subject string

		httpRes, err := apiClient.SubjectAPI.CreateSubject(context.Background(), subject).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubjectAPIService DeleteSubject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subject string

		httpRes, err := apiClient.SubjectAPI.DeleteSubject(context.Background(), subject).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubjectAPIService GetSubject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subject string

		resp, httpRes, err := apiClient.SubjectAPI.GetSubject(context.Background(), subject).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubjectAPIService ListSubjects", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SubjectAPI.ListSubjects(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
