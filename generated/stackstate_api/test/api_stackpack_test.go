/*
StackState API

Testing StackpackAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package stackstate_api

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "gitlab.com/stackvista/stackstate-cli2"
)

func Test_stackstate_api_StackpackAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StackpackAPIService ConfirmManualSteps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stackPackName string
		var stackPackInstanceId int64

		resp, httpRes, err := apiClient.StackpackAPI.ConfirmManualSteps(context.Background(), stackPackName, stackPackInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackpackAPIService ProvisionDetails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stackPackName string

		resp, httpRes, err := apiClient.StackpackAPI.ProvisionDetails(context.Background(), stackPackName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackpackAPIService ProvisionUninstall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stackPackName string
		var stackPackInstanceId int64

		resp, httpRes, err := apiClient.StackpackAPI.ProvisionUninstall(context.Background(), stackPackName, stackPackInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackpackAPIService StackPackList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackpackAPI.StackPackList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackpackAPIService StackPackUpload", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackpackAPI.StackPackUpload(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackpackAPIService UpgradeStackPack", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stackPackName string

		resp, httpRes, err := apiClient.StackpackAPI.UpgradeStackPack(context.Background(), stackPackName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
