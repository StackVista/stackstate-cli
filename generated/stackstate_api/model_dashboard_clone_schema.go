/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// DashboardCloneSchema The provided fields are used to override the corresponding fields of the new (cloned) dashboard.
type DashboardCloneSchema struct {
	// Name of the dashboard. Required to make it easier so see which dashboard is the new (cloned) dashboard.
	Name string `json:"name"`
	// Description of the dashboard
	Description *string          `json:"description,omitempty"`
	Scope       *DashboardScope  `json:"scope,omitempty"`
	Dashboard   *PersesDashboard `json:"dashboard,omitempty"`
}

// NewDashboardCloneSchema instantiates a new DashboardCloneSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardCloneSchema(name string) *DashboardCloneSchema {
	this := DashboardCloneSchema{}
	this.Name = name
	return &this
}

// NewDashboardCloneSchemaWithDefaults instantiates a new DashboardCloneSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardCloneSchemaWithDefaults() *DashboardCloneSchema {
	this := DashboardCloneSchema{}
	return &this
}

// GetName returns the Name field value
func (o *DashboardCloneSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DashboardCloneSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DashboardCloneSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DashboardCloneSchema) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardCloneSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DashboardCloneSchema) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DashboardCloneSchema) SetDescription(v string) {
	o.Description = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *DashboardCloneSchema) GetScope() DashboardScope {
	if o == nil || o.Scope == nil {
		var ret DashboardScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardCloneSchema) GetScopeOk() (*DashboardScope, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *DashboardCloneSchema) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given DashboardScope and assigns it to the Scope field.
func (o *DashboardCloneSchema) SetScope(v DashboardScope) {
	o.Scope = &v
}

// GetDashboard returns the Dashboard field value if set, zero value otherwise.
func (o *DashboardCloneSchema) GetDashboard() PersesDashboard {
	if o == nil || o.Dashboard == nil {
		var ret PersesDashboard
		return ret
	}
	return *o.Dashboard
}

// GetDashboardOk returns a tuple with the Dashboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardCloneSchema) GetDashboardOk() (*PersesDashboard, bool) {
	if o == nil || o.Dashboard == nil {
		return nil, false
	}
	return o.Dashboard, true
}

// HasDashboard returns a boolean if a field has been set.
func (o *DashboardCloneSchema) HasDashboard() bool {
	if o != nil && o.Dashboard != nil {
		return true
	}

	return false
}

// SetDashboard gets a reference to the given PersesDashboard and assigns it to the Dashboard field.
func (o *DashboardCloneSchema) SetDashboard(v PersesDashboard) {
	o.Dashboard = &v
}

func (o DashboardCloneSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.Dashboard != nil {
		toSerialize["dashboard"] = o.Dashboard
	}
	return json.Marshal(toSerialize)
}

type NullableDashboardCloneSchema struct {
	value *DashboardCloneSchema
	isSet bool
}

func (v NullableDashboardCloneSchema) Get() *DashboardCloneSchema {
	return v.value
}

func (v *NullableDashboardCloneSchema) Set(val *DashboardCloneSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardCloneSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardCloneSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardCloneSchema(val *DashboardCloneSchema) *NullableDashboardCloneSchema {
	return &NullableDashboardCloneSchema{value: val, isSet: true}
}

func (v NullableDashboardCloneSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardCloneSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
