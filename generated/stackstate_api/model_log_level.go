/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// LogLevel the model 'LogLevel'
type LogLevel string

// List of LogLevel
const (
	LOGLEVEL_ALERT     LogLevel = "ALERT"
	LOGLEVEL_TRACE     LogLevel = "TRACE"
	LOGLEVEL_DEBUG     LogLevel = "DEBUG"
	LOGLEVEL_NOTICE    LogLevel = "NOTICE"
	LOGLEVEL_INFO      LogLevel = "INFO"
	LOGLEVEL_WARN      LogLevel = "WARN"
	LOGLEVEL_WARNING   LogLevel = "WARNING"
	LOGLEVEL_ERR       LogLevel = "ERR"
	LOGLEVEL_ERROR     LogLevel = "ERROR"
	LOGLEVEL_CRIT      LogLevel = "CRIT"
	LOGLEVEL_CRITICAL  LogLevel = "CRITICAL"
	LOGLEVEL_FATAL     LogLevel = "FATAL"
	LOGLEVEL_SEVERE    LogLevel = "SEVERE"
	LOGLEVEL_EMERG     LogLevel = "EMERG"
	LOGLEVEL_EMERGENCY LogLevel = "EMERGENCY"
	LOGLEVEL_UNKNOWN   LogLevel = "UNKNOWN"
)

// All allowed values of LogLevel enum
var AllowedLogLevelEnumValues = []LogLevel{
	"ALERT",
	"TRACE",
	"DEBUG",
	"NOTICE",
	"INFO",
	"WARN",
	"WARNING",
	"ERR",
	"ERROR",
	"CRIT",
	"CRITICAL",
	"FATAL",
	"SEVERE",
	"EMERG",
	"EMERGENCY",
	"UNKNOWN",
}

func (v *LogLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogLevel(value)
	for _, existing := range AllowedLogLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogLevel", value)
}

// NewLogLevelFromValue returns a pointer to a valid LogLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogLevelFromValue(v string) (*LogLevel, error) {
	ev := LogLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogLevel: valid values are %v", v, AllowedLogLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogLevel) IsValid() bool {
	for _, existing := range AllowedLogLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogLevel value
func (v LogLevel) Ptr() *LogLevel {
	return &v
}

type NullableLogLevel struct {
	value *LogLevel
	isSet bool
}

func (v NullableLogLevel) Get() *LogLevel {
	return v.value
}

func (v *NullableLogLevel) Set(val *LogLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableLogLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableLogLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogLevel(val *LogLevel) *NullableLogLevel {
	return &NullableLogLevel{value: val, isSet: true}
}

func (v NullableLogLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
