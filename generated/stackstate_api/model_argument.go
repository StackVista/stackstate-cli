/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// Argument - struct for Argument
type Argument struct {
	ArgumentBooleanVal                   *ArgumentBooleanVal
	ArgumentComparatorWithoutEqualityVal *ArgumentComparatorWithoutEqualityVal
	ArgumentComponentTypeRef             *ArgumentComponentTypeRef
	ArgumentDoubleVal                    *ArgumentDoubleVal
	ArgumentDurationVal                  *ArgumentDurationVal
	ArgumentFailingHealthStateVal        *ArgumentFailingHealthStateVal
	ArgumentLongVal                      *ArgumentLongVal
	ArgumentNodeIdVal                    *ArgumentNodeIdVal
	ArgumentPromQLMetricVal              *ArgumentPromQLMetricVal
	ArgumentQueryViewRef                 *ArgumentQueryViewRef
	ArgumentRelationTypeRef              *ArgumentRelationTypeRef
	ArgumentStateVal                     *ArgumentStateVal
	ArgumentStringVal                    *ArgumentStringVal
	ArgumentStructTypeVal                *ArgumentStructTypeVal
	ArgumentTimeWindowVal                *ArgumentTimeWindowVal
	ArgumentTopologyPromQLMetricVal      *ArgumentTopologyPromQLMetricVal
	ArgumentTopologyQueryVal             *ArgumentTopologyQueryVal
}

// ArgumentBooleanValAsArgument is a convenience function that returns ArgumentBooleanVal wrapped in Argument
func ArgumentBooleanValAsArgument(v *ArgumentBooleanVal) Argument {
	return Argument{
		ArgumentBooleanVal: v,
	}
}

// ArgumentComparatorWithoutEqualityValAsArgument is a convenience function that returns ArgumentComparatorWithoutEqualityVal wrapped in Argument
func ArgumentComparatorWithoutEqualityValAsArgument(v *ArgumentComparatorWithoutEqualityVal) Argument {
	return Argument{
		ArgumentComparatorWithoutEqualityVal: v,
	}
}

// ArgumentComponentTypeRefAsArgument is a convenience function that returns ArgumentComponentTypeRef wrapped in Argument
func ArgumentComponentTypeRefAsArgument(v *ArgumentComponentTypeRef) Argument {
	return Argument{
		ArgumentComponentTypeRef: v,
	}
}

// ArgumentDoubleValAsArgument is a convenience function that returns ArgumentDoubleVal wrapped in Argument
func ArgumentDoubleValAsArgument(v *ArgumentDoubleVal) Argument {
	return Argument{
		ArgumentDoubleVal: v,
	}
}

// ArgumentDurationValAsArgument is a convenience function that returns ArgumentDurationVal wrapped in Argument
func ArgumentDurationValAsArgument(v *ArgumentDurationVal) Argument {
	return Argument{
		ArgumentDurationVal: v,
	}
}

// ArgumentFailingHealthStateValAsArgument is a convenience function that returns ArgumentFailingHealthStateVal wrapped in Argument
func ArgumentFailingHealthStateValAsArgument(v *ArgumentFailingHealthStateVal) Argument {
	return Argument{
		ArgumentFailingHealthStateVal: v,
	}
}

// ArgumentLongValAsArgument is a convenience function that returns ArgumentLongVal wrapped in Argument
func ArgumentLongValAsArgument(v *ArgumentLongVal) Argument {
	return Argument{
		ArgumentLongVal: v,
	}
}

// ArgumentNodeIdValAsArgument is a convenience function that returns ArgumentNodeIdVal wrapped in Argument
func ArgumentNodeIdValAsArgument(v *ArgumentNodeIdVal) Argument {
	return Argument{
		ArgumentNodeIdVal: v,
	}
}

// ArgumentPromQLMetricValAsArgument is a convenience function that returns ArgumentPromQLMetricVal wrapped in Argument
func ArgumentPromQLMetricValAsArgument(v *ArgumentPromQLMetricVal) Argument {
	return Argument{
		ArgumentPromQLMetricVal: v,
	}
}

// ArgumentQueryViewRefAsArgument is a convenience function that returns ArgumentQueryViewRef wrapped in Argument
func ArgumentQueryViewRefAsArgument(v *ArgumentQueryViewRef) Argument {
	return Argument{
		ArgumentQueryViewRef: v,
	}
}

// ArgumentRelationTypeRefAsArgument is a convenience function that returns ArgumentRelationTypeRef wrapped in Argument
func ArgumentRelationTypeRefAsArgument(v *ArgumentRelationTypeRef) Argument {
	return Argument{
		ArgumentRelationTypeRef: v,
	}
}

// ArgumentStateValAsArgument is a convenience function that returns ArgumentStateVal wrapped in Argument
func ArgumentStateValAsArgument(v *ArgumentStateVal) Argument {
	return Argument{
		ArgumentStateVal: v,
	}
}

// ArgumentStringValAsArgument is a convenience function that returns ArgumentStringVal wrapped in Argument
func ArgumentStringValAsArgument(v *ArgumentStringVal) Argument {
	return Argument{
		ArgumentStringVal: v,
	}
}

// ArgumentStructTypeValAsArgument is a convenience function that returns ArgumentStructTypeVal wrapped in Argument
func ArgumentStructTypeValAsArgument(v *ArgumentStructTypeVal) Argument {
	return Argument{
		ArgumentStructTypeVal: v,
	}
}

// ArgumentTimeWindowValAsArgument is a convenience function that returns ArgumentTimeWindowVal wrapped in Argument
func ArgumentTimeWindowValAsArgument(v *ArgumentTimeWindowVal) Argument {
	return Argument{
		ArgumentTimeWindowVal: v,
	}
}

// ArgumentTopologyPromQLMetricValAsArgument is a convenience function that returns ArgumentTopologyPromQLMetricVal wrapped in Argument
func ArgumentTopologyPromQLMetricValAsArgument(v *ArgumentTopologyPromQLMetricVal) Argument {
	return Argument{
		ArgumentTopologyPromQLMetricVal: v,
	}
}

// ArgumentTopologyQueryValAsArgument is a convenience function that returns ArgumentTopologyQueryVal wrapped in Argument
func ArgumentTopologyQueryValAsArgument(v *ArgumentTopologyQueryVal) Argument {
	return Argument{
		ArgumentTopologyQueryVal: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Argument) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'ArgumentBooleanVal'
	if jsonDict["_type"] == "ArgumentBooleanVal" {
		// try to unmarshal JSON data into ArgumentBooleanVal
		err = json.Unmarshal(data, &dst.ArgumentBooleanVal)
		if err == nil {
			return nil // data stored in dst.ArgumentBooleanVal, return on the first match
		} else {
			dst.ArgumentBooleanVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentBooleanVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentComparatorWithoutEqualityVal'
	if jsonDict["_type"] == "ArgumentComparatorWithoutEqualityVal" {
		// try to unmarshal JSON data into ArgumentComparatorWithoutEqualityVal
		err = json.Unmarshal(data, &dst.ArgumentComparatorWithoutEqualityVal)
		if err == nil {
			return nil // data stored in dst.ArgumentComparatorWithoutEqualityVal, return on the first match
		} else {
			dst.ArgumentComparatorWithoutEqualityVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentComparatorWithoutEqualityVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentComponentTypeRef'
	if jsonDict["_type"] == "ArgumentComponentTypeRef" {
		// try to unmarshal JSON data into ArgumentComponentTypeRef
		err = json.Unmarshal(data, &dst.ArgumentComponentTypeRef)
		if err == nil {
			return nil // data stored in dst.ArgumentComponentTypeRef, return on the first match
		} else {
			dst.ArgumentComponentTypeRef = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentComponentTypeRef: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentDoubleVal'
	if jsonDict["_type"] == "ArgumentDoubleVal" {
		// try to unmarshal JSON data into ArgumentDoubleVal
		err = json.Unmarshal(data, &dst.ArgumentDoubleVal)
		if err == nil {
			return nil // data stored in dst.ArgumentDoubleVal, return on the first match
		} else {
			dst.ArgumentDoubleVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentDoubleVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentDurationVal'
	if jsonDict["_type"] == "ArgumentDurationVal" {
		// try to unmarshal JSON data into ArgumentDurationVal
		err = json.Unmarshal(data, &dst.ArgumentDurationVal)
		if err == nil {
			return nil // data stored in dst.ArgumentDurationVal, return on the first match
		} else {
			dst.ArgumentDurationVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentDurationVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentFailingHealthStateVal'
	if jsonDict["_type"] == "ArgumentFailingHealthStateVal" {
		// try to unmarshal JSON data into ArgumentFailingHealthStateVal
		err = json.Unmarshal(data, &dst.ArgumentFailingHealthStateVal)
		if err == nil {
			return nil // data stored in dst.ArgumentFailingHealthStateVal, return on the first match
		} else {
			dst.ArgumentFailingHealthStateVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentFailingHealthStateVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentLongVal'
	if jsonDict["_type"] == "ArgumentLongVal" {
		// try to unmarshal JSON data into ArgumentLongVal
		err = json.Unmarshal(data, &dst.ArgumentLongVal)
		if err == nil {
			return nil // data stored in dst.ArgumentLongVal, return on the first match
		} else {
			dst.ArgumentLongVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentLongVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentNodeIdVal'
	if jsonDict["_type"] == "ArgumentNodeIdVal" {
		// try to unmarshal JSON data into ArgumentNodeIdVal
		err = json.Unmarshal(data, &dst.ArgumentNodeIdVal)
		if err == nil {
			return nil // data stored in dst.ArgumentNodeIdVal, return on the first match
		} else {
			dst.ArgumentNodeIdVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentNodeIdVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentPromQLMetricVal'
	if jsonDict["_type"] == "ArgumentPromQLMetricVal" {
		// try to unmarshal JSON data into ArgumentPromQLMetricVal
		err = json.Unmarshal(data, &dst.ArgumentPromQLMetricVal)
		if err == nil {
			return nil // data stored in dst.ArgumentPromQLMetricVal, return on the first match
		} else {
			dst.ArgumentPromQLMetricVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentPromQLMetricVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentQueryViewRef'
	if jsonDict["_type"] == "ArgumentQueryViewRef" {
		// try to unmarshal JSON data into ArgumentQueryViewRef
		err = json.Unmarshal(data, &dst.ArgumentQueryViewRef)
		if err == nil {
			return nil // data stored in dst.ArgumentQueryViewRef, return on the first match
		} else {
			dst.ArgumentQueryViewRef = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentQueryViewRef: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentRelationTypeRef'
	if jsonDict["_type"] == "ArgumentRelationTypeRef" {
		// try to unmarshal JSON data into ArgumentRelationTypeRef
		err = json.Unmarshal(data, &dst.ArgumentRelationTypeRef)
		if err == nil {
			return nil // data stored in dst.ArgumentRelationTypeRef, return on the first match
		} else {
			dst.ArgumentRelationTypeRef = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentRelationTypeRef: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentStateVal'
	if jsonDict["_type"] == "ArgumentStateVal" {
		// try to unmarshal JSON data into ArgumentStateVal
		err = json.Unmarshal(data, &dst.ArgumentStateVal)
		if err == nil {
			return nil // data stored in dst.ArgumentStateVal, return on the first match
		} else {
			dst.ArgumentStateVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentStateVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentStringVal'
	if jsonDict["_type"] == "ArgumentStringVal" {
		// try to unmarshal JSON data into ArgumentStringVal
		err = json.Unmarshal(data, &dst.ArgumentStringVal)
		if err == nil {
			return nil // data stored in dst.ArgumentStringVal, return on the first match
		} else {
			dst.ArgumentStringVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentStringVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentStructTypeVal'
	if jsonDict["_type"] == "ArgumentStructTypeVal" {
		// try to unmarshal JSON data into ArgumentStructTypeVal
		err = json.Unmarshal(data, &dst.ArgumentStructTypeVal)
		if err == nil {
			return nil // data stored in dst.ArgumentStructTypeVal, return on the first match
		} else {
			dst.ArgumentStructTypeVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentStructTypeVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentTimeWindowVal'
	if jsonDict["_type"] == "ArgumentTimeWindowVal" {
		// try to unmarshal JSON data into ArgumentTimeWindowVal
		err = json.Unmarshal(data, &dst.ArgumentTimeWindowVal)
		if err == nil {
			return nil // data stored in dst.ArgumentTimeWindowVal, return on the first match
		} else {
			dst.ArgumentTimeWindowVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentTimeWindowVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentTopologyPromQLMetricVal'
	if jsonDict["_type"] == "ArgumentTopologyPromQLMetricVal" {
		// try to unmarshal JSON data into ArgumentTopologyPromQLMetricVal
		err = json.Unmarshal(data, &dst.ArgumentTopologyPromQLMetricVal)
		if err == nil {
			return nil // data stored in dst.ArgumentTopologyPromQLMetricVal, return on the first match
		} else {
			dst.ArgumentTopologyPromQLMetricVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentTopologyPromQLMetricVal: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ArgumentTopologyQueryVal'
	if jsonDict["_type"] == "ArgumentTopologyQueryVal" {
		// try to unmarshal JSON data into ArgumentTopologyQueryVal
		err = json.Unmarshal(data, &dst.ArgumentTopologyQueryVal)
		if err == nil {
			return nil // data stored in dst.ArgumentTopologyQueryVal, return on the first match
		} else {
			dst.ArgumentTopologyQueryVal = nil
			return fmt.Errorf("Failed to unmarshal Argument as ArgumentTopologyQueryVal: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Argument) MarshalJSON() ([]byte, error) {
	if src.ArgumentBooleanVal != nil {
		return json.Marshal(&src.ArgumentBooleanVal)
	}

	if src.ArgumentComparatorWithoutEqualityVal != nil {
		return json.Marshal(&src.ArgumentComparatorWithoutEqualityVal)
	}

	if src.ArgumentComponentTypeRef != nil {
		return json.Marshal(&src.ArgumentComponentTypeRef)
	}

	if src.ArgumentDoubleVal != nil {
		return json.Marshal(&src.ArgumentDoubleVal)
	}

	if src.ArgumentDurationVal != nil {
		return json.Marshal(&src.ArgumentDurationVal)
	}

	if src.ArgumentFailingHealthStateVal != nil {
		return json.Marshal(&src.ArgumentFailingHealthStateVal)
	}

	if src.ArgumentLongVal != nil {
		return json.Marshal(&src.ArgumentLongVal)
	}

	if src.ArgumentNodeIdVal != nil {
		return json.Marshal(&src.ArgumentNodeIdVal)
	}

	if src.ArgumentPromQLMetricVal != nil {
		return json.Marshal(&src.ArgumentPromQLMetricVal)
	}

	if src.ArgumentQueryViewRef != nil {
		return json.Marshal(&src.ArgumentQueryViewRef)
	}

	if src.ArgumentRelationTypeRef != nil {
		return json.Marshal(&src.ArgumentRelationTypeRef)
	}

	if src.ArgumentStateVal != nil {
		return json.Marshal(&src.ArgumentStateVal)
	}

	if src.ArgumentStringVal != nil {
		return json.Marshal(&src.ArgumentStringVal)
	}

	if src.ArgumentStructTypeVal != nil {
		return json.Marshal(&src.ArgumentStructTypeVal)
	}

	if src.ArgumentTimeWindowVal != nil {
		return json.Marshal(&src.ArgumentTimeWindowVal)
	}

	if src.ArgumentTopologyPromQLMetricVal != nil {
		return json.Marshal(&src.ArgumentTopologyPromQLMetricVal)
	}

	if src.ArgumentTopologyQueryVal != nil {
		return json.Marshal(&src.ArgumentTopologyQueryVal)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Argument) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ArgumentBooleanVal != nil {
		return obj.ArgumentBooleanVal
	}

	if obj.ArgumentComparatorWithoutEqualityVal != nil {
		return obj.ArgumentComparatorWithoutEqualityVal
	}

	if obj.ArgumentComponentTypeRef != nil {
		return obj.ArgumentComponentTypeRef
	}

	if obj.ArgumentDoubleVal != nil {
		return obj.ArgumentDoubleVal
	}

	if obj.ArgumentDurationVal != nil {
		return obj.ArgumentDurationVal
	}

	if obj.ArgumentFailingHealthStateVal != nil {
		return obj.ArgumentFailingHealthStateVal
	}

	if obj.ArgumentLongVal != nil {
		return obj.ArgumentLongVal
	}

	if obj.ArgumentNodeIdVal != nil {
		return obj.ArgumentNodeIdVal
	}

	if obj.ArgumentPromQLMetricVal != nil {
		return obj.ArgumentPromQLMetricVal
	}

	if obj.ArgumentQueryViewRef != nil {
		return obj.ArgumentQueryViewRef
	}

	if obj.ArgumentRelationTypeRef != nil {
		return obj.ArgumentRelationTypeRef
	}

	if obj.ArgumentStateVal != nil {
		return obj.ArgumentStateVal
	}

	if obj.ArgumentStringVal != nil {
		return obj.ArgumentStringVal
	}

	if obj.ArgumentStructTypeVal != nil {
		return obj.ArgumentStructTypeVal
	}

	if obj.ArgumentTimeWindowVal != nil {
		return obj.ArgumentTimeWindowVal
	}

	if obj.ArgumentTopologyPromQLMetricVal != nil {
		return obj.ArgumentTopologyPromQLMetricVal
	}

	if obj.ArgumentTopologyQueryVal != nil {
		return obj.ArgumentTopologyQueryVal
	}

	// all schemas are nil
	return nil
}

type NullableArgument struct {
	value *Argument
	isSet bool
}

func (v NullableArgument) Get() *Argument {
	return v.value
}

func (v *NullableArgument) Set(val *Argument) {
	v.value = val
	v.isSet = true
}

func (v NullableArgument) IsSet() bool {
	return v.isSet
}

func (v *NullableArgument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArgument(val *Argument) *NullableArgument {
	return &NullableArgument{value: val, isSet: true}
}

func (v NullableArgument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArgument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
