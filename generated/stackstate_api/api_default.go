/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type DefaultApi interface {

	/*
	ComponentsComponentIdStreamsLatestGet Get the latests metrics

	Gets a top 3 metrics for a datapoint, always takes the last 15 minutes before provided timepoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param componentId The Identifier of a component
	@return ApiComponentsComponentIdStreamsLatestGetRequest
	*/
	ComponentsComponentIdStreamsLatestGet(ctx context.Context, componentId int64) ApiComponentsComponentIdStreamsLatestGetRequest

	// ComponentsComponentIdStreamsLatestGetExecute executes the request
	//  @return InlineResponse200
	ComponentsComponentIdStreamsLatestGetExecute(r ApiComponentsComponentIdStreamsLatestGetRequest) (*InlineResponse200, *http.Response, error)
}

// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiComponentsComponentIdStreamsLatestGetRequest struct {
	ctx context.Context
	ApiService DefaultApi
	componentId int64
	queryTime *int32
	streamIds *[]int64
}

// A Data point for a query either point from timeline or &#39;now&#39; if livemode
func (r ApiComponentsComponentIdStreamsLatestGetRequest) QueryTime(queryTime int32) ApiComponentsComponentIdStreamsLatestGetRequest {
	r.queryTime = &queryTime
	return r
}

// Ids of streams to query for
func (r ApiComponentsComponentIdStreamsLatestGetRequest) StreamIds(streamIds []int64) ApiComponentsComponentIdStreamsLatestGetRequest {
	r.streamIds = &streamIds
	return r
}

func (r ApiComponentsComponentIdStreamsLatestGetRequest) Execute() (*InlineResponse200, *http.Response, error) {
	return r.ApiService.ComponentsComponentIdStreamsLatestGetExecute(r)
}

/*
ComponentsComponentIdStreamsLatestGet Get the latests metrics

Gets a top 3 metrics for a datapoint, always takes the last 15 minutes before provided timepoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param componentId The Identifier of a component
 @return ApiComponentsComponentIdStreamsLatestGetRequest
*/
func (a *DefaultApiService) ComponentsComponentIdStreamsLatestGet(ctx context.Context, componentId int64) ApiComponentsComponentIdStreamsLatestGetRequest {
	return ApiComponentsComponentIdStreamsLatestGetRequest{
		ApiService: a,
		ctx: ctx,
		componentId: componentId,
	}
}

// Execute executes the request
//  @return InlineResponse200
func (a *DefaultApiService) ComponentsComponentIdStreamsLatestGetExecute(r ApiComponentsComponentIdStreamsLatestGetRequest) (*InlineResponse200, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ComponentsComponentIdStreamsLatestGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/components/{componentId}/streams/latest"
	localVarPath = strings.Replace(localVarPath, "{"+"componentId"+"}", url.PathEscape(parameterToString(r.componentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.queryTime == nil {
		return localVarReturnValue, nil, reportError("queryTime is required and must be specified")
	}
	if r.streamIds == nil {
		return localVarReturnValue, nil, reportError("streamIds is required and must be specified")
	}

	localVarQueryParams.Add("queryTime", parameterToString(*r.queryTime, ""))
	localVarQueryParams.Add("streamIds", parameterToString(*r.streamIds, "csv"))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------


type DefaultApiMock struct {
	ComponentsComponentIdStreamsLatestGetCalls *[]ComponentsComponentIdStreamsLatestGetCall
	ComponentsComponentIdStreamsLatestGetResponse ComponentsComponentIdStreamsLatestGetMockResponse
}	

func NewDefaultApiMock() DefaultApiMock {
	xComponentsComponentIdStreamsLatestGetCalls := make([]ComponentsComponentIdStreamsLatestGetCall, 0)
	return DefaultApiMock {
		ComponentsComponentIdStreamsLatestGetCalls: &xComponentsComponentIdStreamsLatestGetCalls,
	}
}

type ComponentsComponentIdStreamsLatestGetMockResponse struct {
	Result InlineResponse200
	Response *http.Response
	Error error
}

type ComponentsComponentIdStreamsLatestGetCall struct {
	PcomponentId int64
	PqueryTime *int32
	PstreamIds *[]int64
}


func (mock DefaultApiMock) ComponentsComponentIdStreamsLatestGet(ctx context.Context, componentId int64) ApiComponentsComponentIdStreamsLatestGetRequest {
	return ApiComponentsComponentIdStreamsLatestGetRequest{
		ApiService: mock,
		ctx: ctx,
		componentId: componentId,
	}
}

func (mock DefaultApiMock) ComponentsComponentIdStreamsLatestGetExecute(r ApiComponentsComponentIdStreamsLatestGetRequest) (*InlineResponse200, *http.Response, error) {
	p := ComponentsComponentIdStreamsLatestGetCall {
			PcomponentId: r.componentId,
			PqueryTime: r.queryTime,
			PstreamIds: r.streamIds,
	}
	*mock.ComponentsComponentIdStreamsLatestGetCalls = append(*mock.ComponentsComponentIdStreamsLatestGetCalls, p)
	return &mock.ComponentsComponentIdStreamsLatestGetResponse.Result, mock.ComponentsComponentIdStreamsLatestGetResponse.Response, mock.ComponentsComponentIdStreamsLatestGetResponse.Error
}


