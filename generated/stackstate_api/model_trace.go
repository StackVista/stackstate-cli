/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// Trace struct for Trace
type Trace struct {
	// The id of the trace
	TraceId string `json:"traceId"`
	// All spans for the trace
	Spans []Span `json:"spans"`
	// Map of resource identifiers to their corresponding resource attributes (key/value pairs). Keys are UUIDs used in the spansâ€™ `resourceId` fields.
	Resources map[string]map[string]string `json:"resources"`
}

// NewTrace instantiates a new Trace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrace(traceId string, spans []Span, resources map[string]map[string]string) *Trace {
	this := Trace{}
	this.TraceId = traceId
	this.Spans = spans
	this.Resources = resources
	return &this
}

// NewTraceWithDefaults instantiates a new Trace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceWithDefaults() *Trace {
	this := Trace{}
	return &this
}

// GetTraceId returns the TraceId field value
func (o *Trace) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *Trace) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *Trace) SetTraceId(v string) {
	o.TraceId = v
}

// GetSpans returns the Spans field value
func (o *Trace) GetSpans() []Span {
	if o == nil {
		var ret []Span
		return ret
	}

	return o.Spans
}

// GetSpansOk returns a tuple with the Spans field value
// and a boolean to check if the value has been set.
func (o *Trace) GetSpansOk() ([]Span, bool) {
	if o == nil {
		return nil, false
	}
	return o.Spans, true
}

// SetSpans sets field value
func (o *Trace) SetSpans(v []Span) {
	o.Spans = v
}

// GetResources returns the Resources field value
func (o *Trace) GetResources() map[string]map[string]string {
	if o == nil {
		var ret map[string]map[string]string
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *Trace) GetResourcesOk() (*map[string]map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resources, true
}

// SetResources sets field value
func (o *Trace) SetResources(v map[string]map[string]string) {
	o.Resources = v
}

func (o Trace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["traceId"] = o.TraceId
	}
	if true {
		toSerialize["spans"] = o.Spans
	}
	if true {
		toSerialize["resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableTrace struct {
	value *Trace
	isSet bool
}

func (v NullableTrace) Get() *Trace {
	return v.value
}

func (v *NullableTrace) Set(val *Trace) {
	v.value = val
	v.isSet = true
}

func (v NullableTrace) IsSet() bool {
	return v.isSet
}

func (v *NullableTrace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrace(val *Trace) *NullableTrace {
	return &NullableTrace{value: val, isSet: true}
}

func (v NullableTrace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
