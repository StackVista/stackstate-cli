/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// MonitorPreviewComponentCount struct for MonitorPreviewComponentCount
type MonitorPreviewComponentCount struct {
	// The number of unique identifiers for the total health state count. Only available when there non-empty identifiers.
	UniqueIdentifiers int32 `json:"uniqueIdentifiers"`
	// The number of components for the identifiers: matchingComponents <= uniqueIdentifiers. Only available when there non-empty identifiers.
	MatchingComponents int32 `json:"matchingComponents"`
}

// NewMonitorPreviewComponentCount instantiates a new MonitorPreviewComponentCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorPreviewComponentCount(uniqueIdentifiers int32, matchingComponents int32) *MonitorPreviewComponentCount {
	this := MonitorPreviewComponentCount{}
	this.UniqueIdentifiers = uniqueIdentifiers
	this.MatchingComponents = matchingComponents
	return &this
}

// NewMonitorPreviewComponentCountWithDefaults instantiates a new MonitorPreviewComponentCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorPreviewComponentCountWithDefaults() *MonitorPreviewComponentCount {
	this := MonitorPreviewComponentCount{}
	return &this
}

// GetUniqueIdentifiers returns the UniqueIdentifiers field value
func (o *MonitorPreviewComponentCount) GetUniqueIdentifiers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UniqueIdentifiers
}

// GetUniqueIdentifiersOk returns a tuple with the UniqueIdentifiers field value
// and a boolean to check if the value has been set.
func (o *MonitorPreviewComponentCount) GetUniqueIdentifiersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UniqueIdentifiers, true
}

// SetUniqueIdentifiers sets field value
func (o *MonitorPreviewComponentCount) SetUniqueIdentifiers(v int32) {
	o.UniqueIdentifiers = v
}

// GetMatchingComponents returns the MatchingComponents field value
func (o *MonitorPreviewComponentCount) GetMatchingComponents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MatchingComponents
}

// GetMatchingComponentsOk returns a tuple with the MatchingComponents field value
// and a boolean to check if the value has been set.
func (o *MonitorPreviewComponentCount) GetMatchingComponentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchingComponents, true
}

// SetMatchingComponents sets field value
func (o *MonitorPreviewComponentCount) SetMatchingComponents(v int32) {
	o.MatchingComponents = v
}

func (o MonitorPreviewComponentCount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uniqueIdentifiers"] = o.UniqueIdentifiers
	}
	if true {
		toSerialize["matchingComponents"] = o.MatchingComponents
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorPreviewComponentCount struct {
	value *MonitorPreviewComponentCount
	isSet bool
}

func (v NullableMonitorPreviewComponentCount) Get() *MonitorPreviewComponentCount {
	return v.value
}

func (v *NullableMonitorPreviewComponentCount) Set(val *MonitorPreviewComponentCount) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorPreviewComponentCount) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorPreviewComponentCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorPreviewComponentCount(val *MonitorPreviewComponentCount) *NullableMonitorPreviewComponentCount {
	return &NullableMonitorPreviewComponentCount{value: val, isSet: true}
}

func (v NullableMonitorPreviewComponentCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorPreviewComponentCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
