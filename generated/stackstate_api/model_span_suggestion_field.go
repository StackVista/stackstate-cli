/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// SpanSuggestionField the model 'SpanSuggestionField'
type SpanSuggestionField string

// List of SpanSuggestionField
const (
	SPANSUGGESTIONFIELD_SERVICE_NAME  SpanSuggestionField = "ServiceName"
	SPANSUGGESTIONFIELD_SPAN_NAME     SpanSuggestionField = "SpanName"
	SPANSUGGESTIONFIELD_SCOPE_NAME    SpanSuggestionField = "ScopeName"
	SPANSUGGESTIONFIELD_SCOPE_VERSION SpanSuggestionField = "ScopeVersion"
)

// All allowed values of SpanSuggestionField enum
var AllowedSpanSuggestionFieldEnumValues = []SpanSuggestionField{
	"ServiceName",
	"SpanName",
	"ScopeName",
	"ScopeVersion",
}

func (v *SpanSuggestionField) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpanSuggestionField(value)
	for _, existing := range AllowedSpanSuggestionFieldEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpanSuggestionField", value)
}

// NewSpanSuggestionFieldFromValue returns a pointer to a valid SpanSuggestionField
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpanSuggestionFieldFromValue(v string) (*SpanSuggestionField, error) {
	ev := SpanSuggestionField(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpanSuggestionField: valid values are %v", v, AllowedSpanSuggestionFieldEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpanSuggestionField) IsValid() bool {
	for _, existing := range AllowedSpanSuggestionFieldEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpanSuggestionField value
func (v SpanSuggestionField) Ptr() *SpanSuggestionField {
	return &v
}

type NullableSpanSuggestionField struct {
	value *SpanSuggestionField
	isSet bool
}

func (v NullableSpanSuggestionField) Get() *SpanSuggestionField {
	return v.value
}

func (v *NullableSpanSuggestionField) Set(val *SpanSuggestionField) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanSuggestionField) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanSuggestionField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanSuggestionField(val *SpanSuggestionField) *NullableSpanSuggestionField {
	return &NullableSpanSuggestionField{value: val, isSet: true}
}

func (v NullableSpanSuggestionField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanSuggestionField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
