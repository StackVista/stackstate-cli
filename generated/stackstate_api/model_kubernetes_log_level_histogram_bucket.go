/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// KubernetesLogLevelHistogramBucket struct for KubernetesLogLevelHistogramBucket
type KubernetesLogLevelHistogramBucket struct {
	// Total logs record count for a particular log level in the bucket.
	Count int64    `json:"count"`
	Level LogLevel `json:"level"`
}

// NewKubernetesLogLevelHistogramBucket instantiates a new KubernetesLogLevelHistogramBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesLogLevelHistogramBucket(count int64, level LogLevel) *KubernetesLogLevelHistogramBucket {
	this := KubernetesLogLevelHistogramBucket{}
	this.Count = count
	this.Level = level
	return &this
}

// NewKubernetesLogLevelHistogramBucketWithDefaults instantiates a new KubernetesLogLevelHistogramBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesLogLevelHistogramBucketWithDefaults() *KubernetesLogLevelHistogramBucket {
	this := KubernetesLogLevelHistogramBucket{}
	var level LogLevel = LOGLEVEL_UNKNOWN
	this.Level = level
	return &this
}

// GetCount returns the Count field value
func (o *KubernetesLogLevelHistogramBucket) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *KubernetesLogLevelHistogramBucket) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *KubernetesLogLevelHistogramBucket) SetCount(v int64) {
	o.Count = v
}

// GetLevel returns the Level field value
func (o *KubernetesLogLevelHistogramBucket) GetLevel() LogLevel {
	if o == nil {
		var ret LogLevel
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *KubernetesLogLevelHistogramBucket) GetLevelOk() (*LogLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *KubernetesLogLevelHistogramBucket) SetLevel(v LogLevel) {
	o.Level = v
}

func (o KubernetesLogLevelHistogramBucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["level"] = o.Level
	}
	return json.Marshal(toSerialize)
}

type NullableKubernetesLogLevelHistogramBucket struct {
	value *KubernetesLogLevelHistogramBucket
	isSet bool
}

func (v NullableKubernetesLogLevelHistogramBucket) Get() *KubernetesLogLevelHistogramBucket {
	return v.value
}

func (v *NullableKubernetesLogLevelHistogramBucket) Set(val *KubernetesLogLevelHistogramBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesLogLevelHistogramBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesLogLevelHistogramBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesLogLevelHistogramBucket(val *KubernetesLogLevelHistogramBucket) *NullableKubernetesLogLevelHistogramBucket {
	return &NullableKubernetesLogLevelHistogramBucket{value: val, isSet: true}
}

func (v NullableKubernetesLogLevelHistogramBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesLogLevelHistogramBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
