/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// SubjectSource the model 'SubjectSource'
type SubjectSource string

// List of SubjectSource
const (
	SUBJECTSOURCE_STATIC        SubjectSource = "Static"
	SUBJECTSOURCE_OBSERVABILITY SubjectSource = "Observability"
	SUBJECTSOURCE_KUBERNETES    SubjectSource = "Kubernetes"
)

// All allowed values of SubjectSource enum
var AllowedSubjectSourceEnumValues = []SubjectSource{
	"Static",
	"Observability",
	"Kubernetes",
}

func (v *SubjectSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubjectSource(value)
	for _, existing := range AllowedSubjectSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubjectSource", value)
}

// NewSubjectSourceFromValue returns a pointer to a valid SubjectSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubjectSourceFromValue(v string) (*SubjectSource, error) {
	ev := SubjectSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubjectSource: valid values are %v", v, AllowedSubjectSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubjectSource) IsValid() bool {
	for _, existing := range AllowedSubjectSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubjectSource value
func (v SubjectSource) Ptr() *SubjectSource {
	return &v
}

type NullableSubjectSource struct {
	value *SubjectSource
	isSet bool
}

func (v NullableSubjectSource) Get() *SubjectSource {
	return v.value
}

func (v *NullableSubjectSource) Set(val *SubjectSource) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectSource(val *SubjectSource) *NullableSubjectSource {
	return &NullableSubjectSource{value: val, isSet: true}
}

func (v NullableSubjectSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
