/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// SpanLink A pointer from the current span to another span in the same trace or in a different trace.  For example, this can be used in batching operations, where a single batch handler processes  multiple requests from different traces or when the handler receives a request from a different project.
type SpanLink struct {
	TraceId    string  `json:"traceId"`
	SpanId     string  `json:"spanId"`
	TraceState *string `json:"traceState,omitempty"`
	// Set of key/value pairs providing extra contextual information. Keys are unique.
	Attributes map[string]string `json:"attributes"`
}

// NewSpanLink instantiates a new SpanLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanLink(traceId string, spanId string, attributes map[string]string) *SpanLink {
	this := SpanLink{}
	this.TraceId = traceId
	this.SpanId = spanId
	this.Attributes = attributes
	return &this
}

// NewSpanLinkWithDefaults instantiates a new SpanLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanLinkWithDefaults() *SpanLink {
	this := SpanLink{}
	return &this
}

// GetTraceId returns the TraceId field value
func (o *SpanLink) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *SpanLink) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *SpanLink) SetTraceId(v string) {
	o.TraceId = v
}

// GetSpanId returns the SpanId field value
func (o *SpanLink) GetSpanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value
// and a boolean to check if the value has been set.
func (o *SpanLink) GetSpanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpanId, true
}

// SetSpanId sets field value
func (o *SpanLink) SetSpanId(v string) {
	o.SpanId = v
}

// GetTraceState returns the TraceState field value if set, zero value otherwise.
func (o *SpanLink) GetTraceState() string {
	if o == nil || o.TraceState == nil {
		var ret string
		return ret
	}
	return *o.TraceState
}

// GetTraceStateOk returns a tuple with the TraceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanLink) GetTraceStateOk() (*string, bool) {
	if o == nil || o.TraceState == nil {
		return nil, false
	}
	return o.TraceState, true
}

// HasTraceState returns a boolean if a field has been set.
func (o *SpanLink) HasTraceState() bool {
	if o != nil && o.TraceState != nil {
		return true
	}

	return false
}

// SetTraceState gets a reference to the given string and assigns it to the TraceState field.
func (o *SpanLink) SetTraceState(v string) {
	o.TraceState = &v
}

// GetAttributes returns the Attributes field value
func (o *SpanLink) GetAttributes() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *SpanLink) GetAttributesOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *SpanLink) SetAttributes(v map[string]string) {
	o.Attributes = v
}

func (o SpanLink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["traceId"] = o.TraceId
	}
	if true {
		toSerialize["spanId"] = o.SpanId
	}
	if o.TraceState != nil {
		toSerialize["traceState"] = o.TraceState
	}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableSpanLink struct {
	value *SpanLink
	isSet bool
}

func (v NullableSpanLink) Get() *SpanLink {
	return v.value
}

func (v *NullableSpanLink) Set(val *SpanLink) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanLink) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanLink(val *SpanLink) *NullableSpanLink {
	return &NullableSpanLink{value: val, isSet: true}
}

func (v NullableSpanLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
