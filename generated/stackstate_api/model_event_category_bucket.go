/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// EventCategoryBucket struct for EventCategoryBucket
type EventCategoryBucket struct {
	// Total events count for a particular category in the bucket.
	Count    int64         `json:"count"`
	Category EventCategory `json:"category"`
}

// NewEventCategoryBucket instantiates a new EventCategoryBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventCategoryBucket(count int64, category EventCategory) *EventCategoryBucket {
	this := EventCategoryBucket{}
	this.Count = count
	this.Category = category
	return &this
}

// NewEventCategoryBucketWithDefaults instantiates a new EventCategoryBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventCategoryBucketWithDefaults() *EventCategoryBucket {
	this := EventCategoryBucket{}
	return &this
}

// GetCount returns the Count field value
func (o *EventCategoryBucket) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *EventCategoryBucket) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *EventCategoryBucket) SetCount(v int64) {
	o.Count = v
}

// GetCategory returns the Category field value
func (o *EventCategoryBucket) GetCategory() EventCategory {
	if o == nil {
		var ret EventCategory
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *EventCategoryBucket) GetCategoryOk() (*EventCategory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *EventCategoryBucket) SetCategory(v EventCategory) {
	o.Category = v
}

func (o EventCategoryBucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["category"] = o.Category
	}
	return json.Marshal(toSerialize)
}

type NullableEventCategoryBucket struct {
	value *EventCategoryBucket
	isSet bool
}

func (v NullableEventCategoryBucket) Get() *EventCategoryBucket {
	return v.value
}

func (v *NullableEventCategoryBucket) Set(val *EventCategoryBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableEventCategoryBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableEventCategoryBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventCategoryBucket(val *EventCategoryBucket) *NullableEventCategoryBucket {
	return &NullableEventCategoryBucket{value: val, isSet: true}
}

func (v NullableEventCategoryBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventCategoryBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
