/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// SpanKind the model 'SpanKind'
type SpanKind string

// List of SpanKind
const (
	SPANKIND_UNSPECIFIED SpanKind = "Unspecified"
	SPANKIND_CLIENT      SpanKind = "Client"
	SPANKIND_SERVER      SpanKind = "Server"
	SPANKIND_INTERNAL    SpanKind = "Internal"
	SPANKIND_CONSUMER    SpanKind = "Consumer"
	SPANKIND_PRODUCER    SpanKind = "Producer"
)

// All allowed values of SpanKind enum
var AllowedSpanKindEnumValues = []SpanKind{
	"Unspecified",
	"Client",
	"Server",
	"Internal",
	"Consumer",
	"Producer",
}

func (v *SpanKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpanKind(value)
	for _, existing := range AllowedSpanKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpanKind", value)
}

// NewSpanKindFromValue returns a pointer to a valid SpanKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpanKindFromValue(v string) (*SpanKind, error) {
	ev := SpanKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpanKind: valid values are %v", v, AllowedSpanKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpanKind) IsValid() bool {
	for _, existing := range AllowedSpanKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpanKind value
func (v SpanKind) Ptr() *SpanKind {
	return &v
}

type NullableSpanKind struct {
	value *SpanKind
	isSet bool
}

func (v NullableSpanKind) Get() *SpanKind {
	return v.value
}

func (v *NullableSpanKind) Set(val *SpanKind) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanKind) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanKind(val *SpanKind) *NullableSpanKind {
	return &NullableSpanKind{value: val, isSet: true}
}

func (v NullableSpanKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
