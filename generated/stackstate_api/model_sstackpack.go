/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// Sstackpack struct for Sstackpack
type Sstackpack struct {
	Name *string `json:"name,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Version *string `json:"version,omitempty"`
	Configurations []SstackpackConfigurationsInner `json:"configurations,omitempty"`
	LatestVersion *SstackpackLatestVersion `json:"latestVersion,omitempty"`
	NextVersion *SstackpackLatestVersion `json:"nextVersion,omitempty"`
	Steps []StackPackStep `json:"steps,omitempty"`
}

// NewSstackpack instantiates a new Sstackpack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSstackpack() *Sstackpack {
	this := Sstackpack{}
	return &this
}

// NewSstackpackWithDefaults instantiates a new Sstackpack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSstackpackWithDefaults() *Sstackpack {
	this := Sstackpack{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Sstackpack) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sstackpack) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Sstackpack) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Sstackpack) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Sstackpack) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sstackpack) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Sstackpack) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Sstackpack) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Sstackpack) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sstackpack) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Sstackpack) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Sstackpack) SetVersion(v string) {
	o.Version = &v
}

// GetConfigurations returns the Configurations field value if set, zero value otherwise.
func (o *Sstackpack) GetConfigurations() []SstackpackConfigurationsInner {
	if o == nil || o.Configurations == nil {
		var ret []SstackpackConfigurationsInner
		return ret
	}
	return o.Configurations
}

// GetConfigurationsOk returns a tuple with the Configurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sstackpack) GetConfigurationsOk() ([]SstackpackConfigurationsInner, bool) {
	if o == nil || o.Configurations == nil {
		return nil, false
	}
	return o.Configurations, true
}

// HasConfigurations returns a boolean if a field has been set.
func (o *Sstackpack) HasConfigurations() bool {
	if o != nil && o.Configurations != nil {
		return true
	}

	return false
}

// SetConfigurations gets a reference to the given []SstackpackConfigurationsInner and assigns it to the Configurations field.
func (o *Sstackpack) SetConfigurations(v []SstackpackConfigurationsInner) {
	o.Configurations = v
}

// GetLatestVersion returns the LatestVersion field value if set, zero value otherwise.
func (o *Sstackpack) GetLatestVersion() SstackpackLatestVersion {
	if o == nil || o.LatestVersion == nil {
		var ret SstackpackLatestVersion
		return ret
	}
	return *o.LatestVersion
}

// GetLatestVersionOk returns a tuple with the LatestVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sstackpack) GetLatestVersionOk() (*SstackpackLatestVersion, bool) {
	if o == nil || o.LatestVersion == nil {
		return nil, false
	}
	return o.LatestVersion, true
}

// HasLatestVersion returns a boolean if a field has been set.
func (o *Sstackpack) HasLatestVersion() bool {
	if o != nil && o.LatestVersion != nil {
		return true
	}

	return false
}

// SetLatestVersion gets a reference to the given SstackpackLatestVersion and assigns it to the LatestVersion field.
func (o *Sstackpack) SetLatestVersion(v SstackpackLatestVersion) {
	o.LatestVersion = &v
}

// GetNextVersion returns the NextVersion field value if set, zero value otherwise.
func (o *Sstackpack) GetNextVersion() SstackpackLatestVersion {
	if o == nil || o.NextVersion == nil {
		var ret SstackpackLatestVersion
		return ret
	}
	return *o.NextVersion
}

// GetNextVersionOk returns a tuple with the NextVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sstackpack) GetNextVersionOk() (*SstackpackLatestVersion, bool) {
	if o == nil || o.NextVersion == nil {
		return nil, false
	}
	return o.NextVersion, true
}

// HasNextVersion returns a boolean if a field has been set.
func (o *Sstackpack) HasNextVersion() bool {
	if o != nil && o.NextVersion != nil {
		return true
	}

	return false
}

// SetNextVersion gets a reference to the given SstackpackLatestVersion and assigns it to the NextVersion field.
func (o *Sstackpack) SetNextVersion(v SstackpackLatestVersion) {
	o.NextVersion = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *Sstackpack) GetSteps() []StackPackStep {
	if o == nil || o.Steps == nil {
		var ret []StackPackStep
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sstackpack) GetStepsOk() ([]StackPackStep, bool) {
	if o == nil || o.Steps == nil {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *Sstackpack) HasSteps() bool {
	if o != nil && o.Steps != nil {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []StackPackStep and assigns it to the Steps field.
func (o *Sstackpack) SetSteps(v []StackPackStep) {
	o.Steps = v
}

func (o Sstackpack) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Configurations != nil {
		toSerialize["configurations"] = o.Configurations
	}
	if o.LatestVersion != nil {
		toSerialize["latestVersion"] = o.LatestVersion
	}
	if o.NextVersion != nil {
		toSerialize["nextVersion"] = o.NextVersion
	}
	if o.Steps != nil {
		toSerialize["steps"] = o.Steps
	}
	return json.Marshal(toSerialize)
}

type NullableSstackpack struct {
	value *Sstackpack
	isSet bool
}

func (v NullableSstackpack) Get() *Sstackpack {
	return v.value
}

func (v *NullableSstackpack) Set(val *Sstackpack) {
	v.value = val
	v.isSet = true
}

func (v NullableSstackpack) IsSet() bool {
	return v.isSet
}

func (v *NullableSstackpack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSstackpack(val *Sstackpack) *NullableSstackpack {
	return &NullableSstackpack{value: val, isSet: true}
}

func (v NullableSstackpack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSstackpack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


