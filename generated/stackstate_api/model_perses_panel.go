/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// PersesPanel struct for PersesPanel
type PersesPanel struct {
	Kind *string          `json:"kind,omitempty"`
	Spec *PersesPanelSpec `json:"spec,omitempty"`
}

// NewPersesPanel instantiates a new PersesPanel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersesPanel() *PersesPanel {
	this := PersesPanel{}
	return &this
}

// NewPersesPanelWithDefaults instantiates a new PersesPanel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersesPanelWithDefaults() *PersesPanel {
	this := PersesPanel{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *PersesPanel) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersesPanel) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *PersesPanel) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *PersesPanel) SetKind(v string) {
	o.Kind = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *PersesPanel) GetSpec() PersesPanelSpec {
	if o == nil || o.Spec == nil {
		var ret PersesPanelSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersesPanel) GetSpecOk() (*PersesPanelSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *PersesPanel) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given PersesPanelSpec and assigns it to the Spec field.
func (o *PersesPanel) SetSpec(v PersesPanelSpec) {
	o.Spec = &v
}

func (o PersesPanel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	return json.Marshal(toSerialize)
}

type NullablePersesPanel struct {
	value *PersesPanel
	isSet bool
}

func (v NullablePersesPanel) Get() *PersesPanel {
	return v.value
}

func (v *NullablePersesPanel) Set(val *PersesPanel) {
	v.value = val
	v.isSet = true
}

func (v NullablePersesPanel) IsSet() bool {
	return v.isSet
}

func (v *NullablePersesPanel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersesPanel(val *PersesPanel) *NullablePersesPanel {
	return &NullablePersesPanel{value: val, isSet: true}
}

func (v NullablePersesPanel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersesPanel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
