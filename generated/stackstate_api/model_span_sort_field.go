/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// SpanSortField the model 'SpanSortField'
type SpanSortField string

// List of SpanSortField
const (
	SPANSORTFIELD_START_TIME       SpanSortField = "StartTime"
	SPANSORTFIELD_SERVICE_NAME     SpanSortField = "ServiceName"
	SPANSORTFIELD_SPAN_NAME        SpanSortField = "SpanName"
	SPANSORTFIELD_SPAN_KIND        SpanSortField = "SpanKind"
	SPANSORTFIELD_SPAN_PARENT_TYPE SpanSortField = "SpanParentType"
	SPANSORTFIELD_DURATION_NANOS   SpanSortField = "DurationNanos"
	SPANSORTFIELD_STATUS_CODE      SpanSortField = "StatusCode"
	SPANSORTFIELD_TRACE_ID         SpanSortField = "TraceId"
	SPANSORTFIELD_SPAN_ID          SpanSortField = "SpanId"
	SPANSORTFIELD_SCOPE_NAME       SpanSortField = "ScopeName"
	SPANSORTFIELD_SCOPE_VERSION    SpanSortField = "ScopeVersion"
)

// All allowed values of SpanSortField enum
var AllowedSpanSortFieldEnumValues = []SpanSortField{
	"StartTime",
	"ServiceName",
	"SpanName",
	"SpanKind",
	"SpanParentType",
	"DurationNanos",
	"StatusCode",
	"TraceId",
	"SpanId",
	"ScopeName",
	"ScopeVersion",
}

func (v *SpanSortField) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpanSortField(value)
	for _, existing := range AllowedSpanSortFieldEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpanSortField", value)
}

// NewSpanSortFieldFromValue returns a pointer to a valid SpanSortField
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpanSortFieldFromValue(v string) (*SpanSortField, error) {
	ev := SpanSortField(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpanSortField: valid values are %v", v, AllowedSpanSortFieldEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpanSortField) IsValid() bool {
	for _, existing := range AllowedSpanSortFieldEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpanSortField value
func (v SpanSortField) Ptr() *SpanSortField {
	return &v
}

type NullableSpanSortField struct {
	value *SpanSortField
	isSet bool
}

func (v NullableSpanSortField) Get() *SpanSortField {
	return v.value
}

func (v *NullableSpanSortField) Set(val *SpanSortField) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanSortField) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanSortField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanSortField(val *SpanSortField) *NullableSpanSortField {
	return &NullableSpanSortField{value: val, isSet: true}
}

func (v NullableSpanSortField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanSortField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
