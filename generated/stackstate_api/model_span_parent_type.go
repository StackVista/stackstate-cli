/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// SpanParentType the model 'SpanParentType'
type SpanParentType string

// List of SpanParentType
const (
	SPANPARENTTYPE_EXTERNAL SpanParentType = "External"
	SPANPARENTTYPE_INTERNAL SpanParentType = "Internal"
	SPANPARENTTYPE_ROOT     SpanParentType = "Root"
)

// All allowed values of SpanParentType enum
var AllowedSpanParentTypeEnumValues = []SpanParentType{
	"External",
	"Internal",
	"Root",
}

func (v *SpanParentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpanParentType(value)
	for _, existing := range AllowedSpanParentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpanParentType", value)
}

// NewSpanParentTypeFromValue returns a pointer to a valid SpanParentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpanParentTypeFromValue(v string) (*SpanParentType, error) {
	ev := SpanParentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpanParentType: valid values are %v", v, AllowedSpanParentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpanParentType) IsValid() bool {
	for _, existing := range AllowedSpanParentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpanParentType value
func (v SpanParentType) Ptr() *SpanParentType {
	return &v
}

type NullableSpanParentType struct {
	value *SpanParentType
	isSet bool
}

func (v NullableSpanParentType) Get() *SpanParentType {
	return v.value
}

func (v *NullableSpanParentType) Set(val *SpanParentType) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanParentType) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanParentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanParentType(val *SpanParentType) *NullableSpanParentType {
	return &NullableSpanParentType{value: val, isSet: true}
}

func (v NullableSpanParentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanParentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
