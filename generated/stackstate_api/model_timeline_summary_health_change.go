/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// TimelineSummaryHealthChange struct for TimelineSummaryHealthChange
type TimelineSummaryHealthChange struct {
	Type      string           `json:"_type"`
	Timestamp int64            `json:"timestamp"`
	NewHealth HealthStateValue `json:"newHealth"`
}

// NewTimelineSummaryHealthChange instantiates a new TimelineSummaryHealthChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelineSummaryHealthChange(type_ string, timestamp int64, newHealth HealthStateValue) *TimelineSummaryHealthChange {
	this := TimelineSummaryHealthChange{}
	this.Type = type_
	this.Timestamp = timestamp
	this.NewHealth = newHealth
	return &this
}

// NewTimelineSummaryHealthChangeWithDefaults instantiates a new TimelineSummaryHealthChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineSummaryHealthChangeWithDefaults() *TimelineSummaryHealthChange {
	this := TimelineSummaryHealthChange{}
	return &this
}

// GetType returns the Type field value
func (o *TimelineSummaryHealthChange) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TimelineSummaryHealthChange) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TimelineSummaryHealthChange) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *TimelineSummaryHealthChange) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *TimelineSummaryHealthChange) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *TimelineSummaryHealthChange) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetNewHealth returns the NewHealth field value
func (o *TimelineSummaryHealthChange) GetNewHealth() HealthStateValue {
	if o == nil {
		var ret HealthStateValue
		return ret
	}

	return o.NewHealth
}

// GetNewHealthOk returns a tuple with the NewHealth field value
// and a boolean to check if the value has been set.
func (o *TimelineSummaryHealthChange) GetNewHealthOk() (*HealthStateValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewHealth, true
}

// SetNewHealth sets field value
func (o *TimelineSummaryHealthChange) SetNewHealth(v HealthStateValue) {
	o.NewHealth = v
}

func (o TimelineSummaryHealthChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["newHealth"] = o.NewHealth
	}
	return json.Marshal(toSerialize)
}

type NullableTimelineSummaryHealthChange struct {
	value *TimelineSummaryHealthChange
	isSet bool
}

func (v NullableTimelineSummaryHealthChange) Get() *TimelineSummaryHealthChange {
	return v.value
}

func (v *NullableTimelineSummaryHealthChange) Set(val *TimelineSummaryHealthChange) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineSummaryHealthChange) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineSummaryHealthChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineSummaryHealthChange(val *TimelineSummaryHealthChange) *NullableTimelineSummaryHealthChange {
	return &NullableTimelineSummaryHealthChange{value: val, isSet: true}
}

func (v NullableTimelineSummaryHealthChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineSummaryHealthChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
