/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// Data - struct for Data
type Data struct {
	DataString *DataString
	Matrix *Matrix
	Scalar *Scalar
	Vector *Vector
}

// DataStringAsData is a convenience function that returns DataString wrapped in Data
func DataStringAsData(v *DataString) Data {
	return Data{
		DataString: v,
	}
}

// MatrixAsData is a convenience function that returns Matrix wrapped in Data
func MatrixAsData(v *Matrix) Data {
	return Data{
		Matrix: v,
	}
}

// ScalarAsData is a convenience function that returns Scalar wrapped in Data
func ScalarAsData(v *Scalar) Data {
	return Data{
		Scalar: v,
	}
}

// VectorAsData is a convenience function that returns Vector wrapped in Data
func VectorAsData(v *Vector) Data {
	return Data{
		Vector: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Data) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'DataString'
	if jsonDict["resultType"] == "DataString" {
		// try to unmarshal JSON data into DataString
		err = json.Unmarshal(data, &dst.DataString)
		if err == nil {
			return nil // data stored in dst.DataString, return on the first match
		} else {
			dst.DataString = nil
			return fmt.Errorf("Failed to unmarshal Data as DataString: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Matrix'
	if jsonDict["resultType"] == "Matrix" {
		// try to unmarshal JSON data into Matrix
		err = json.Unmarshal(data, &dst.Matrix)
		if err == nil {
			return nil // data stored in dst.Matrix, return on the first match
		} else {
			dst.Matrix = nil
			return fmt.Errorf("Failed to unmarshal Data as Matrix: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Scalar'
	if jsonDict["resultType"] == "Scalar" {
		// try to unmarshal JSON data into Scalar
		err = json.Unmarshal(data, &dst.Scalar)
		if err == nil {
			return nil // data stored in dst.Scalar, return on the first match
		} else {
			dst.Scalar = nil
			return fmt.Errorf("Failed to unmarshal Data as Scalar: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Vector'
	if jsonDict["resultType"] == "Vector" {
		// try to unmarshal JSON data into Vector
		err = json.Unmarshal(data, &dst.Vector)
		if err == nil {
			return nil // data stored in dst.Vector, return on the first match
		} else {
			dst.Vector = nil
			return fmt.Errorf("Failed to unmarshal Data as Vector: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Data) MarshalJSON() ([]byte, error) {
	if src.DataString != nil {
		return json.Marshal(&src.DataString)
	}

	if src.Matrix != nil {
		return json.Marshal(&src.Matrix)
	}

	if src.Scalar != nil {
		return json.Marshal(&src.Scalar)
	}

	if src.Vector != nil {
		return json.Marshal(&src.Vector)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Data) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataString != nil {
		return obj.DataString
	}

	if obj.Matrix != nil {
		return obj.Matrix
	}

	if obj.Scalar != nil {
		return obj.Scalar
	}

	if obj.Vector != nil {
		return obj.Vector
	}

	// all schemas are nil
	return nil
}

type NullableData struct {
	value *Data
	isSet bool
}

func (v NullableData) Get() *Data {
	return v.value
}

func (v *NullableData) Set(val *Data) {
	v.value = val
	v.isSet = true
}

func (v NullableData) IsSet() bool {
	return v.isSet
}

func (v *NullableData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableData(val *Data) *NullableData {
	return &NullableData{value: val, isSet: true}
}

func (v NullableData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


