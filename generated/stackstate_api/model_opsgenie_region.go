/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// OpsgenieRegion the model 'OpsgenieRegion'
type OpsgenieRegion string

// List of OpsgenieRegion
const (
	OPSGENIEREGION_EU OpsgenieRegion = "EU"
	OPSGENIEREGION_US OpsgenieRegion = "US"
)

// All allowed values of OpsgenieRegion enum
var AllowedOpsgenieRegionEnumValues = []OpsgenieRegion{
	"EU",
	"US",
}

func (v *OpsgenieRegion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpsgenieRegion(value)
	for _, existing := range AllowedOpsgenieRegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OpsgenieRegion", value)
}

// NewOpsgenieRegionFromValue returns a pointer to a valid OpsgenieRegion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpsgenieRegionFromValue(v string) (*OpsgenieRegion, error) {
	ev := OpsgenieRegion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OpsgenieRegion: valid values are %v", v, AllowedOpsgenieRegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpsgenieRegion) IsValid() bool {
	for _, existing := range AllowedOpsgenieRegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpsgenieRegion value
func (v OpsgenieRegion) Ptr() *OpsgenieRegion {
	return &v
}

type NullableOpsgenieRegion struct {
	value *OpsgenieRegion
	isSet bool
}

func (v NullableOpsgenieRegion) Get() *OpsgenieRegion {
	return v.value
}

func (v *NullableOpsgenieRegion) Set(val *OpsgenieRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableOpsgenieRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableOpsgenieRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpsgenieRegion(val *OpsgenieRegion) *NullableOpsgenieRegion {
	return &NullableOpsgenieRegion{value: val, isSet: true}
}

func (v NullableOpsgenieRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpsgenieRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
