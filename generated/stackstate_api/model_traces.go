/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// Traces struct for Traces
type Traces struct {
	// List of traces
	Traces []TraceIdentifier `json:"traces"`
	// Maximum number of the traces in the result.
	PageSize int32 `json:"pageSize"`
	// The requested page.
	Page int32 `json:"page"`
	// The total number of matching traces.
	MatchesTotal int64 `json:"matchesTotal"`
}

// NewTraces instantiates a new Traces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraces(traces []TraceIdentifier, pageSize int32, page int32, matchesTotal int64) *Traces {
	this := Traces{}
	this.Traces = traces
	this.PageSize = pageSize
	this.Page = page
	this.MatchesTotal = matchesTotal
	return &this
}

// NewTracesWithDefaults instantiates a new Traces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTracesWithDefaults() *Traces {
	this := Traces{}
	return &this
}

// GetTraces returns the Traces field value
func (o *Traces) GetTraces() []TraceIdentifier {
	if o == nil {
		var ret []TraceIdentifier
		return ret
	}

	return o.Traces
}

// GetTracesOk returns a tuple with the Traces field value
// and a boolean to check if the value has been set.
func (o *Traces) GetTracesOk() ([]TraceIdentifier, bool) {
	if o == nil {
		return nil, false
	}
	return o.Traces, true
}

// SetTraces sets field value
func (o *Traces) SetTraces(v []TraceIdentifier) {
	o.Traces = v
}

// GetPageSize returns the PageSize field value
func (o *Traces) GetPageSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value
// and a boolean to check if the value has been set.
func (o *Traces) GetPageSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageSize, true
}

// SetPageSize sets field value
func (o *Traces) SetPageSize(v int32) {
	o.PageSize = v
}

// GetPage returns the Page field value
func (o *Traces) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *Traces) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *Traces) SetPage(v int32) {
	o.Page = v
}

// GetMatchesTotal returns the MatchesTotal field value
func (o *Traces) GetMatchesTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MatchesTotal
}

// GetMatchesTotalOk returns a tuple with the MatchesTotal field value
// and a boolean to check if the value has been set.
func (o *Traces) GetMatchesTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchesTotal, true
}

// SetMatchesTotal sets field value
func (o *Traces) SetMatchesTotal(v int64) {
	o.MatchesTotal = v
}

func (o Traces) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["traces"] = o.Traces
	}
	if true {
		toSerialize["pageSize"] = o.PageSize
	}
	if true {
		toSerialize["page"] = o.Page
	}
	if true {
		toSerialize["matchesTotal"] = o.MatchesTotal
	}
	return json.Marshal(toSerialize)
}

type NullableTraces struct {
	value *Traces
	isSet bool
}

func (v NullableTraces) Get() *Traces {
	return v.value
}

func (v *NullableTraces) Set(val *Traces) {
	v.value = val
	v.isSet = true
}

func (v NullableTraces) IsSet() bool {
	return v.isSet
}

func (v *NullableTraces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraces(val *Traces) *NullableTraces {
	return &NullableTraces{value: val, isSet: true}
}

func (v NullableTraces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
