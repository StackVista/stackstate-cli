/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type OtelMappingApi interface {

	/*
		GetOtelComponentMappingStatus Get the status of an otel component mapping synchronization.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param identifier
		@return ApiGetOtelComponentMappingStatusRequest
	*/
	GetOtelComponentMappingStatus(ctx context.Context, identifier string) ApiGetOtelComponentMappingStatusRequest

	// GetOtelComponentMappingStatusExecute executes the request
	//  @return OtelMappingStatus
	GetOtelComponentMappingStatusExecute(r ApiGetOtelComponentMappingStatusRequest) (*OtelMappingStatus, *http.Response, error)

	/*
		GetOtelComponentMappings Get all otel component mappings.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetOtelComponentMappingsRequest
	*/
	GetOtelComponentMappings(ctx context.Context) ApiGetOtelComponentMappingsRequest

	// GetOtelComponentMappingsExecute executes the request
	//  @return []OtelMappingItem
	GetOtelComponentMappingsExecute(r ApiGetOtelComponentMappingsRequest) ([]OtelMappingItem, *http.Response, error)

	/*
		GetOtelRelationMappingStatus Get the status of an otel relation mapping synchronization.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param identifier
		@return ApiGetOtelRelationMappingStatusRequest
	*/
	GetOtelRelationMappingStatus(ctx context.Context, identifier string) ApiGetOtelRelationMappingStatusRequest

	// GetOtelRelationMappingStatusExecute executes the request
	//  @return OtelMappingStatus
	GetOtelRelationMappingStatusExecute(r ApiGetOtelRelationMappingStatusRequest) (*OtelMappingStatus, *http.Response, error)

	/*
		GetOtelRelationMappings Get all otel relation mappings.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetOtelRelationMappingsRequest
	*/
	GetOtelRelationMappings(ctx context.Context) ApiGetOtelRelationMappingsRequest

	// GetOtelRelationMappingsExecute executes the request
	//  @return []OtelMappingItem
	GetOtelRelationMappingsExecute(r ApiGetOtelRelationMappingsRequest) ([]OtelMappingItem, *http.Response, error)
}

// OtelMappingApiService OtelMappingApi service
type OtelMappingApiService service

type ApiGetOtelComponentMappingStatusRequest struct {
	ctx        context.Context
	ApiService OtelMappingApi
	identifier string
}

func (r ApiGetOtelComponentMappingStatusRequest) Execute() (*OtelMappingStatus, *http.Response, error) {
	return r.ApiService.GetOtelComponentMappingStatusExecute(r)
}

/*
GetOtelComponentMappingStatus Get the status of an otel component mapping synchronization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param identifier
 @return ApiGetOtelComponentMappingStatusRequest
*/
func (a *OtelMappingApiService) GetOtelComponentMappingStatus(ctx context.Context, identifier string) ApiGetOtelComponentMappingStatusRequest {
	return ApiGetOtelComponentMappingStatusRequest{
		ApiService: a,
		ctx:        ctx,
		identifier: identifier,
	}
}

// Execute executes the request
//  @return OtelMappingStatus
func (a *OtelMappingApiService) GetOtelComponentMappingStatusExecute(r ApiGetOtelComponentMappingStatusRequest) (*OtelMappingStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OtelMappingStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OtelMappingApiService.GetOtelComponentMappingStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/otel-component-mappings/{identifier}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterToString(r.identifier, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v OtelMappingApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v OtelMappingApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOtelComponentMappingsRequest struct {
	ctx        context.Context
	ApiService OtelMappingApi
}

func (r ApiGetOtelComponentMappingsRequest) Execute() ([]OtelMappingItem, *http.Response, error) {
	return r.ApiService.GetOtelComponentMappingsExecute(r)
}

/*
GetOtelComponentMappings Get all otel component mappings.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOtelComponentMappingsRequest
*/
func (a *OtelMappingApiService) GetOtelComponentMappings(ctx context.Context) ApiGetOtelComponentMappingsRequest {
	return ApiGetOtelComponentMappingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return []OtelMappingItem
func (a *OtelMappingApiService) GetOtelComponentMappingsExecute(r ApiGetOtelComponentMappingsRequest) ([]OtelMappingItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OtelMappingItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OtelMappingApiService.GetOtelComponentMappings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/otel-component-mappings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v OtelMappingApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOtelRelationMappingStatusRequest struct {
	ctx        context.Context
	ApiService OtelMappingApi
	identifier string
}

func (r ApiGetOtelRelationMappingStatusRequest) Execute() (*OtelMappingStatus, *http.Response, error) {
	return r.ApiService.GetOtelRelationMappingStatusExecute(r)
}

/*
GetOtelRelationMappingStatus Get the status of an otel relation mapping synchronization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param identifier
 @return ApiGetOtelRelationMappingStatusRequest
*/
func (a *OtelMappingApiService) GetOtelRelationMappingStatus(ctx context.Context, identifier string) ApiGetOtelRelationMappingStatusRequest {
	return ApiGetOtelRelationMappingStatusRequest{
		ApiService: a,
		ctx:        ctx,
		identifier: identifier,
	}
}

// Execute executes the request
//  @return OtelMappingStatus
func (a *OtelMappingApiService) GetOtelRelationMappingStatusExecute(r ApiGetOtelRelationMappingStatusRequest) (*OtelMappingStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OtelMappingStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OtelMappingApiService.GetOtelRelationMappingStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/otel-relation-mappings/{identifier}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterToString(r.identifier, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v OtelMappingApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v OtelMappingApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOtelRelationMappingsRequest struct {
	ctx        context.Context
	ApiService OtelMappingApi
}

func (r ApiGetOtelRelationMappingsRequest) Execute() ([]OtelMappingItem, *http.Response, error) {
	return r.ApiService.GetOtelRelationMappingsExecute(r)
}

/*
GetOtelRelationMappings Get all otel relation mappings.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOtelRelationMappingsRequest
*/
func (a *OtelMappingApiService) GetOtelRelationMappings(ctx context.Context) ApiGetOtelRelationMappingsRequest {
	return ApiGetOtelRelationMappingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return []OtelMappingItem
func (a *OtelMappingApiService) GetOtelRelationMappingsExecute(r ApiGetOtelRelationMappingsRequest) ([]OtelMappingItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OtelMappingItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OtelMappingApiService.GetOtelRelationMappings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/otel-relation-mappings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v OtelMappingApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------

type OtelMappingApiMock struct {
	GetOtelComponentMappingStatusCalls    *[]GetOtelComponentMappingStatusCall
	GetOtelComponentMappingStatusResponse GetOtelComponentMappingStatusMockResponse
	GetOtelComponentMappingsCalls         *[]GetOtelComponentMappingsCall
	GetOtelComponentMappingsResponse      GetOtelComponentMappingsMockResponse
	GetOtelRelationMappingStatusCalls     *[]GetOtelRelationMappingStatusCall
	GetOtelRelationMappingStatusResponse  GetOtelRelationMappingStatusMockResponse
	GetOtelRelationMappingsCalls          *[]GetOtelRelationMappingsCall
	GetOtelRelationMappingsResponse       GetOtelRelationMappingsMockResponse
}

func NewOtelMappingApiMock() OtelMappingApiMock {
	xGetOtelComponentMappingStatusCalls := make([]GetOtelComponentMappingStatusCall, 0)
	xGetOtelComponentMappingsCalls := make([]GetOtelComponentMappingsCall, 0)
	xGetOtelRelationMappingStatusCalls := make([]GetOtelRelationMappingStatusCall, 0)
	xGetOtelRelationMappingsCalls := make([]GetOtelRelationMappingsCall, 0)
	return OtelMappingApiMock{
		GetOtelComponentMappingStatusCalls: &xGetOtelComponentMappingStatusCalls,
		GetOtelComponentMappingsCalls:      &xGetOtelComponentMappingsCalls,
		GetOtelRelationMappingStatusCalls:  &xGetOtelRelationMappingStatusCalls,
		GetOtelRelationMappingsCalls:       &xGetOtelRelationMappingsCalls,
	}
}

type GetOtelComponentMappingStatusMockResponse struct {
	Result   OtelMappingStatus
	Response *http.Response
	Error    error
}

type GetOtelComponentMappingStatusCall struct {
	Pidentifier string
}

func (mock OtelMappingApiMock) GetOtelComponentMappingStatus(ctx context.Context, identifier string) ApiGetOtelComponentMappingStatusRequest {
	return ApiGetOtelComponentMappingStatusRequest{
		ApiService: mock,
		ctx:        ctx,
		identifier: identifier,
	}
}

func (mock OtelMappingApiMock) GetOtelComponentMappingStatusExecute(r ApiGetOtelComponentMappingStatusRequest) (*OtelMappingStatus, *http.Response, error) {
	p := GetOtelComponentMappingStatusCall{
		Pidentifier: r.identifier,
	}
	*mock.GetOtelComponentMappingStatusCalls = append(*mock.GetOtelComponentMappingStatusCalls, p)
	return &mock.GetOtelComponentMappingStatusResponse.Result, mock.GetOtelComponentMappingStatusResponse.Response, mock.GetOtelComponentMappingStatusResponse.Error
}

type GetOtelComponentMappingsMockResponse struct {
	Result   []OtelMappingItem
	Response *http.Response
	Error    error
}

type GetOtelComponentMappingsCall struct {
}

func (mock OtelMappingApiMock) GetOtelComponentMappings(ctx context.Context) ApiGetOtelComponentMappingsRequest {
	return ApiGetOtelComponentMappingsRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock OtelMappingApiMock) GetOtelComponentMappingsExecute(r ApiGetOtelComponentMappingsRequest) ([]OtelMappingItem, *http.Response, error) {
	p := GetOtelComponentMappingsCall{}
	*mock.GetOtelComponentMappingsCalls = append(*mock.GetOtelComponentMappingsCalls, p)
	return mock.GetOtelComponentMappingsResponse.Result, mock.GetOtelComponentMappingsResponse.Response, mock.GetOtelComponentMappingsResponse.Error
}

type GetOtelRelationMappingStatusMockResponse struct {
	Result   OtelMappingStatus
	Response *http.Response
	Error    error
}

type GetOtelRelationMappingStatusCall struct {
	Pidentifier string
}

func (mock OtelMappingApiMock) GetOtelRelationMappingStatus(ctx context.Context, identifier string) ApiGetOtelRelationMappingStatusRequest {
	return ApiGetOtelRelationMappingStatusRequest{
		ApiService: mock,
		ctx:        ctx,
		identifier: identifier,
	}
}

func (mock OtelMappingApiMock) GetOtelRelationMappingStatusExecute(r ApiGetOtelRelationMappingStatusRequest) (*OtelMappingStatus, *http.Response, error) {
	p := GetOtelRelationMappingStatusCall{
		Pidentifier: r.identifier,
	}
	*mock.GetOtelRelationMappingStatusCalls = append(*mock.GetOtelRelationMappingStatusCalls, p)
	return &mock.GetOtelRelationMappingStatusResponse.Result, mock.GetOtelRelationMappingStatusResponse.Response, mock.GetOtelRelationMappingStatusResponse.Error
}

type GetOtelRelationMappingsMockResponse struct {
	Result   []OtelMappingItem
	Response *http.Response
	Error    error
}

type GetOtelRelationMappingsCall struct {
}

func (mock OtelMappingApiMock) GetOtelRelationMappings(ctx context.Context) ApiGetOtelRelationMappingsRequest {
	return ApiGetOtelRelationMappingsRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock OtelMappingApiMock) GetOtelRelationMappingsExecute(r ApiGetOtelRelationMappingsRequest) ([]OtelMappingItem, *http.Response, error) {
	p := GetOtelRelationMappingsCall{}
	*mock.GetOtelRelationMappingsCalls = append(*mock.GetOtelRelationMappingsCalls, p)
	return mock.GetOtelRelationMappingsResponse.Result, mock.GetOtelRelationMappingsResponse.Response, mock.GetOtelRelationMappingsResponse.Error
}
