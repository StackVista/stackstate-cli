/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// ViewCheckState struct for ViewCheckState
type ViewCheckState struct {
	CheckStateId        string           `json:"checkStateId"`
	HealthState         HealthStateValue `json:"healthState"`
	ComponentName       *string          `json:"componentName,omitempty"`
	ComponentIdentifier string           `json:"componentIdentifier"`
	ComponentType       *string          `json:"componentType,omitempty"`
	LastUpdateTimestamp int64            `json:"lastUpdateTimestamp"`
}

// NewViewCheckState instantiates a new ViewCheckState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewCheckState(checkStateId string, healthState HealthStateValue, componentIdentifier string, lastUpdateTimestamp int64) *ViewCheckState {
	this := ViewCheckState{}
	this.CheckStateId = checkStateId
	this.HealthState = healthState
	this.ComponentIdentifier = componentIdentifier
	this.LastUpdateTimestamp = lastUpdateTimestamp
	return &this
}

// NewViewCheckStateWithDefaults instantiates a new ViewCheckState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewCheckStateWithDefaults() *ViewCheckState {
	this := ViewCheckState{}
	return &this
}

// GetCheckStateId returns the CheckStateId field value
func (o *ViewCheckState) GetCheckStateId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CheckStateId
}

// GetCheckStateIdOk returns a tuple with the CheckStateId field value
// and a boolean to check if the value has been set.
func (o *ViewCheckState) GetCheckStateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CheckStateId, true
}

// SetCheckStateId sets field value
func (o *ViewCheckState) SetCheckStateId(v string) {
	o.CheckStateId = v
}

// GetHealthState returns the HealthState field value
func (o *ViewCheckState) GetHealthState() HealthStateValue {
	if o == nil {
		var ret HealthStateValue
		return ret
	}

	return o.HealthState
}

// GetHealthStateOk returns a tuple with the HealthState field value
// and a boolean to check if the value has been set.
func (o *ViewCheckState) GetHealthStateOk() (*HealthStateValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HealthState, true
}

// SetHealthState sets field value
func (o *ViewCheckState) SetHealthState(v HealthStateValue) {
	o.HealthState = v
}

// GetComponentName returns the ComponentName field value if set, zero value otherwise.
func (o *ViewCheckState) GetComponentName() string {
	if o == nil || o.ComponentName == nil {
		var ret string
		return ret
	}
	return *o.ComponentName
}

// GetComponentNameOk returns a tuple with the ComponentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCheckState) GetComponentNameOk() (*string, bool) {
	if o == nil || o.ComponentName == nil {
		return nil, false
	}
	return o.ComponentName, true
}

// HasComponentName returns a boolean if a field has been set.
func (o *ViewCheckState) HasComponentName() bool {
	if o != nil && o.ComponentName != nil {
		return true
	}

	return false
}

// SetComponentName gets a reference to the given string and assigns it to the ComponentName field.
func (o *ViewCheckState) SetComponentName(v string) {
	o.ComponentName = &v
}

// GetComponentIdentifier returns the ComponentIdentifier field value
func (o *ViewCheckState) GetComponentIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentIdentifier
}

// GetComponentIdentifierOk returns a tuple with the ComponentIdentifier field value
// and a boolean to check if the value has been set.
func (o *ViewCheckState) GetComponentIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentIdentifier, true
}

// SetComponentIdentifier sets field value
func (o *ViewCheckState) SetComponentIdentifier(v string) {
	o.ComponentIdentifier = v
}

// GetComponentType returns the ComponentType field value if set, zero value otherwise.
func (o *ViewCheckState) GetComponentType() string {
	if o == nil || o.ComponentType == nil {
		var ret string
		return ret
	}
	return *o.ComponentType
}

// GetComponentTypeOk returns a tuple with the ComponentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCheckState) GetComponentTypeOk() (*string, bool) {
	if o == nil || o.ComponentType == nil {
		return nil, false
	}
	return o.ComponentType, true
}

// HasComponentType returns a boolean if a field has been set.
func (o *ViewCheckState) HasComponentType() bool {
	if o != nil && o.ComponentType != nil {
		return true
	}

	return false
}

// SetComponentType gets a reference to the given string and assigns it to the ComponentType field.
func (o *ViewCheckState) SetComponentType(v string) {
	o.ComponentType = &v
}

// GetLastUpdateTimestamp returns the LastUpdateTimestamp field value
func (o *ViewCheckState) GetLastUpdateTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastUpdateTimestamp
}

// GetLastUpdateTimestampOk returns a tuple with the LastUpdateTimestamp field value
// and a boolean to check if the value has been set.
func (o *ViewCheckState) GetLastUpdateTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdateTimestamp, true
}

// SetLastUpdateTimestamp sets field value
func (o *ViewCheckState) SetLastUpdateTimestamp(v int64) {
	o.LastUpdateTimestamp = v
}

func (o ViewCheckState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["checkStateId"] = o.CheckStateId
	}
	if true {
		toSerialize["healthState"] = o.HealthState
	}
	if o.ComponentName != nil {
		toSerialize["componentName"] = o.ComponentName
	}
	if true {
		toSerialize["componentIdentifier"] = o.ComponentIdentifier
	}
	if o.ComponentType != nil {
		toSerialize["componentType"] = o.ComponentType
	}
	if true {
		toSerialize["lastUpdateTimestamp"] = o.LastUpdateTimestamp
	}
	return json.Marshal(toSerialize)
}

type NullableViewCheckState struct {
	value *ViewCheckState
	isSet bool
}

func (v NullableViewCheckState) Get() *ViewCheckState {
	return v.value
}

func (v *NullableViewCheckState) Set(val *ViewCheckState) {
	v.value = val
	v.isSet = true
}

func (v NullableViewCheckState) IsSet() bool {
	return v.isSet
}

func (v *NullableViewCheckState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewCheckState(val *ViewCheckState) *NullableViewCheckState {
	return &NullableViewCheckState{value: val, isSet: true}
}

func (v NullableViewCheckState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewCheckState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
