/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// MonitorCheckStatus struct for MonitorCheckStatus
type MonitorCheckStatus struct {
	Id                   int64                       `json:"id"`
	CheckStateId         string                      `json:"checkStateId"`
	Message              string                      `json:"message"`
	Reason               *string                     `json:"reason,omitempty"`
	Health               HealthStateValue            `json:"health"`
	TriggeredTimestamp   int32                       `json:"triggeredTimestamp"`
	Metrics              []MonitorCheckStatusMetric  `json:"metrics"`
	Component            MonitorCheckStatusComponent `json:"component"`
	MonitorId            MonitorReferenceId          `json:"monitorId"`
	MonitorName          string                      `json:"monitorName"`
	MonitorDescription   *string                     `json:"monitorDescription,omitempty"`
	TroubleshootingSteps *string                     `json:"troubleshootingSteps,omitempty"`
	TopologyTime         int32                       `json:"topologyTime"`
}

// NewMonitorCheckStatus instantiates a new MonitorCheckStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorCheckStatus(id int64, checkStateId string, message string, health HealthStateValue, triggeredTimestamp int32, metrics []MonitorCheckStatusMetric, component MonitorCheckStatusComponent, monitorId MonitorReferenceId, monitorName string, topologyTime int32) *MonitorCheckStatus {
	this := MonitorCheckStatus{}
	this.Id = id
	this.CheckStateId = checkStateId
	this.Message = message
	this.Health = health
	this.TriggeredTimestamp = triggeredTimestamp
	this.Metrics = metrics
	this.Component = component
	this.MonitorId = monitorId
	this.MonitorName = monitorName
	this.TopologyTime = topologyTime
	return &this
}

// NewMonitorCheckStatusWithDefaults instantiates a new MonitorCheckStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorCheckStatusWithDefaults() *MonitorCheckStatus {
	this := MonitorCheckStatus{}
	return &this
}

// GetId returns the Id field value
func (o *MonitorCheckStatus) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MonitorCheckStatus) SetId(v int64) {
	o.Id = v
}

// GetCheckStateId returns the CheckStateId field value
func (o *MonitorCheckStatus) GetCheckStateId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CheckStateId
}

// GetCheckStateIdOk returns a tuple with the CheckStateId field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetCheckStateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CheckStateId, true
}

// SetCheckStateId sets field value
func (o *MonitorCheckStatus) SetCheckStateId(v string) {
	o.CheckStateId = v
}

// GetMessage returns the Message field value
func (o *MonitorCheckStatus) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *MonitorCheckStatus) SetMessage(v string) {
	o.Message = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *MonitorCheckStatus) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *MonitorCheckStatus) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *MonitorCheckStatus) SetReason(v string) {
	o.Reason = &v
}

// GetHealth returns the Health field value
func (o *MonitorCheckStatus) GetHealth() HealthStateValue {
	if o == nil {
		var ret HealthStateValue
		return ret
	}

	return o.Health
}

// GetHealthOk returns a tuple with the Health field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetHealthOk() (*HealthStateValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Health, true
}

// SetHealth sets field value
func (o *MonitorCheckStatus) SetHealth(v HealthStateValue) {
	o.Health = v
}

// GetTriggeredTimestamp returns the TriggeredTimestamp field value
func (o *MonitorCheckStatus) GetTriggeredTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TriggeredTimestamp
}

// GetTriggeredTimestampOk returns a tuple with the TriggeredTimestamp field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetTriggeredTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggeredTimestamp, true
}

// SetTriggeredTimestamp sets field value
func (o *MonitorCheckStatus) SetTriggeredTimestamp(v int32) {
	o.TriggeredTimestamp = v
}

// GetMetrics returns the Metrics field value
func (o *MonitorCheckStatus) GetMetrics() []MonitorCheckStatusMetric {
	if o == nil {
		var ret []MonitorCheckStatusMetric
		return ret
	}

	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetMetricsOk() ([]MonitorCheckStatusMetric, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metrics, true
}

// SetMetrics sets field value
func (o *MonitorCheckStatus) SetMetrics(v []MonitorCheckStatusMetric) {
	o.Metrics = v
}

// GetComponent returns the Component field value
func (o *MonitorCheckStatus) GetComponent() MonitorCheckStatusComponent {
	if o == nil {
		var ret MonitorCheckStatusComponent
		return ret
	}

	return o.Component
}

// GetComponentOk returns a tuple with the Component field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetComponentOk() (*MonitorCheckStatusComponent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Component, true
}

// SetComponent sets field value
func (o *MonitorCheckStatus) SetComponent(v MonitorCheckStatusComponent) {
	o.Component = v
}

// GetMonitorId returns the MonitorId field value
func (o *MonitorCheckStatus) GetMonitorId() MonitorReferenceId {
	if o == nil {
		var ret MonitorReferenceId
		return ret
	}

	return o.MonitorId
}

// GetMonitorIdOk returns a tuple with the MonitorId field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetMonitorIdOk() (*MonitorReferenceId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonitorId, true
}

// SetMonitorId sets field value
func (o *MonitorCheckStatus) SetMonitorId(v MonitorReferenceId) {
	o.MonitorId = v
}

// GetMonitorName returns the MonitorName field value
func (o *MonitorCheckStatus) GetMonitorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MonitorName
}

// GetMonitorNameOk returns a tuple with the MonitorName field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetMonitorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonitorName, true
}

// SetMonitorName sets field value
func (o *MonitorCheckStatus) SetMonitorName(v string) {
	o.MonitorName = v
}

// GetMonitorDescription returns the MonitorDescription field value if set, zero value otherwise.
func (o *MonitorCheckStatus) GetMonitorDescription() string {
	if o == nil || o.MonitorDescription == nil {
		var ret string
		return ret
	}
	return *o.MonitorDescription
}

// GetMonitorDescriptionOk returns a tuple with the MonitorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetMonitorDescriptionOk() (*string, bool) {
	if o == nil || o.MonitorDescription == nil {
		return nil, false
	}
	return o.MonitorDescription, true
}

// HasMonitorDescription returns a boolean if a field has been set.
func (o *MonitorCheckStatus) HasMonitorDescription() bool {
	if o != nil && o.MonitorDescription != nil {
		return true
	}

	return false
}

// SetMonitorDescription gets a reference to the given string and assigns it to the MonitorDescription field.
func (o *MonitorCheckStatus) SetMonitorDescription(v string) {
	o.MonitorDescription = &v
}

// GetTroubleshootingSteps returns the TroubleshootingSteps field value if set, zero value otherwise.
func (o *MonitorCheckStatus) GetTroubleshootingSteps() string {
	if o == nil || o.TroubleshootingSteps == nil {
		var ret string
		return ret
	}
	return *o.TroubleshootingSteps
}

// GetTroubleshootingStepsOk returns a tuple with the TroubleshootingSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetTroubleshootingStepsOk() (*string, bool) {
	if o == nil || o.TroubleshootingSteps == nil {
		return nil, false
	}
	return o.TroubleshootingSteps, true
}

// HasTroubleshootingSteps returns a boolean if a field has been set.
func (o *MonitorCheckStatus) HasTroubleshootingSteps() bool {
	if o != nil && o.TroubleshootingSteps != nil {
		return true
	}

	return false
}

// SetTroubleshootingSteps gets a reference to the given string and assigns it to the TroubleshootingSteps field.
func (o *MonitorCheckStatus) SetTroubleshootingSteps(v string) {
	o.TroubleshootingSteps = &v
}

// GetTopologyTime returns the TopologyTime field value
func (o *MonitorCheckStatus) GetTopologyTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TopologyTime
}

// GetTopologyTimeOk returns a tuple with the TopologyTime field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatus) GetTopologyTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopologyTime, true
}

// SetTopologyTime sets field value
func (o *MonitorCheckStatus) SetTopologyTime(v int32) {
	o.TopologyTime = v
}

func (o MonitorCheckStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["checkStateId"] = o.CheckStateId
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["health"] = o.Health
	}
	if true {
		toSerialize["triggeredTimestamp"] = o.TriggeredTimestamp
	}
	if true {
		toSerialize["metrics"] = o.Metrics
	}
	if true {
		toSerialize["component"] = o.Component
	}
	if true {
		toSerialize["monitorId"] = o.MonitorId
	}
	if true {
		toSerialize["monitorName"] = o.MonitorName
	}
	if o.MonitorDescription != nil {
		toSerialize["monitorDescription"] = o.MonitorDescription
	}
	if o.TroubleshootingSteps != nil {
		toSerialize["troubleshootingSteps"] = o.TroubleshootingSteps
	}
	if true {
		toSerialize["topologyTime"] = o.TopologyTime
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorCheckStatus struct {
	value *MonitorCheckStatus
	isSet bool
}

func (v NullableMonitorCheckStatus) Get() *MonitorCheckStatus {
	return v.value
}

func (v *NullableMonitorCheckStatus) Set(val *MonitorCheckStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorCheckStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorCheckStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorCheckStatus(val *MonitorCheckStatus) *NullableMonitorCheckStatus {
	return &NullableMonitorCheckStatus{value: val, isSet: true}
}

func (v NullableMonitorCheckStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorCheckStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
