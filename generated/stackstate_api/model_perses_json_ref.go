/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// PersesJSONRef struct for PersesJSONRef
type PersesJSONRef struct {
	// The JSON reference pointing to the actual object. The property name '$ref' contains a reserved char, which gets stripped away when generated (it's possible to handle this but makes the generation code more complex). For now, consumers of this spec will need to omit the '$' in the property name.
	Ref string `json:"$ref"`
}

// NewPersesJSONRef instantiates a new PersesJSONRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersesJSONRef(ref string) *PersesJSONRef {
	this := PersesJSONRef{}
	this.Ref = ref
	return &this
}

// NewPersesJSONRefWithDefaults instantiates a new PersesJSONRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersesJSONRefWithDefaults() *PersesJSONRef {
	this := PersesJSONRef{}
	return &this
}

// GetRef returns the Ref field value
func (o *PersesJSONRef) GetRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ref
}

// GetRefOk returns a tuple with the Ref field value
// and a boolean to check if the value has been set.
func (o *PersesJSONRef) GetRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ref, true
}

// SetRef sets field value
func (o *PersesJSONRef) SetRef(v string) {
	o.Ref = v
}

func (o PersesJSONRef) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["$ref"] = o.Ref
	}
	return json.Marshal(toSerialize)
}

type NullablePersesJSONRef struct {
	value *PersesJSONRef
	isSet bool
}

func (v NullablePersesJSONRef) Get() *PersesJSONRef {
	return v.value
}

func (v *NullablePersesJSONRef) Set(val *PersesJSONRef) {
	v.value = val
	v.isSet = true
}

func (v NullablePersesJSONRef) IsSet() bool {
	return v.isSet
}

func (v *NullablePersesJSONRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersesJSONRef(val *PersesJSONRef) *NullablePersesJSONRef {
	return &NullablePersesJSONRef{value: val, isSet: true}
}

func (v NullablePersesJSONRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersesJSONRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
