/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// ComparatorWithoutEquality the model 'ComparatorWithoutEquality'
type ComparatorWithoutEquality string

// List of ComparatorWithoutEquality
const (
	COMPARATORWITHOUTEQUALITY_GTE ComparatorWithoutEquality = "GTE"
	COMPARATORWITHOUTEQUALITY_GT  ComparatorWithoutEquality = "GT"
	COMPARATORWITHOUTEQUALITY_LT  ComparatorWithoutEquality = "LT"
	COMPARATORWITHOUTEQUALITY_LTE ComparatorWithoutEquality = "LTE"
)

// All allowed values of ComparatorWithoutEquality enum
var AllowedComparatorWithoutEqualityEnumValues = []ComparatorWithoutEquality{
	"GTE",
	"GT",
	"LT",
	"LTE",
}

func (v *ComparatorWithoutEquality) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ComparatorWithoutEquality(value)
	for _, existing := range AllowedComparatorWithoutEqualityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ComparatorWithoutEquality", value)
}

// NewComparatorWithoutEqualityFromValue returns a pointer to a valid ComparatorWithoutEquality
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewComparatorWithoutEqualityFromValue(v string) (*ComparatorWithoutEquality, error) {
	ev := ComparatorWithoutEquality(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ComparatorWithoutEquality: valid values are %v", v, AllowedComparatorWithoutEqualityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ComparatorWithoutEquality) IsValid() bool {
	for _, existing := range AllowedComparatorWithoutEqualityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ComparatorWithoutEquality value
func (v ComparatorWithoutEquality) Ptr() *ComparatorWithoutEquality {
	return &v
}

type NullableComparatorWithoutEquality struct {
	value *ComparatorWithoutEquality
	isSet bool
}

func (v NullableComparatorWithoutEquality) Get() *ComparatorWithoutEquality {
	return v.value
}

func (v *NullableComparatorWithoutEquality) Set(val *ComparatorWithoutEquality) {
	v.value = val
	v.isSet = true
}

func (v NullableComparatorWithoutEquality) IsSet() bool {
	return v.isSet
}

func (v *NullableComparatorWithoutEquality) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComparatorWithoutEquality(val *ComparatorWithoutEquality) *NullableComparatorWithoutEquality {
	return &NullableComparatorWithoutEquality{value: val, isSet: true}
}

func (v NullableComparatorWithoutEquality) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComparatorWithoutEquality) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
