/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// MonitorHealthState struct for MonitorHealthState
type MonitorHealthState struct {
	Id                          string                     `json:"id"`
	State                       HealthStateValue           `json:"state"`
	TopologyIdentifier          string                     `json:"topologyIdentifier"`
	DisplayTimeSeries           []MonitorDisplayTimeSeries `json:"displayTimeSeries,omitempty"`
	RemediationHintTemplateData map[string]interface{}     `json:"remediationHintTemplateData,omitempty"`
	Message                     *string                    `json:"message,omitempty"`
	Reason                      *string                    `json:"reason,omitempty"`
}

// NewMonitorHealthState instantiates a new MonitorHealthState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorHealthState(id string, state HealthStateValue, topologyIdentifier string) *MonitorHealthState {
	this := MonitorHealthState{}
	this.Id = id
	this.State = state
	this.TopologyIdentifier = topologyIdentifier
	return &this
}

// NewMonitorHealthStateWithDefaults instantiates a new MonitorHealthState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorHealthStateWithDefaults() *MonitorHealthState {
	this := MonitorHealthState{}
	return &this
}

// GetId returns the Id field value
func (o *MonitorHealthState) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MonitorHealthState) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MonitorHealthState) SetId(v string) {
	o.Id = v
}

// GetState returns the State field value
func (o *MonitorHealthState) GetState() HealthStateValue {
	if o == nil {
		var ret HealthStateValue
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *MonitorHealthState) GetStateOk() (*HealthStateValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *MonitorHealthState) SetState(v HealthStateValue) {
	o.State = v
}

// GetTopologyIdentifier returns the TopologyIdentifier field value
func (o *MonitorHealthState) GetTopologyIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopologyIdentifier
}

// GetTopologyIdentifierOk returns a tuple with the TopologyIdentifier field value
// and a boolean to check if the value has been set.
func (o *MonitorHealthState) GetTopologyIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopologyIdentifier, true
}

// SetTopologyIdentifier sets field value
func (o *MonitorHealthState) SetTopologyIdentifier(v string) {
	o.TopologyIdentifier = v
}

// GetDisplayTimeSeries returns the DisplayTimeSeries field value if set, zero value otherwise.
func (o *MonitorHealthState) GetDisplayTimeSeries() []MonitorDisplayTimeSeries {
	if o == nil || o.DisplayTimeSeries == nil {
		var ret []MonitorDisplayTimeSeries
		return ret
	}
	return o.DisplayTimeSeries
}

// GetDisplayTimeSeriesOk returns a tuple with the DisplayTimeSeries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorHealthState) GetDisplayTimeSeriesOk() ([]MonitorDisplayTimeSeries, bool) {
	if o == nil || o.DisplayTimeSeries == nil {
		return nil, false
	}
	return o.DisplayTimeSeries, true
}

// HasDisplayTimeSeries returns a boolean if a field has been set.
func (o *MonitorHealthState) HasDisplayTimeSeries() bool {
	if o != nil && o.DisplayTimeSeries != nil {
		return true
	}

	return false
}

// SetDisplayTimeSeries gets a reference to the given []MonitorDisplayTimeSeries and assigns it to the DisplayTimeSeries field.
func (o *MonitorHealthState) SetDisplayTimeSeries(v []MonitorDisplayTimeSeries) {
	o.DisplayTimeSeries = v
}

// GetRemediationHintTemplateData returns the RemediationHintTemplateData field value if set, zero value otherwise.
func (o *MonitorHealthState) GetRemediationHintTemplateData() map[string]interface{} {
	if o == nil || o.RemediationHintTemplateData == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.RemediationHintTemplateData
}

// GetRemediationHintTemplateDataOk returns a tuple with the RemediationHintTemplateData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorHealthState) GetRemediationHintTemplateDataOk() (map[string]interface{}, bool) {
	if o == nil || o.RemediationHintTemplateData == nil {
		return nil, false
	}
	return o.RemediationHintTemplateData, true
}

// HasRemediationHintTemplateData returns a boolean if a field has been set.
func (o *MonitorHealthState) HasRemediationHintTemplateData() bool {
	if o != nil && o.RemediationHintTemplateData != nil {
		return true
	}

	return false
}

// SetRemediationHintTemplateData gets a reference to the given map[string]interface{} and assigns it to the RemediationHintTemplateData field.
func (o *MonitorHealthState) SetRemediationHintTemplateData(v map[string]interface{}) {
	o.RemediationHintTemplateData = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *MonitorHealthState) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorHealthState) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *MonitorHealthState) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *MonitorHealthState) SetMessage(v string) {
	o.Message = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *MonitorHealthState) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorHealthState) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *MonitorHealthState) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *MonitorHealthState) SetReason(v string) {
	o.Reason = &v
}

func (o MonitorHealthState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["topologyIdentifier"] = o.TopologyIdentifier
	}
	if o.DisplayTimeSeries != nil {
		toSerialize["displayTimeSeries"] = o.DisplayTimeSeries
	}
	if o.RemediationHintTemplateData != nil {
		toSerialize["remediationHintTemplateData"] = o.RemediationHintTemplateData
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorHealthState struct {
	value *MonitorHealthState
	isSet bool
}

func (v NullableMonitorHealthState) Get() *MonitorHealthState {
	return v.value
}

func (v *NullableMonitorHealthState) Set(val *MonitorHealthState) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorHealthState) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorHealthState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorHealthState(val *MonitorHealthState) *NullableMonitorHealthState {
	return &NullableMonitorHealthState{value: val, isSet: true}
}

func (v NullableMonitorHealthState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorHealthState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
