/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// MonitorCheckStatusComponent struct for MonitorCheckStatusComponent
type MonitorCheckStatusComponent struct {
	Id         int64   `json:"id"`
	Identifier string  `json:"identifier"`
	Name       string  `json:"name"`
	Type       string  `json:"type"`
	Iconbase64 *string `json:"iconbase64,omitempty"`
	Namespace  *string `json:"namespace,omitempty"`
	Cluster    *string `json:"cluster,omitempty"`
}

// NewMonitorCheckStatusComponent instantiates a new MonitorCheckStatusComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorCheckStatusComponent(id int64, identifier string, name string, type_ string) *MonitorCheckStatusComponent {
	this := MonitorCheckStatusComponent{}
	this.Id = id
	this.Identifier = identifier
	this.Name = name
	this.Type = type_
	return &this
}

// NewMonitorCheckStatusComponentWithDefaults instantiates a new MonitorCheckStatusComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorCheckStatusComponentWithDefaults() *MonitorCheckStatusComponent {
	this := MonitorCheckStatusComponent{}
	return &this
}

// GetId returns the Id field value
func (o *MonitorCheckStatusComponent) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatusComponent) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MonitorCheckStatusComponent) SetId(v int64) {
	o.Id = v
}

// GetIdentifier returns the Identifier field value
func (o *MonitorCheckStatusComponent) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatusComponent) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *MonitorCheckStatusComponent) SetIdentifier(v string) {
	o.Identifier = v
}

// GetName returns the Name field value
func (o *MonitorCheckStatusComponent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatusComponent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MonitorCheckStatusComponent) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *MonitorCheckStatusComponent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatusComponent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MonitorCheckStatusComponent) SetType(v string) {
	o.Type = v
}

// GetIconbase64 returns the Iconbase64 field value if set, zero value otherwise.
func (o *MonitorCheckStatusComponent) GetIconbase64() string {
	if o == nil || o.Iconbase64 == nil {
		var ret string
		return ret
	}
	return *o.Iconbase64
}

// GetIconbase64Ok returns a tuple with the Iconbase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatusComponent) GetIconbase64Ok() (*string, bool) {
	if o == nil || o.Iconbase64 == nil {
		return nil, false
	}
	return o.Iconbase64, true
}

// HasIconbase64 returns a boolean if a field has been set.
func (o *MonitorCheckStatusComponent) HasIconbase64() bool {
	if o != nil && o.Iconbase64 != nil {
		return true
	}

	return false
}

// SetIconbase64 gets a reference to the given string and assigns it to the Iconbase64 field.
func (o *MonitorCheckStatusComponent) SetIconbase64(v string) {
	o.Iconbase64 = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *MonitorCheckStatusComponent) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatusComponent) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *MonitorCheckStatusComponent) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *MonitorCheckStatusComponent) SetNamespace(v string) {
	o.Namespace = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *MonitorCheckStatusComponent) GetCluster() string {
	if o == nil || o.Cluster == nil {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorCheckStatusComponent) GetClusterOk() (*string, bool) {
	if o == nil || o.Cluster == nil {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *MonitorCheckStatusComponent) HasCluster() bool {
	if o != nil && o.Cluster != nil {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the Cluster field.
func (o *MonitorCheckStatusComponent) SetCluster(v string) {
	o.Cluster = &v
}

func (o MonitorCheckStatusComponent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Iconbase64 != nil {
		toSerialize["iconbase64"] = o.Iconbase64
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Cluster != nil {
		toSerialize["cluster"] = o.Cluster
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorCheckStatusComponent struct {
	value *MonitorCheckStatusComponent
	isSet bool
}

func (v NullableMonitorCheckStatusComponent) Get() *MonitorCheckStatusComponent {
	return v.value
}

func (v *NullableMonitorCheckStatusComponent) Set(val *MonitorCheckStatusComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorCheckStatusComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorCheckStatusComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorCheckStatusComponent(val *MonitorCheckStatusComponent) *NullableMonitorCheckStatusComponent {
	return &NullableMonitorCheckStatusComponent{value: val, isSet: true}
}

func (v NullableMonitorCheckStatusComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorCheckStatusComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
