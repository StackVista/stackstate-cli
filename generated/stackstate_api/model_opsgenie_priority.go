/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// OpsgeniePriority the model 'OpsgeniePriority'
type OpsgeniePriority string

// List of OpsgeniePriority
const (
	OPSGENIEPRIORITY_P1 OpsgeniePriority = "P1"
	OPSGENIEPRIORITY_P2 OpsgeniePriority = "P2"
	OPSGENIEPRIORITY_P3 OpsgeniePriority = "P3"
	OPSGENIEPRIORITY_P4 OpsgeniePriority = "P4"
	OPSGENIEPRIORITY_P5 OpsgeniePriority = "P5"
)

// All allowed values of OpsgeniePriority enum
var AllowedOpsgeniePriorityEnumValues = []OpsgeniePriority{
	"P1",
	"P2",
	"P3",
	"P4",
	"P5",
}

func (v *OpsgeniePriority) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpsgeniePriority(value)
	for _, existing := range AllowedOpsgeniePriorityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OpsgeniePriority", value)
}

// NewOpsgeniePriorityFromValue returns a pointer to a valid OpsgeniePriority
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpsgeniePriorityFromValue(v string) (*OpsgeniePriority, error) {
	ev := OpsgeniePriority(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OpsgeniePriority: valid values are %v", v, AllowedOpsgeniePriorityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpsgeniePriority) IsValid() bool {
	for _, existing := range AllowedOpsgeniePriorityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpsgeniePriority value
func (v OpsgeniePriority) Ptr() *OpsgeniePriority {
	return &v
}

type NullableOpsgeniePriority struct {
	value *OpsgeniePriority
	isSet bool
}

func (v NullableOpsgeniePriority) Get() *OpsgeniePriority {
	return v.value
}

func (v *NullableOpsgeniePriority) Set(val *OpsgeniePriority) {
	v.value = val
	v.isSet = true
}

func (v NullableOpsgeniePriority) IsSet() bool {
	return v.isSet
}

func (v *NullableOpsgeniePriority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpsgeniePriority(val *OpsgeniePriority) *NullableOpsgeniePriority {
	return &NullableOpsgeniePriority{value: val, isSet: true}
}

func (v NullableOpsgeniePriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpsgeniePriority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
