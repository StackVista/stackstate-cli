/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// PersesGridLayoutCollapse struct for PersesGridLayoutCollapse
type PersesGridLayoutCollapse struct {
	// Indicates whether the grid layout is collapsed.
	Open bool `json:"open"`
}

// NewPersesGridLayoutCollapse instantiates a new PersesGridLayoutCollapse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersesGridLayoutCollapse(open bool) *PersesGridLayoutCollapse {
	this := PersesGridLayoutCollapse{}
	this.Open = open
	return &this
}

// NewPersesGridLayoutCollapseWithDefaults instantiates a new PersesGridLayoutCollapse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersesGridLayoutCollapseWithDefaults() *PersesGridLayoutCollapse {
	this := PersesGridLayoutCollapse{}
	return &this
}

// GetOpen returns the Open field value
func (o *PersesGridLayoutCollapse) GetOpen() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Open
}

// GetOpenOk returns a tuple with the Open field value
// and a boolean to check if the value has been set.
func (o *PersesGridLayoutCollapse) GetOpenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Open, true
}

// SetOpen sets field value
func (o *PersesGridLayoutCollapse) SetOpen(v bool) {
	o.Open = v
}

func (o PersesGridLayoutCollapse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["open"] = o.Open
	}
	return json.Marshal(toSerialize)
}

type NullablePersesGridLayoutCollapse struct {
	value *PersesGridLayoutCollapse
	isSet bool
}

func (v NullablePersesGridLayoutCollapse) Get() *PersesGridLayoutCollapse {
	return v.value
}

func (v *NullablePersesGridLayoutCollapse) Set(val *PersesGridLayoutCollapse) {
	v.value = val
	v.isSet = true
}

func (v NullablePersesGridLayoutCollapse) IsSet() bool {
	return v.isSet
}

func (v *NullablePersesGridLayoutCollapse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersesGridLayoutCollapse(val *PersesGridLayoutCollapse) *NullablePersesGridLayoutCollapse {
	return &NullablePersesGridLayoutCollapse{value: val, isSet: true}
}

func (v NullablePersesGridLayoutCollapse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersesGridLayoutCollapse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
