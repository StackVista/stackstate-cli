/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// TeamsNotificationChannel struct for TeamsNotificationChannel
type TeamsNotificationChannel struct {
	Id                          int64                     `json:"id"`
	NotificationConfigurationId *int64                    `json:"notificationConfigurationId,omitempty"`
	Status                      NotificationChannelStatus `json:"status"`
	Url                         string                    `json:"url"`
	Type                        string                    `json:"_type"`
}

// NewTeamsNotificationChannel instantiates a new TeamsNotificationChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamsNotificationChannel(id int64, status NotificationChannelStatus, url string, type_ string) *TeamsNotificationChannel {
	this := TeamsNotificationChannel{}
	this.Id = id
	this.Status = status
	this.Url = url
	this.Type = type_
	return &this
}

// NewTeamsNotificationChannelWithDefaults instantiates a new TeamsNotificationChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamsNotificationChannelWithDefaults() *TeamsNotificationChannel {
	this := TeamsNotificationChannel{}
	return &this
}

// GetId returns the Id field value
func (o *TeamsNotificationChannel) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TeamsNotificationChannel) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TeamsNotificationChannel) SetId(v int64) {
	o.Id = v
}

// GetNotificationConfigurationId returns the NotificationConfigurationId field value if set, zero value otherwise.
func (o *TeamsNotificationChannel) GetNotificationConfigurationId() int64 {
	if o == nil || o.NotificationConfigurationId == nil {
		var ret int64
		return ret
	}
	return *o.NotificationConfigurationId
}

// GetNotificationConfigurationIdOk returns a tuple with the NotificationConfigurationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamsNotificationChannel) GetNotificationConfigurationIdOk() (*int64, bool) {
	if o == nil || o.NotificationConfigurationId == nil {
		return nil, false
	}
	return o.NotificationConfigurationId, true
}

// HasNotificationConfigurationId returns a boolean if a field has been set.
func (o *TeamsNotificationChannel) HasNotificationConfigurationId() bool {
	if o != nil && o.NotificationConfigurationId != nil {
		return true
	}

	return false
}

// SetNotificationConfigurationId gets a reference to the given int64 and assigns it to the NotificationConfigurationId field.
func (o *TeamsNotificationChannel) SetNotificationConfigurationId(v int64) {
	o.NotificationConfigurationId = &v
}

// GetStatus returns the Status field value
func (o *TeamsNotificationChannel) GetStatus() NotificationChannelStatus {
	if o == nil {
		var ret NotificationChannelStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TeamsNotificationChannel) GetStatusOk() (*NotificationChannelStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TeamsNotificationChannel) SetStatus(v NotificationChannelStatus) {
	o.Status = v
}

// GetUrl returns the Url field value
func (o *TeamsNotificationChannel) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *TeamsNotificationChannel) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *TeamsNotificationChannel) SetUrl(v string) {
	o.Url = v
}

// GetType returns the Type field value
func (o *TeamsNotificationChannel) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TeamsNotificationChannel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TeamsNotificationChannel) SetType(v string) {
	o.Type = v
}

func (o TeamsNotificationChannel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.NotificationConfigurationId != nil {
		toSerialize["notificationConfigurationId"] = o.NotificationConfigurationId
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["_type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTeamsNotificationChannel struct {
	value *TeamsNotificationChannel
	isSet bool
}

func (v NullableTeamsNotificationChannel) Get() *TeamsNotificationChannel {
	return v.value
}

func (v *NullableTeamsNotificationChannel) Set(val *TeamsNotificationChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamsNotificationChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamsNotificationChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamsNotificationChannel(val *TeamsNotificationChannel) *NullableTeamsNotificationChannel {
	return &NullableTeamsNotificationChannel{value: val, isSet: true}
}

func (v NullableTeamsNotificationChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamsNotificationChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
