/*
StackState Admin API

StackState's Admin API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

type RetentionAPI interface {

	/*
		GetRetentionEpoch Get retention epoch

		Get StackGraph retention epoch.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetRetentionEpochRequest
	*/
	GetRetentionEpoch(ctx context.Context) ApiGetRetentionEpochRequest

	// GetRetentionEpochExecute executes the request
	//  @return EpochTx
	GetRetentionEpochExecute(r ApiGetRetentionEpochRequest) (*EpochTx, *http.Response, error)

	/*
		GetRetentionWindow Get retention window

		Get StackGraph retention window.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetRetentionWindowRequest
	*/
	GetRetentionWindow(ctx context.Context) ApiGetRetentionWindowRequest

	// GetRetentionWindowExecute executes the request
	//  @return WindowMs
	GetRetentionWindowExecute(r ApiGetRetentionWindowRequest) (*WindowMs, *http.Response, error)

	/*
		RemoveExpiredData Remove expired data from StackGraph

		Either schedule removal or immediately remove expired data from StackGraph

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiRemoveExpiredDataRequest
	*/
	RemoveExpiredData(ctx context.Context) ApiRemoveExpiredDataRequest

	// RemoveExpiredDataExecute executes the request
	//  @return RemovalProgress
	RemoveExpiredDataExecute(r ApiRemoveExpiredDataRequest) (*RemovalProgress, *http.Response, error)

	/*
		SetRetentionWindow Set retention window

		Set StackGraph retention window and optionally schedule data removal.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiSetRetentionWindowRequest
	*/
	SetRetentionWindow(ctx context.Context) ApiSetRetentionWindowRequest

	// SetRetentionWindowExecute executes the request
	//  @return WindowMs
	SetRetentionWindowExecute(r ApiSetRetentionWindowRequest) (*WindowMs, *http.Response, error)
}

// RetentionAPIService RetentionAPI service
type RetentionAPIService service

type ApiGetRetentionEpochRequest struct {
	ctx        context.Context
	ApiService RetentionAPI
}

func (r ApiGetRetentionEpochRequest) Execute() (*EpochTx, *http.Response, error) {
	return r.ApiService.GetRetentionEpochExecute(r)
}

/*
GetRetentionEpoch Get retention epoch

Get StackGraph retention epoch.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetRetentionEpochRequest
*/
func (a *RetentionAPIService) GetRetentionEpoch(ctx context.Context) ApiGetRetentionEpochRequest {
	return ApiGetRetentionEpochRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EpochTx
func (a *RetentionAPIService) GetRetentionEpochExecute(r ApiGetRetentionEpochRequest) (*EpochTx, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EpochTx
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RetentionAPIService.GetRetentionEpoch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/retention/currentEpoch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRetentionWindowRequest struct {
	ctx        context.Context
	ApiService RetentionAPI
}

func (r ApiGetRetentionWindowRequest) Execute() (*WindowMs, *http.Response, error) {
	return r.ApiService.GetRetentionWindowExecute(r)
}

/*
GetRetentionWindow Get retention window

Get StackGraph retention window.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetRetentionWindowRequest
*/
func (a *RetentionAPIService) GetRetentionWindow(ctx context.Context) ApiGetRetentionWindowRequest {
	return ApiGetRetentionWindowRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WindowMs
func (a *RetentionAPIService) GetRetentionWindowExecute(r ApiGetRetentionWindowRequest) (*WindowMs, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WindowMs
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RetentionAPIService.GetRetentionWindow")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/retention/window"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveExpiredDataRequest struct {
	ctx                         context.Context
	ApiService                  RetentionAPI
	expireImmediatelyAndRestart *bool
}

// If set, makes StackState remove expired data immediately and restart afterwards.
func (r ApiRemoveExpiredDataRequest) ExpireImmediatelyAndRestart(expireImmediatelyAndRestart bool) ApiRemoveExpiredDataRequest {
	r.expireImmediatelyAndRestart = &expireImmediatelyAndRestart
	return r
}

func (r ApiRemoveExpiredDataRequest) Execute() (*RemovalProgress, *http.Response, error) {
	return r.ApiService.RemoveExpiredDataExecute(r)
}

/*
RemoveExpiredData Remove expired data from StackGraph

Either schedule removal or immediately remove expired data from StackGraph

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRemoveExpiredDataRequest
*/
func (a *RetentionAPIService) RemoveExpiredData(ctx context.Context) ApiRemoveExpiredDataRequest {
	return ApiRemoveExpiredDataRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RemovalProgress
func (a *RetentionAPIService) RemoveExpiredDataExecute(r ApiRemoveExpiredDataRequest) (*RemovalProgress, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RemovalProgress
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RetentionAPIService.RemoveExpiredData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/retention/removeExpiredData"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.expireImmediatelyAndRestart != nil {
		localVarQueryParams.Add("expireImmediatelyAndRestart", parameterToString(*r.expireImmediatelyAndRestart, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetRetentionWindowRequest struct {
	ctx             context.Context
	ApiService      RetentionAPI
	windowMs        *WindowMs
	scheduleRemoval *bool
}

// The new retention window value.
func (r ApiSetRetentionWindowRequest) WindowMs(windowMs WindowMs) ApiSetRetentionWindowRequest {
	r.windowMs = &windowMs
	return r
}

// If set, makes StackState schedule removal of expired data according to the set retention window.
func (r ApiSetRetentionWindowRequest) ScheduleRemoval(scheduleRemoval bool) ApiSetRetentionWindowRequest {
	r.scheduleRemoval = &scheduleRemoval
	return r
}

func (r ApiSetRetentionWindowRequest) Execute() (*WindowMs, *http.Response, error) {
	return r.ApiService.SetRetentionWindowExecute(r)
}

/*
SetRetentionWindow Set retention window

Set StackGraph retention window and optionally schedule data removal.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSetRetentionWindowRequest
*/
func (a *RetentionAPIService) SetRetentionWindow(ctx context.Context) ApiSetRetentionWindowRequest {
	return ApiSetRetentionWindowRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WindowMs
func (a *RetentionAPIService) SetRetentionWindowExecute(r ApiSetRetentionWindowRequest) (*WindowMs, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WindowMs
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RetentionAPIService.SetRetentionWindow")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/retention/window"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.windowMs == nil {
		return localVarReturnValue, nil, reportError("windowMs is required and must be specified")
	}

	if r.scheduleRemoval != nil {
		localVarQueryParams.Add("scheduleRemoval", parameterToString(*r.scheduleRemoval, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.windowMs
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ServiceBearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-ServiceBearer"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------

type RetentionAPIMock struct {
	GetRetentionEpochCalls     *[]GetRetentionEpochCall
	GetRetentionEpochResponse  GetRetentionEpochMockResponse
	GetRetentionWindowCalls    *[]GetRetentionWindowCall
	GetRetentionWindowResponse GetRetentionWindowMockResponse
	RemoveExpiredDataCalls     *[]RemoveExpiredDataCall
	RemoveExpiredDataResponse  RemoveExpiredDataMockResponse
	SetRetentionWindowCalls    *[]SetRetentionWindowCall
	SetRetentionWindowResponse SetRetentionWindowMockResponse
}

func NewRetentionAPIMock() RetentionAPIMock {
	xGetRetentionEpochCalls := make([]GetRetentionEpochCall, 0)
	xGetRetentionWindowCalls := make([]GetRetentionWindowCall, 0)
	xRemoveExpiredDataCalls := make([]RemoveExpiredDataCall, 0)
	xSetRetentionWindowCalls := make([]SetRetentionWindowCall, 0)
	return RetentionAPIMock{
		GetRetentionEpochCalls:  &xGetRetentionEpochCalls,
		GetRetentionWindowCalls: &xGetRetentionWindowCalls,
		RemoveExpiredDataCalls:  &xRemoveExpiredDataCalls,
		SetRetentionWindowCalls: &xSetRetentionWindowCalls,
	}
}

type GetRetentionEpochMockResponse struct {
	Result   EpochTx
	Response *http.Response
	Error    error
}

type GetRetentionEpochCall struct {
}

func (mock RetentionAPIMock) GetRetentionEpoch(ctx context.Context) ApiGetRetentionEpochRequest {
	return ApiGetRetentionEpochRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock RetentionAPIMock) GetRetentionEpochExecute(r ApiGetRetentionEpochRequest) (*EpochTx, *http.Response, error) {
	p := GetRetentionEpochCall{}
	*mock.GetRetentionEpochCalls = append(*mock.GetRetentionEpochCalls, p)
	return &mock.GetRetentionEpochResponse.Result, mock.GetRetentionEpochResponse.Response, mock.GetRetentionEpochResponse.Error
}

type GetRetentionWindowMockResponse struct {
	Result   WindowMs
	Response *http.Response
	Error    error
}

type GetRetentionWindowCall struct {
}

func (mock RetentionAPIMock) GetRetentionWindow(ctx context.Context) ApiGetRetentionWindowRequest {
	return ApiGetRetentionWindowRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock RetentionAPIMock) GetRetentionWindowExecute(r ApiGetRetentionWindowRequest) (*WindowMs, *http.Response, error) {
	p := GetRetentionWindowCall{}
	*mock.GetRetentionWindowCalls = append(*mock.GetRetentionWindowCalls, p)
	return &mock.GetRetentionWindowResponse.Result, mock.GetRetentionWindowResponse.Response, mock.GetRetentionWindowResponse.Error
}

type RemoveExpiredDataMockResponse struct {
	Result   RemovalProgress
	Response *http.Response
	Error    error
}

type RemoveExpiredDataCall struct {
	PexpireImmediatelyAndRestart *bool
}

func (mock RetentionAPIMock) RemoveExpiredData(ctx context.Context) ApiRemoveExpiredDataRequest {
	return ApiRemoveExpiredDataRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock RetentionAPIMock) RemoveExpiredDataExecute(r ApiRemoveExpiredDataRequest) (*RemovalProgress, *http.Response, error) {
	p := RemoveExpiredDataCall{
		PexpireImmediatelyAndRestart: r.expireImmediatelyAndRestart,
	}
	*mock.RemoveExpiredDataCalls = append(*mock.RemoveExpiredDataCalls, p)
	return &mock.RemoveExpiredDataResponse.Result, mock.RemoveExpiredDataResponse.Response, mock.RemoveExpiredDataResponse.Error
}

type SetRetentionWindowMockResponse struct {
	Result   WindowMs
	Response *http.Response
	Error    error
}

type SetRetentionWindowCall struct {
	PwindowMs        *WindowMs
	PscheduleRemoval *bool
}

func (mock RetentionAPIMock) SetRetentionWindow(ctx context.Context) ApiSetRetentionWindowRequest {
	return ApiSetRetentionWindowRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock RetentionAPIMock) SetRetentionWindowExecute(r ApiSetRetentionWindowRequest) (*WindowMs, *http.Response, error) {
	p := SetRetentionWindowCall{
		PwindowMs:        r.windowMs,
		PscheduleRemoval: r.scheduleRemoval,
	}
	*mock.SetRetentionWindowCalls = append(*mock.SetRetentionWindowCalls, p)
	return &mock.SetRetentionWindowResponse.Result, mock.SetRetentionWindowResponse.Response, mock.SetRetentionWindowResponse.Error
}
