variables:
  GORELEASER_TAG: "v1.7.0"
  GORELEASER_IMAGE: "goreleaser/goreleaser:${GORELEASER_TAG}"
  GOLANGCI_LINT_TAG: "v1.44.2"
  GOLANGCI_LINT_IMAGE: "golangci/golangci-lint:${GOLANGCI_LINT_TAG}"

image: "golang:latest"

stages:
  - check
  - build
  - test
  - deploy

.go-base:
  image:
    name: ${GORELEASER_IMAGE}
    entrypoint: [""]
  variables:
    GOPATH: /go
    GITLAB_TOKEN: ${gitlab_api_scope_token}
  before_script:
  cache:
    paths:
      - /go/pkg/mod/

lint:
  image: ${GOLANGCI_LINT_IMAGE}
  stage: check
  script:
    - golangci-lint run

license_scanning:
  stage: check
  image: "registry.gitlab.com/gitlab-org/security-products/analyzers/license-finder:3"
  variables:
    LM_REPORT_VERSION: '2.1'
  allow_failure: true
  script:
    - /run.sh analyze .
  artifacts:
    reports:
      license_scanning: gl-license-scanning-report.json

dependency_scanning:
  stage: check
  image: "registry.gitlab.com/gitlab-org/security-products/analyzers/gemnasium:2"
  script:
    - /analyzer run
  allow_failure: true
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json

goreleaser_check:
  stage: check
  extends: .go-base
  rules:
    - changes:
      - .goreleaser.yml
  script:
    - goreleaser check

compile:
  stage: build
  extends: .go-base
  script:
  - goreleaser build --rm-dist --snapshot
  tags:
    - sts-k8s-xl-runner
  artifacts:
    paths:
      - dist/
    untracked: false
    expire_in: 30 days

test:
  stage: test
  extends: .go-base
  tags:
    - sts-k8s-xl-runner
  script:
    - go test ./...

publish:
  # needs:
  # - test
  stage: deploy
  extends: .go-base
  script:
  - goreleaser release 
  tags:
    - sts-k8s-xl-runner
  # rules:
  #   - if: $CI_COMMIT_TAG
  #     when: always
  #   - when: never
